<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>有才的博客</title>
  
  <subtitle>不孤独，无自由</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="yanchongsheng.github.io/"/>
  <updated>2018-05-15T06:03:44.692Z</updated>
  <id>yanchongsheng.github.io/</id>
  
  <author>
    <name>Yan ChongSheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客链接</title>
    <link href="yanchongsheng.github.io/2018/05/15/%E5%8D%9A%E5%AE%A2%E9%93%BE%E6%8E%A5/"/>
    <id>yanchongsheng.github.io/2018/05/15/博客链接/</id>
    <published>2018-05-15T06:00:03.000Z</published>
    <updated>2018-05-15T06:03:44.692Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"> 记录工作学习中看到的不错的文章链接 </blockquote></p><a id="more"></a><h3 id="理解-JNI-技术"><a href="#理解-JNI-技术" class="headerlink" title="理解 JNI 技术"></a><a href="https://pqpo.me/2017/05/17/jni/" target="_blank" rel="noopener">理解 JNI 技术</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt; 记录工作学习中看到的不错的文章链接 &lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具手册" scheme="yanchongsheng.github.io/categories/%E5%B7%A5%E5%85%B7%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="工具手册" scheme="yanchongsheng.github.io/tags/%E5%B7%A5%E5%85%B7%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>Java 9 模块化</title>
    <link href="yanchongsheng.github.io/2018/05/12/Java9%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>yanchongsheng.github.io/2018/05/12/Java9模块化/</id>
    <published>2018-05-12T10:20:34.000Z</published>
    <updated>2018-05-11T09:09:09.670Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"> Java 9 模块化 </blockquote><a id="more"></a><h2 id="模块化-Modular"><a href="#模块化-Modular" class="headerlink" title="模块化(Modular)"></a>模块化(Modular)</h2><p>是将 Java 长期依赖 JRE 的结构，转变成以 Module 为基础的组件。</p><h2 id="模块化目的-解决-classpath-地狱问题，改进部署能力"><a href="#模块化目的-解决-classpath-地狱问题，改进部署能力" class="headerlink" title="模块化目的 (解决 classpath 地狱问题，改进部署能力)"></a>模块化目的 (解决 classpath 地狱问题，改进部署能力)</h2><ul><li>让 Java 的 SE 程序更加容易轻量级部署</li><li>改进组件间的依赖管理，引入比 Jar 粒度更大的 Module</li><li>改进性能和安全性</li></ul><h2 id="什么是-Java-Module"><a href="#什么是-Java-Module" class="headerlink" title="什么是 Java Module"></a>什么是 Java Module</h2><p>模块就是 代码 和 数据 的封装体，粒度比 jar 包大，即一些包和一个 module-info.java 文件的集合体<br><img src="/upload_image/java_module01.png" alt="Java 模块化示例" title="Java 模块化示例"></p><h2 id="module-info-java-简介"><a href="#module-info-java-简介" class="headerlink" title="module-info.java 简介"></a>module-info.java 简介</h2><p>模块的是通过 module-info.java 进行定义，编译后打包后，就成为一个模块的实体。主要用来指定模块之间的依赖关系，exports 用来指定该模块中哪些内容其它模块可以使用，requires 用来指定当前模块的依赖模块。transitive 表示可以传递依赖，例如 A requires B，B requries transitive C，那么 A 就可以直接访问 C，原因就是 B 上面有「requries transitive」。<br><img src="/upload_image/java_module02.png" alt="module-info.java" title="module-info.java"></p><h2 id="public-不再意味着-accessible！"><a href="#public-不再意味着-accessible！" class="headerlink" title="public 不再意味着 accessible！"></a>public 不再意味着 accessible！</h2><p>模块之间的关系被称作 readability（可读性），代表一个模块是否可以找到这个模块文件，并且读入系统中（注意：并非代表可以访问其中的类型）。实际的代码，一个类型对于另外一个类型的调用，我们称之为可访问性 (Accessible)，这意味着可以使用这个类型。可访问性的前提是可读性，换句话说，先有模块可读，然后再进一步检测可访问性。</p><p>可访问性由大到小为：</p><blockquote><p>public to everyone<br>  public but only to specific modules<br>  public only within a module<br>  protected<br>  &lt;package&gt;<br>private</p></blockquote><p>模块间的关系：可读性，使用 requires/exports 表示<br>类型之间的关系：可访问性，使用 public/private/protect/package 表示</p><h2 id="JLink-简介"><a href="#JLink-简介" class="headerlink" title="JLink 简介"></a>JLink 简介</h2><p>JLink 是将 Module 进行打包的工具，在 jdk 的 bin 目录下有 jlink.exe 程序，用来打包 module 的。</p><blockquote><p>jlink <options>               「jlink 命令」<br>  –module-path <modulepath>    「自定义模块路径」<br>  –add-modules <mods>          「其他的模块列表」<br>  –output <path></path>               「生成文件的输出位置」</mods></modulepath></options></p></blockquote><h2 id="模块化-跟-Maven-或-Gradle-的关系"><a href="#模块化-跟-Maven-或-Gradle-的关系" class="headerlink" title="模块化 跟 Maven 或 Gradle 的关系"></a>模块化 跟 Maven 或 Gradle 的关系</h2><blockquote><p>Modular 是系统内置用于表述<b>组件</b>之间的关系，对于版本的管理还是处于最原始的状体。它管理一种<b>强制</b>的依赖关系。<br>  Maven有两个核心功能: 1、组件的依赖管理，特别是版本的管理，这种依赖是逻辑上的，并非强制的 2、管理开发过程中的各种任务，初始化，测试等等。</p></blockquote><h2 id="module-的原理-和-实现"><a href="#module-的原理-和-实现" class="headerlink" title="module 的原理 和 实现"></a>module 的原理 和 实现</h2><p>1、将系统内部类进行模块化</p><blockquote><p>不用再区分太多 J2ME, J2SE，J2EE，大家都是用模块作为沟通语言。<br>2、将 ClassLoader 分级<br>将 ClassLoader 分为三个级别，Bootstrap Loader 具有最高优先级和权限，主要是核心的系统类；Platform Loader 用于扩展的一些系统类，例如 SQL,XML 等；Application Loader 主要用于应用程序的 Loader。在这三个级别的 Loader 下面有一个统一 Module 管理，用于控制和管理模块间的依赖关系，可读性，可访问性等。 注意：ClassLoader 在 Java 9 中的类装载逻辑和之前一样。但是，通过模块管理系统，ClassLoader.FindClass 的能力，将被限制在readable&amp;accessible 的条件下，而不是之前的简单的 Public 条件。<br><img src="/upload_image/java_module03.png" alt="ClassLoader 分级" title="ClassLoader 分级"></p></blockquote><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://toutiao.io/posts/452124/app_preview" target="_blank" rel="noopener">JAR Hell</a><br><a href="https://www.jianshu.com/p/053a5ca89bbb" target="_blank" rel="noopener">Java 9 新特性来临——模块化</a><br><a href="https://juejin.im/entry/59cdb7e65188255d3448fc64" target="_blank" rel="noopener">Java 9 新特性——module 模块系统</a><br><a href="http://www.cnblogs.com/IcanFixIt/p/7110790.html" target="_blank" rel="noopener">Java 9 揭秘——创建自定义运行时映像</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt; Java 9 模块化 &lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="yanchongsheng.github.io/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 基础" scheme="yanchongsheng.github.io/tags/Java-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HashMap 入门</title>
    <link href="yanchongsheng.github.io/2018/05/12/HashMap%E5%85%A5%E9%97%A8/"/>
    <id>yanchongsheng.github.io/2018/05/12/HashMap入门/</id>
    <published>2018-05-12T09:27:18.000Z</published>
    <updated>2018-05-11T09:29:24.984Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"> HashMap 入门 </blockquote><a id="more"></a><p>##</p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://blog.csdn.net/justloveyou_/article/details/62893086" target="_blank" rel="noopener">Map 综述（一）：彻头彻尾理解 HashMap</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt; HashMap 入门 &lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="yanchongsheng.github.io/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 基础" scheme="yanchongsheng.github.io/tags/Java-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>请停止无效努力</title>
    <link href="yanchongsheng.github.io/2018/05/12/%E8%AF%B7%E5%81%9C%E6%AD%A2%E6%97%A0%E6%95%88%E5%8A%AA%E5%8A%9B/"/>
    <id>yanchongsheng.github.io/2018/05/12/请停止无效努力/</id>
    <published>2018-05-12T04:47:53.000Z</published>
    <updated>2018-05-11T09:25:04.810Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">《请停止无效努力》</blockquote><a id="more"></a><h2 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h2><h2 id="请停止无效努力"><a href="#请停止无效努力" class="headerlink" title="请停止无效努力"></a>请停止无效努力</h2><p>   作者：孙圈圈</p><p>   出版策划：石生琼 禹成豪</p><p>   责任编辑：郭强</p><p>   图书监制：王猛</p><p>   策划编辑：冀海波</p><p>   出版社：团结出版社</p><p>   本版版次：2017年1月</p><p>   ISBN：978-7-5126-4675-9</p><h2 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h2><p>   说起这本书，我还为它写过一篇书评。</p><p>   我跟圈圈是相识许久的好友，收到她寄来的书后，我看了看书名一度以为这是本鸡汤书，但以我对她的了解，她是绝无可能写鸡汤的，于是第二天拿起来翻阅，果然如此。</p><p>   圈圈作为我心目中最优秀的职场作家之一，在这本书里汇聚了职场人所需要的几乎一切知识，或许她的名气并没有那些国外的畅销书作者那么大，但在我看来，这本书的价值丝毫不逊于他们的作品，甚至相比而言，那些极度畅销的书反而接近大而泛的可能性更大一些，毕竟，喜欢“看似有用”的人数要比喜欢“真正有用”的人数要多。</p><p>   接下来，我就带大家来好好读读圈圈的这本职场干货书籍，如有原书需求，请自行购买。</p><h2 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h2><p>   第一天跟大家聊聊价值和天赋的概念，你的职场价值有多少，是怎么计算出来的？你有没有天赋，究竟什么才叫做天赋，以及有天赋的人还需不需要努力？</p><h2 id="你的价值"><a href="#你的价值" class="headerlink" title="你的价值"></a>你的价值</h2><p>   在职场上，老板一开始给你定的薪水通常看起来是与你的价值相当的。</p><p>   但价值这个东西看不见摸不着，那么薪水到底是怎么估出来的呢？我相信这个对于很多职场人都很陌生：我到底值多少钱？</p><p>   你的薪水通常=实际价值+外部溢价。</p><p>   什么是外部溢价呢？比如你运气好，选到了一个风口领域，薪水水涨船高了，外部溢价就是正的，有的人运气很差，外部溢价就是负的，这就导致实际价值相等的两个人，薪水也会不等。</p><p>   那实际价值又包含了什么内容？</p><p>   最显性的当然是你的知识和技能，这个是老板一眼能看到的给你的估值，也是比较准确的，还有隐性的比如能力和天赋，你的学习和思考能力，你的沟通和协调能力，你的性格，你的价值观等，这些都是老板一开始看不到的，他很难为你的这些不知道是不是有的隐性能力付钱，但这些却是事实存在的。</p><p>   因此你可以看到两个同样的求职者，以同样的起始薪水进入一个领域，一个3个月一涨薪，另一个5年不动，这就是随着隐性能力渐渐发挥作用导致的薪水变化，而隐性能力，才是竞争力的关键。</p><h2 id="知识和能力"><a href="#知识和能力" class="headerlink" title="知识和能力"></a>知识和能力</h2><p>   很多人报各种技能培训班学习的时候，他们学习的只是单纯的知识和技能，他们觉得自己已经很努力了，但是依然没卵用，让我来告诉你为什么没卵用——因为知识和技能是最容易习得的啊。</p><p>   你可以在网上搜索到任何知识，也可以搜索到任何你想要的技能的教程，然而，你知不知道在哪些方面可以将这些东西结合进去，或者创新出新东西？不知道；什么时候应用，怎样应用有最好的效果？也不知道。</p><p>   举个罗辑思维的例子，罗胖的知识丰富吗？他自己都说了，好多都是前一天刚得来的东西现学现卖，他的那些个知识也不是什么秘密的东西啊，怎么你就不能做呢？因为知识本身根本算不得什么，最重要的是他能给你讲明白，同时还能跟商业运作能力结合起来将它们卖出去。</p><p>   这就是能力。能力不同于知识，能力是通用的，举一反三，以一化百，任何新学到的知识，都得内化成能力，才能说真正的有用。</p><p>   很多人执着于知识本身，比如什么诗词大赛成语大赛一站到底之类的，这些跟能力比起来，就比较低质量，只能有舞台震撼力。</p><h2 id="天赋是潜力"><a href="#天赋是潜力" class="headerlink" title="天赋是潜力"></a>天赋是潜力</h2><p>   很多人认为天赋是一种能力，事实上，天赋只是一种潜力。</p><p>   莫扎特是公认的音乐天才，但他达到的成就却不仅仅靠天赋就能实现，要知道，他在6岁的时候，就已经完成了3500小时的练习，而他父亲作为一位音乐家，也放弃了宫廷乐师的工作，全身心去培养他。</p><p>   这样看来，似乎后天的因素才是主导？也不是，如果你有这样的努力程度和机会，能不能达到莫扎特的高度呢？大概率也是不能。</p><p>   所以天赋是这样一种东西，如果它在那里，用力去开发它的时候，就能比其他人成长得更快；但它光在那里本身是没有用的。</p><p>   你可以把它看成是一个加速器，它能放大努力的作用，但很多人却以为有天赋的人不努力就能得到好的结果，那就错得离谱了。</p><p>   天赋是潜力，而不是能力。</p><h2 id="努力也是天赋"><a href="#努力也是天赋" class="headerlink" title="努力也是天赋"></a>努力也是天赋</h2><p>   一直以来，努力一直被认为和天赋是对立的。</p><p>   我们常说因为某人天赋不足，因此只能靠努力来补足。其实这种说法是有问题的，因为懂得努力本身，也是一种天赋，且是一种不可多得的天赋——意愿天赋。</p><p>   所谓的意愿天赋，指的是有意愿成长，有意愿为发挥天赋而努力。“知道自己要努力”这件事，背后是由性格、动机、价值观等共同决定的，也是有天赋的因素在里头的。</p><p>   因此，不要瞧不起努力的人，也不要认为凭天赋吃饭的人才是真正的牛人，知道自己要努力，本身就含了天赋。</p><h2 id="相对天赋"><a href="#相对天赋" class="headerlink" title="相对天赋"></a>相对天赋</h2><p>   每个人都有天赋，不存在没有天赋的人。</p><p>   所谓的天赋，并不是说只是最顶尖的那几个人拥有的才算，天赋是跟你自己对比，你的A方面天赋&gt;B方面天赋，那么你在A方面就是更有天赋。</p><p>   所以天赋是个相对概念，如果是绝对概念的话，这世上基本就没有人有什么天赋了，有人说，这孩子在钢琴上有天赋，另一个人说，郎朗那才叫有天赋，还有人说，郎朗叫天赋，那莫扎特算什么？这样天赋的概念就是个无底洞了。</p><p>   每个人都需要认清自己的相对天赋在哪里。那怎么知道自己的天赋呢？有一个指标，叫敏感性。</p><p>   以前小学的时候，老师有一个测试数字敏感性的方法，测出来全班我的数字天赋最好，接着当年让我接受了奥数培训，最后奥数竞赛拿了120分满分。</p><p>   每个人都应该关注自己在某一方面异于其他方面的敏感性，老师会拿一套东西来测试我的数字敏感性，那没有老师怎么办，你自己在平时就感受得到的，那些有天赋的领域都是迅速上手且进步神速的，在那些领域，你会感受到更加多的胜任感和归属感。</p><h2 id="今日导言-1"><a href="#今日导言-1" class="headerlink" title="今日导言"></a>今日导言</h2><p>   学习是学什么？这个一定要分清楚。我还记得我的父母辈，他们对于字写得好比较看重，认为字写得好，就有文化，就有学问，领导选择文秘的时候也容易选择那些字漂亮的，但事实上呢？我们都知道，这根本没有一毛钱关系，这些都是典型的认知缺陷。</p><p>   学习也是一样，工具、手段和真正有用的东西一定要分得清清楚楚，该在哪里花最多的时间自己心里是要有数的。</p><h2 id="学习和意志"><a href="#学习和意志" class="headerlink" title="学习和意志"></a>学习和意志</h2><p>   我们都知道，学习是一件很耗费意志力的事情，尤其是在学习区，因此才有这么多人坚持不下去。</p><p>   很多人非常苦恼，以为是自己的意志力不行，事实上，每个人的意志力都是有上限的，我也不例外，有时候也会感到枯燥、疲倦，并没有什么超人的意志力作为能量补给。</p><p>   之所以我的学习时间能比一般人长，是我学习时消耗的意志力少，有时候甚至不怎么消耗意志力。圈圈提了一个很好的方法，叫按需学习，你有需要，就去学习，那么你学完是能即时给自己解决现实问题的，这就不容易像无目的的学习一样感到倦怠，前提是这个问题你很想解决。</p><p>   而我自己会有一些更好的方法，比如你觉得钱好不好？好，那么你是喜欢挣钱吗？不喜欢，事实上你喜欢的是花钱，那么挣钱对你来说就是一个苦差事。</p><p>   你可以把挣钱当作游戏，自行设置关卡，把通关当作一种乐趣，那么当你挣钱的时候，消耗的意志力就会比较少，因为挣钱并不是手段了，它本身就成为了你获取快乐的一种目的。</p><h2 id="知识和工具"><a href="#知识和工具" class="headerlink" title="知识和工具"></a>知识和工具</h2><p>   说到手段和目的，很多人都会搞混。</p><p>   比如有私塾的学员通过小助手问我，说《拆掉思维里的墙》里有提到思维导图，蔡叔你怎么不讲讲思维导图啊？</p><p>   你要清楚，思维导图是学习知识的手段，这种手段在网络上可以随意搜索到，是不具备什么价值的，注意，不是指这个东西没有应用价值，而是它不具备稀缺价值。</p><p>   很多人会晒出漂亮的思维导图，这很好，如果它确实帮助你进行了高效的学习，那么它就是一件好工具，但若是你为了思维导图而导图，把思维导图本身变成了目的，这就把主次给搞混了，思维导图画得再好也得记住，对内容的消化和吸收才是第一位的。</p><p>   工具可以多种多样，对有些人来说，思维导图并不一定比草图更有利于吸收知识，不过目的都应该一致，那就是将好的知识用最适合自己的方式融入大脑并指导实践。</p><h2 id="找出问题"><a href="#找出问题" class="headerlink" title="找出问题"></a>找出问题</h2><p>   爱因斯坦说：给我一个小时解答一道决定我生死的问题，我会花55分钟来弄清这道题到底在问什么，一旦弄清楚了以后，花5分钟解答足矣。</p><p>   以前的一份工作中，我的一位同事是个这样的人，当上级布置任务给他的时候，他永远是第一时间开干，但是当他交上去的时候，每次都得修改三四遍，有一次我也在场，上级说，我不是这个意思啊，为什么你会这么以为？他支支吾吾解释了一通，大概意思是我以为就是这个意思。</p><p>   有一回，他又自作主张地理解上级的意思就开干，我就问他，你确定是这个意思么？或者XXX也有可能啊，你这么做很有可能最后会做无用功的。他说，怎么能一直问领导呢，就按这样理解吧，先做了再说，不行就重做呗，大不了加班。</p><p>   都说没有功劳也有苦劳，可是，谁要你的苦劳呢？花更多的时间找出问题的核心所在，解决就常常可以又快又准。</p><h2 id="真正的问题"><a href="#真正的问题" class="headerlink" title="真正的问题"></a>真正的问题</h2><p>   当我们费力地寻找问题时，有时候会陷入迷茫，因为现实问题不可能只有一个，先解决哪一个好呢？</p><p>   这里要记住两点：</p><p>   1、不是所有的问题都是真正的问题。</p><p>   2、不是所有的问题都值得被解决。</p><p>   有的人会纠结在一些并非真正问题的小事上，比如先穿鞋子还是先穿衣服，先迈左腿还是先迈右腿，并煞有介事地告诉你这是很有讲究的，这在工作上就很要命，因为每个人的精力都是有限的，次要的东西占据了精力，势必会影响到解决主要的问题。</p><p>   于是，这样的人在工作中就显得特别累，最后还不出成绩，在合作中就得小心这样的合作伙伴，分不清主次跟细心是两回事。</p><h2 id="今日导言-2"><a href="#今日导言-2" class="headerlink" title="今日导言"></a>今日导言</h2><p>   什么是结构化思维，什么是独立思考？我相信这样的词经常出现在你的学习生涯中，但很少人愿意去弄懂它们真正的意思。</p><h2 id="结构化思维（1）"><a href="#结构化思维（1）" class="headerlink" title="结构化思维（1）"></a>结构化思维（1）</h2><p>   有没有遇到过这样的人，说了半天话，你全部听得懂，但就是不知道他想表达什么？相信你一定遇到过，或许你也可能是其中一员。</p><p>   是他的表达能力有问题吗？那倒未必，很多时候只是人们的思维有问题，如果思维清晰，表达顶多是磕磕绊绊，不存在不知所云的情况。</p><p>   要清晰表达就要有结构化思维，什么是结构化思维，就是我们在解决问题、面临选择和与人沟通的时候，能够找到一种结构，把那些碎片信息都放进去，同时分门别类。</p><p>   人天生就喜欢规律性的东西，16594318702243基本没人能快速记得住，但12345678901234大家都能记住，因为规则很明显，但两者明明是一样的内容啊。</p><p>   人们都有一些普适性的思考模式，当你思考和表达的时候，要让别人听得懂，也要从普适性的思考模式出发。</p><h2 id="结构化思维（2）"><a href="#结构化思维（2）" class="headerlink" title="结构化思维（2）"></a>结构化思维（2）</h2><p>   那么，该如何进行结构化思维呢？</p><p>   有一个普适性的方法，不管你之前是不是有结构化思维的习惯，对于简单问题，大家都知道怎么思考怎么表达，比如你今天吃什么了？很多人会说，早饭吃什么，中饭吃什么，晚饭吃什么，不会有人一会儿说中饭的两个菜，接着说早饭的包子，然后又说中饭的米饭，再讲晚上的肘子，又说早饭的粥。</p><p>   但是对于复杂的事情呢？比如你如何看待区块链和现实世界的融合？怎么办，没有早上、中午、晚上这么清晰的结构了，这个时候你就需要借助纸和笔，把你能想到的所有东西全部都写下来，无论多碎片，相关性是不是那么强。</p><p>   当你觉得自己差不多穷尽了的时候，把相关性强的连起来，进行分组，提炼出每个组的主题，确保每个组不相互交叉，但这些东西组合起来又完全包含了问题的所有方面。</p><p>   最后将它们用正确的顺序串起来。</p><p>   哦，就这么简单。</p><p>   自己找一件事情去试试吧？多练习以后，你那不知所云的毛病就会不见了。</p><h2 id="独立思考（1）"><a href="#独立思考（1）" class="headerlink" title="独立思考（1）"></a>独立思考（1）</h2><p>   都说要独立思考，独立思考真的很难。</p><p>   因为首先，独立思考通常是反人性的，现成的“观点”那么多，为什么不直接拿一个呢，就算不拿一个路人甲的，拿一个专家的总可以吧？人的大脑就是能懒则懒。</p><p>   其次，正确而严谨的独立思考的结果常常和大多数人的想法相悖。比如爱笑的女生运气不会太差等，麻痹一下大脑是不错的，因为简单，只要我笑就有好运气了，但事实上呢，完全没有这回事，在独立思考以后，幻想打破了，很多人宁可不愿醒来。</p><h2 id="独立思考（2）"><a href="#独立思考（2）" class="headerlink" title="独立思考（2）"></a>独立思考（2）</h2><p>   独立思考的过程中，要区分事实和观点。</p><p>   事实就是事实，比如多吃蔬菜有益健康，而观点就是观点，比如荤菜比蔬菜好吃，但就是有人认为蔬菜是更好吃的，你不能说他不对，但他要是说多吃蔬菜有害健康，那你就可以说他不对了。</p><p>   在我们从小的教育里，老师灌输给我们的往往是观点而不是事实，比如学习不好的是坏孩子等，这就不是好老师的行为，一个好的老师应该是要致力于启发学生的独立思考能力的，而独立思考最重要的，是关注整个论证过程。</p><p>   比如老师说社会主义优于资本主义，你应该问为什么，听听老师的论证过程是不是合理而严谨，证据链是不是都是由事实组成，有没有某些个人的观点掺杂在里面鱼目混珠？这样的思考过程才叫独立思考。</p><p>   有人看到这里会就此理解为独立思考就是要反驳他人，寻找他人的漏洞，其实并不是，独立思考是以推出事实或检验证据为目的，而非赢过什么人，或者赢过什么观点的争论。</p><h2 id="今日导言-3"><a href="#今日导言-3" class="headerlink" title="今日导言"></a>今日导言</h2><p>   职场的很多方面都需要有正确的认知，比如沟通，比如人脉关系，比如职业规划，比如平台，对这些东西认识不清，就容易事倍功半，幸好，我们今天这一天内能帮你全部理一理，至于在内容里留的题，要记得做哦，这样才能更好地巩固知识。</p><h2 id="聊天艺术"><a href="#聊天艺术" class="headerlink" title="聊天艺术"></a>聊天艺术</h2><p>   聊天沟通是一种艺术，既然是艺术，就没有什么绝对的好坏与对错，但人们都有基础的审美，沟通也是，一些基本的东西还是要懂的。</p><p>   讨论就是讨论，辩论就是辩论，汇报工作就是汇报工作，而聊天就是聊天。聊天有时候只是为了缓解尴尬，有时候是为了分享感受，有时候是为了获得认同等，聊天的内容不一定要有结果，如果一定要把以上所有归纳成一个目的，可以是让双方感到愉悦。</p><p>   有些人很较真，这是好习惯吗？无时无刻不在较真肯定不是好习惯，因为这样的人搞不清自己的每一个行为背后要达到什么样的结果。</p><p>   比如有个人问你，我最近是不是胖了？你要回答的并不是根据你的标准去判断她是否胖了，也不是根据你上次见到她的时候来判断她事实上是否胖了，而是先猜测一下，她内心真正希望你说的是什么，然后你根据你的目的和你最想要的结果，去选择合理回答这个问题。</p><p>   所以聊天虽然并不一定是一个目的性的事，但你一定要搞清楚对方的目的以及自己的目的，没有目的那就没有目的，但把有目的理解成没目的，甚至听不清对方的真实目的，在聊天或者是普通沟通中，就收不到最好的效果。</p><h2 id="别忽视弱联系"><a href="#别忽视弱联系" class="headerlink" title="别忽视弱联系"></a>别忽视弱联系</h2><p>   人生得一知己死而无憾，导师们总说，无论躺在微信里的人有多少，核心互动的人就那么几个，泛泛之交就那么几十个，接着是加了也不说话的，而我们要把有限的精力花在那些值得你花时间的朋友身上。</p><p>   这种说法正确吗？当然是有道理的，但有一个现象我们也不能忽视，那就是那些对你的工作、生活起到跃进作用的，往往是弱联系的人。</p><p>   为什么呢？道理也很简单，强联系的人由于跟你的工作或生活圈子比较相似，观点比较接近（聊不到一块去也很难长期建立强联系），因此你们的社交、工作等重合度较高，通常不容易发现意想不到的跃升机会。</p><p>   而弱联系的人首先优势在于跟你的交集和重合度少，你们之间有许多未经分享的“秘密”，这些“秘密”就很有可能是你之前想不到的信息，或者是一直想要却不知道对方有的资源。</p><p>   其次，弱联系的人数比较庞大，比强联系的人数要多十几倍乃至几十倍，且资源和行业五花八门，这就为更多的可能性提供了概率基础。</p><h2 id="弱联系定位"><a href="#弱联系定位" class="headerlink" title="弱联系定位"></a>弱联系定位</h2><p>   弱联系不像强联系，起初可能是因为某个原因联系上了，后来基本靠感情维持，而在弱联系中，如果找不到对于对方的价值，则很容易就会断。</p><p>   因此，在任何的弱联系网络中，每个人都必须给自己一个清晰的定位：我在这个网络中可以充当什么角色？是对方（们）需要的某领域的专业知识？还是能帮助他们做些什么？或者是某种资源的连接节点？这些都要提前想清楚。很多人说，圈子不同，不要强融，能想清楚自己在另一个圈子的定位，并肯定对方需要你，那就不是强融了。</p><p>   在这里大家也可以看出，哪怕是弱联系，其价值、广度和机会也取决于你自身的能力和价值，这在我们的《认知突围》一书中也一样有阐述，有效社交一定是以自身的价值为中心点的，只是清晰自己在每个社交网络中的价值和定位，就可以更好地帮助你筛选弱联系圈子，也能用来规范自己的行为，什么定位该做什么，要明明白白，能提供多少价值就有底气接受多少利益。</p><h2 id="规划自己"><a href="#规划自己" class="headerlink" title="规划自己"></a>规划自己</h2><p>   职业生涯规划听起来很高大上，其实这不算是一项很难掌握的专业技能，当我们有了一些基础知识以后，其实最好的职业生涯规划师是我们自己，因为在正确挖掘之后，只有自己才最了解自己想要什么，至于那些上来就给你一堆术语的，通常不是好的规划师。</p><p>   因为好的规划师要做的只有一点，那就是正确引导你内心真正的需求并激发你独立思考未来的路，而不是将一套标准答案套在任何人的头上。</p><p>   职业生涯规划通常不能太长，5年以后甚至10年以后发生的事，规划得太细是没有意义的，有个大致的方向即可，尤其是在新兴领域，细致的规划更是要缩短至3年内。</p><p>   而规划的内容主要集中在以下7个点：</p><p>   1、我有什么。</p><p>   列出所有能描述自己的项，是所有，足以把自己跟其他人区分开来。</p><p>   2、我想做什么，我要做什么。</p><p>   3、我能帮助谁，我能提供什么价值。</p><p>   4、怎么宣传自己。</p><p>   5、谁可以帮我。</p><p>   6、回报的天花板是多少。</p><p>   7、我愿意付出什么。</p><p>   那么，尝试为自己做一份职业生涯规划试试？可以写在笔记里，看看我们能不能挂出来给其他同学参考。</p><h2 id="平台价值"><a href="#平台价值" class="headerlink" title="平台价值"></a>平台价值</h2><p>   平台在我们的职业生涯中扮演着非常重要的角色，一个人的高度通常取决于自身价值和平台的共同作用。比如王思聪，他可能有些才华，成为了一线网红，但如果他不是王健林的儿子，就可能会被埋没在18线以后，王健林儿子的光环就是他的平台。</p><p>   在经历了一番似懂非懂之后，我们知道了自身价值是最终价值的核心，于是只顾埋头苦干，这就是片面理解了。张小龙不是做完微信才变牛的，他一直都很牛，但微信让大家知道了他的牛，有没有跟他一样牛的？我相信是有不少的，但名气和收入都跟他有天壤之别。</p><p>   酒香也怕巷子深，否则为什么地段好的地方租金如此之贵大家还抢着要呢？平台就是地段，但凡可以让你达到另一个高度的外部因素，都可以称之为平台，无论是你的父母、丈夫/妻子、老师、老板、伙伴、企业等，有光环有跳板给你进阶，都要善于利用，在更大的平台做更大的事，可以让能力跃升得更快。</p><p>   而反例则是那些明明有很好的平台，却不思将其当作自身价值跃升的跳板，反而认为平台里的价值就是真实的价值，因此我们才看到了那么多离开平台就一无是处的曾经的“牛人”。</p><p>   平台是很好的跳板，但只是跳板，一定要牢记这一点。</p><h2 id="今日导言-4"><a href="#今日导言-4" class="headerlink" title="今日导言"></a>今日导言</h2><p>   很多人说，我就差一点点，我只要再努力一点点就行了。这些人往往以“天赋者”自居，但最后往往泯然众人矣，为什么？他们的天赋明明很好。或者你错了，他们的所谓天赋好只是假象而已。</p><h2 id="差一点点"><a href="#差一点点" class="headerlink" title="差一点点"></a>差一点点</h2><p>   无论你在学生时代还是在工作中，总能遇到这样的人，对自己取得一点成绩表示很满意，并对比他牛的人嗤之以鼻，句式通常是这样的：唉，考得真差，才75分，不过算了，咱们都是不爱学习的，看看人家，每天多认真，考90分也是有道理的。</p><p>   明里暗里都想展示自己“若是跟他一样努力，至少不比他差，甚至可能比他强”的优越感。</p><p>   我现在来告诉你，这不叫优越感，而是恐惧。</p><p>   他不想考90分吗？不是的，他不想一样努力吗？也不一定。但他知道，如果一样努力，最后成绩并没有90分，显然他的天赋底线就被人测出来了，而他的自卑也会显露无疑，无法找到遮掩的借口。</p><p>   那么为什么有些人随便学学就确实能到六七十分呢？那是因为任何一件事，要达到及格都是短时间内可以做到的事，并不需要什么天赋，我们的设定就是这样的，而70分到80分甚至90分，就不是随便玩玩可以搞定的了，这10分20分要付出的努力，可能是数倍于前面60分的。</p><p>   因此，当你了解了这一点之后，就不会有这么愚蠢的想法，掩耳盗铃是很低级的，看似一点点，何止一点点。</p><h2 id="资源性价比"><a href="#资源性价比" class="headerlink" title="资源性价比"></a>资源性价比</h2><p>   好，以上面的角度所言，是否六七十分才是最高性价比的呢？那我们凡事做个六七十分不就可以了？不可一概而论。</p><p>   我们曾经说过，资源是按排名分布的，你很“聪明”，很快就能达到六七十分，可“聪明人”太多了，你可以别人也可以，你难道不知道自己所处的群体才是人数最多的吗？有何优越感可言呢？而每往上升10分，人数呈指数级减少，按照很多领域都奉行的赢家通吃理论，你以为的10分差距，可能会导致你跟对方的资源获得比例为1:9，甚至差距更大。</p><p>   什么人才可以在各个领域只追求六七十分呢？</p><p>   首先，他已经在某一领域达到了90分甚至更高，有一块占据绝对优势的长板；其次，有着极其强大的资源整合能力，可以将诸多六七十分的东西整合起来创造出新的模式，也就是所谓的跨界优势。</p><p>   同时满足这两个条件的，凡事追求六七十分还是有很高性价比的。</p><h2 id="加餐：情商的意义"><a href="#加餐：情商的意义" class="headerlink" title="加餐：情商的意义"></a>加餐：情商的意义</h2><p>   情商是一个综合概念，它包含了很多很多的东西，比如准确识别自己和他人的情绪，以及正确利用信息来做出决策达到自己的目的。</p><p>   情商是一个被发明的概念，而不是一个被发现的概念，这是有区别的，被发现说明原本就有，被发明说明是自己创造出来的。自从情商被发明之后，就广受大众的推崇，甚至有人说智商不如情商等，其实这都是不正确的。</p><p>   智商也好，情商也罢，都是泛概念，什么叫泛概念，就是它们里面包含了很多内容，而这些内容既可以被装在智商的框里，也可以被装在情商的框里，只是看人们喜欢怎么装而已。</p><p>   真正影响人们最大的不应该说是智商还是情商，而是一些更为具体而清晰的概念，比如自我控制，自我情绪管理，他人情绪与动机识别，工具理性，认知理性等。</p><p>   PS：关于智商和情商的定义非常多，不要执着于泛概念，有时候你说的智商和他说的情商是一回事，但由于泛概念的框里装的东西不同导致你们有交流障碍，要记得把泛概念里面的东西倒出来，或许你们说的就是一回事了，这是私塾独家奉送的认知点。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   圈圈的这本书就到这里为止，这本书可以算是一本“工具书”，因为里面有着许多的职场方法论，全书唯一的门槛在于术语太多，因此我在此将其进行了翻译和聚合。</p><p>   在我看来，圈圈提出的这些职场方法论都很实用，这得益于她从事了多年的职业规划以及咨询工作。</p><p>   接下来我们来回顾一下书里的核心内容：</p><p>   1、隐性能力是职场竞争力的关键；</p><p>   2、能力不同于知识，能力是通用的，举一反三，以一化百，任何新学到的知识，都得内化成能力，才能说真正有用；</p><p>   3、天赋本身不是能力，只是一个加速器；</p><p>   4、懂得努力也是一种天赋，叫意愿天赋；</p><p>   5、靠消耗意志力做事并不长久，将重要的事用合适的角度转换成有意愿做的事；</p><p>   6、工具本身不是目的，是为目的服务的；</p><p>   7、找出问题的核心所在，往往比单纯完成任务更为重要；</p><p>   8、不是所有的问题都值得被解决；</p><p>   9、要学会独立思考，先要学会区分观点和事实；</p><p>   10、沟通最重要的不是话术，是弄清楚对方的目的；</p><p>   11、那些对你的工作、生活起到跃进作用的，往往是弱联系的人；</p><p>   12、平台是很好的跳板，但只是跳板；</p><p>   13、越往上走，差一点点差得尤其多；</p><p>   14、资源分配不管及格线，而是按排名来的；</p><p>   15、情商和智商一样，都是泛概念，当我们在交流概念的时候，最重要的是将泛概念里的东西倒出来，看看装的东西是不是一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;《请停止无效努力》&lt;/blockquote&gt;
    
    </summary>
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/categories/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/tags/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins入门</title>
    <link href="yanchongsheng.github.io/2018/05/09/Jenkins%E5%85%A5%E9%97%A8/"/>
    <id>yanchongsheng.github.io/2018/05/09/Jenkins入门/</id>
    <published>2018-05-09T02:14:12.000Z</published>
    <updated>2018-05-09T10:40:48.806Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.liaoxuefeng.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000" target="_blank" rel="noopener">使用Jenkins进行持续集成</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng
.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用Jenkin
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>把时间当做朋友</title>
    <link href="yanchongsheng.github.io/2018/05/06/%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E5%81%9A%E6%9C%8B%E5%8F%8B/"/>
    <id>yanchongsheng.github.io/2018/05/06/把时间当做朋友/</id>
    <published>2018-05-06T09:10:01.000Z</published>
    <updated>2018-05-08T10:31:25.363Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">《把时间当作朋友》</blockquote><a id="more"></a><h2 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h2><h2 id="把时间当作朋友"><a href="#把时间当作朋友" class="headerlink" title="把时间当作朋友"></a>把时间当作朋友</h2><p>   作者：李笑来</p><p>   策划编辑：刘皎</p><p>   责任编辑：徐津平</p><p>   出版社：电子工业出版社</p><p>   本版版次：2013年10月</p><p>   ISBN：978-7-121-21027-3</p><h2 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h2><p>   之前我在《超越智商》的开篇介绍里说，我家里有两本书分别收藏了2版，一本是《超越智商》，另一本就是李笑来老师的《把时间当作朋友》。</p><p>   不过这并不意味着这2版的文字有翻天覆地的变化，而是一种对李笑来老师的支持，同时也是对好书的一种支持，几十块钱丢了也不心疼，但拿来表达自己还是物有所值。</p><p>   这本书与其说是一本时间管理之书，不如说是一本思考人生之书，个人建议跟我们的《认知突围：做复杂时代的明白人》合起来看，几乎肯定能改变一个人的生活状态以及看事情的角度。</p><p>   由于本书属于碎片且有用类型的，因此你在看的时候需要用分主题的方式去细品，然后再整体归入自己大脑的操作系统中。</p><p>   接下来，就让我们来看看这本畅销书，到底对你的人生能有些什么帮助，如有原书需求，请自行购买。</p><h2 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h2><p>   今天是第一天，我们先来整理几个概念，其实一个人的脑子是不是清楚，最好的指标就是检验一下他脑子里的那些概念是不是足够清晰。</p><h2 id="勤奋和懒惰"><a href="#勤奋和懒惰" class="headerlink" title="勤奋和懒惰"></a>勤奋和懒惰</h2><p>   这个世界其实是很难区分勤奋者和懒惰者的，并不是事实上难以区分，而是在表面上。</p><p>   比如我们在生活中常常可以看到那些成绩不怎么好的“好学生”，他们看上去埋头学习或工作，但就是没有多大的成效。</p><p>   很多人会认为，人的智力就是有差异的，对，是有差异，尤其是在特定领域，但在通识方面的差异没有想象中那么大，所以那些学不好的人大多数并不是真的因为笨，而是因为不努力。</p><p>   怎么会呢？你看他们天天花多少时间在学习或工作上啊。时间花得多，并不意味着花在了对的地方。</p><p>   背单词是需要努力的，但决定背单词是容易的，因为人人都在这么做。然而要找到比背单词更好更适合自己的学习方式则是困难的，因为哪怕你今天决定背100个单词，那也只是封闭性问题，而找到更好的方法则是个开放性问题。</p><p>   很多人不爱去寻找开放性问题的答案，因为没人知道是不是会做无用功，但事实上，做得好的那些，都是搞定开放性问题的高手。</p><p>   所以，懒惰和勤奋，从表面你怎么看得出来呢？</p><h2 id="大脑控制大脑"><a href="#大脑控制大脑" class="headerlink" title="大脑控制大脑"></a>大脑控制大脑</h2><p>   如果一个人可以用大脑控制自己的大脑，那么这就代表他进化到了更高级的阶段。</p><p>   什么叫用大脑控制大脑？这是通俗化的说法，换成学术一点的，就类似于我们前面学过2次的压制系统1的过程。</p><p>   系统1的自动加工是无法压制的，但从系统1到产生行为，这个过程是可以被压制的。比如有人骂你，你的不爽是无法压制的，但从不爽到报复之间，是可以被理性大脑阻断的，所以有人就会不假思索地直接回骂，有人会笑着面对。</p><p>   而如何才能养成这种阻断系统1直接指导行为的习惯呢？四个字，熟能生巧，用个不恰当的比喻，训练大脑跟训练动物差不多，常常刻意这样去做，习惯被唤醒的概率就会增大。</p><h2 id="有用"><a href="#有用" class="headerlink" title="有用"></a>有用</h2><p>   当我们说一项技能是否有用的时候，我们通常说的是现在是否有用，或现在是否看得到有用。</p><p>   但事实上，由于人所处的环境和状态瞬息万变，很多现在没用或看不到有用的东西，在未来并不一定意味着无用。</p><p>   我常跟读者说，要拥有跨界优势。所谓的跨界优势，指的就是原本在这个领域内，大家都没想到这个技能竟然可以用到这里，而你恰好是这个技能的拥有者，你用了，在这个领域用“曲线救国”的方式打败了很多所谓的“专业竞争者”，这就是跨界优势，如果大家都知道了这个技能可以用在这里，且都已经在用了，那就不算跨界优势，而是在界内了。</p><p>   以上概念说明了一件事情：</p><p>   如果你在某个领域拥有了跨界优势，那么你的某项技能在一开始大概率就不是为了用在这个领域而去学习的。</p><p>   因此，不要问学了有没有用，学了，就有用，至于怎么用，在哪里用，你现在可能想不到，但肯定能用上。</p><h2 id="接受现实"><a href="#接受现实" class="headerlink" title="接受现实"></a>接受现实</h2><p>   要知道，这个世界的资源永远是稀缺的。</p><p>   那么稀缺的资源到底应该归谁，又按什么来排名呢？每个人的天赋、努力程度、机遇、起始点等都不尽相同，所以一个很简单但大家又不愿意承认的事实，就是哪怕用最公平的分配方法，每个人的所得也肯定是各不相同的。</p><p>   但人们往往会把不平均称为不公平，比如马克思先生甚至视贫富差距为洪水猛兽，这就很奇怪了，贫富差距是由于人的禀赋等各因素的差异而表现出的客观现象，想试图消除它显然是对另一些人的不公平。</p><p>   马克思先生认为当物质资源极大丰富的时候，人们就不必为此烦恼，事实上他忽略了一件事，那就是稀缺永远存在，人人都吃得上饭，不意味着人人吃得上肉；人人吃得上肉，不意味着人人住得上房；人人住得上房，也不意味着人人住得上别墅、雇得起保姆司机、开得起飞机……</p><p>   很多东西我们若是从逻辑上证明其客观存在，那么只需要接受，就能比掩耳盗铃的人强上百倍，因为只有接受了，你才会想着如何在现有规则下达到最优，而若是本身就存有疑虑，或因为错误的观念深种从而坚决不接受，那么自然就无法变得更好。</p><h2 id="今日导言-1"><a href="#今日导言-1" class="headerlink" title="今日导言"></a>今日导言</h2><p>   有句话叫“思想的巨人，行动的矮子”，这话的意思是想得再多，不做就等于0，当然，我们在前面的书籍里不止一次提到过这个观点，那么如何行动？这就是我们今天的内容。</p><h2 id="及时行动"><a href="#及时行动" class="headerlink" title="及时行动"></a>及时行动</h2><p>   有句被用滥的话叫“种一棵树最好的时间是10年前，其次就是现在”。</p><p>   这句话告诉人们及时行动的重要性，但由于并未给出为什么重要，也没有分析为什么人们都不想听从它，从而大多数人看到以后，往往都当鸡汤处理了。</p><p>   拖延并不在于做得慢，而是迟迟不做，其心理在于害怕，害怕什么呢？一旦开始做，就得放弃舒适，且很有可能做得不好。你再想想，做什么事的时候会拖延？去旅行会不会拖延？前一天晚上可能就睡不着觉了，怎么会拖延呢？</p><p>   但，如果一件事虽然不舒适，却是不得不完成的，且不得不完成得好，那么拖延就只剩一个理由，那就是那件事做得是不是足够好，在你心目中并没有那么重要，你认为在最后阶段草草了事足矣。</p><p>   我见过很多人，很早就想做某事，到最后也没有做，是不想放弃现有的舒适；也见过很多人，很早就在准备做某事，但一直在准备，从未真正开始，因为惧怕做得不够好。事实上，几乎所有事都是越做越好的，你必须从心底里接受一开始的笨拙，以及随之而来的嘲笑和打击，知道这是必经之路以后，才能让你不畏惧开始。</p><h2 id="回避困难"><a href="#回避困难" class="headerlink" title="回避困难"></a>回避困难</h2><p>   拖延的主要原因是为了回避困难，而回避困难几乎是我们的本能。</p><p>   我曾见到这样的人，是真人，且共事了好多年。每天忙忙碌碌，有太多的事情做，但在业务的关键点上，几乎看不到一点产出，用一句话来形容最恰当不过：没有功劳也有苦劳。真的是只有苦劳。</p><p>   但，这样的苦劳真的是苦劳吗？把自己的时间用简单而繁琐的事情塞满，从而既回避了困难，做不好事情又无法怪罪到自己的头上，这就是这类人的特点。</p><p>   每一项任务，都有自己关键的难点，如果不将其攻克，自身的价值是永远无法提升上去的，在团队合作里，这样的人就是南郭先生，看起来很卖力，其实蹭了大家的光而已，一旦离开团队，就原形毕露了。</p><p>   所以习惯于回避困难看似短期内沾了光，最终害的只是自己。</p><h2 id="行动大于计划"><a href="#行动大于计划" class="headerlink" title="行动大于计划"></a>行动大于计划</h2><p>   行动，尤其是立即行动，跟计划似乎总是矛盾的，因为计划总归是需要时间。</p><p>   其实并没有人会否认计划的重要性，甚至我在一次讲座里还鼓励大家做计划，但我只会鼓励大家列出条目式的粗陋计划，接着就去行动即可，有人会告诉你“磨刀不误砍柴工”，但你同时应该知道，如果磨刀磨得太久，反而是误了砍柴工。</p><p>   那么该磨到什么时候呢？磨到最有性价比的时候，所以如果是列出当天计划的话，花2分钟足矣，这些条目可以不完整，反正可以随时增减，事实上，由于人往往会在元气满满的时候高估自己的执行力，因此，太满反而不是好事；这些条目也可以不工整，反正只有你看（每当我看到那些工整的笔记时，佩服之余却并不羡慕，精力不应该用在这儿）。</p><p>   面对现实可实现的那些个“小目标”，接下去最重要的就是“做”就可以了。为什么做永远比计划重要呢？没有计划，甚至没有条目，你也能做，是否做得足够好而已；但不做，列再多也等于0。</p><h2 id="预演"><a href="#预演" class="headerlink" title="预演"></a>预演</h2><p>   只要去做，任何一件事都有搞砸的可能，这是不可避免的，正因如此，很多人才不敢开始。</p><p>   然而，有个显而易见的事实我曾经说过，如果你不开始，事情就等于已经砸了。</p><p>   我观察过一些牛人，他们做很多事的时候的确都很牛，但在私下接触以后，我发现很多我之前认为他们做得很牛的事，其实他们在做之前未必就擅长。</p><p>   举个例子，演讲。李笑来演讲如何？罗永浩演讲如何？如果我告诉你，哪怕他们已经身经百战，上台前都会不自觉地发颤，你信么？之所以他们在台上看起来侃侃而谈，且对于一些无法预料的突发状况有着极强的化解和应变能力，是由于他们在上台前对各种可能发生的状况进行了上百遍的演练。</p><p>   预演，直到把那些东西变成肌肉记忆般深刻，虽不能防止黑天鹅事件的发生，却可以在发生之后不把事情搞砸，或者仅仅只是不把事情搞得太砸，这也算是成功，毕竟，你原本可能会直接崩溃。</p><h2 id="今日导言-2"><a href="#今日导言-2" class="headerlink" title="今日导言"></a>今日导言</h2><p>   经验大抵是我们赖以生存的资本，古时候就有“不听老人言吃亏在眼前”，因为老人更有经验，但现代社会只要一段时间不学习，就会发现世界变成了另外的样子，这个时候，我们还能不能像以前一样去对待现有经验呢？</p><h2 id="正确思考"><a href="#正确思考" class="headerlink" title="正确思考"></a>正确思考</h2><p>   有的人用双脚丈量世界，有的人用脑袋就可以。</p><p>   这不是妄言，真的有人可以仅凭逻辑就推演出世间的道理，而那些正确的道理往往需要凡夫俗子历经沧桑方能得到，或许还可能不太准确。</p><p>   因此，那些诸如“你没养过孩子你怎么知道怎么养”、“你还没结婚怎么可能懂婚姻”之类的争论可以休矣，因为只要你的底层逻辑是正确的，例如“孩子是独立个体”、“婚姻是以效益最大化为目的的合作”等，那么你就是可以推导出正确而稳定的存在方式应该是怎样。</p><p>   而如何确定自己的底层逻辑和推导方式是否正确？咱们在《认知突围：做复杂时代的明白人》中有详解，传送入口：</p><h2 id="经验局限（1）"><a href="#经验局限（1）" class="headerlink" title="经验局限（1）"></a>经验局限（1）</h2><p>   据说有这样一个故事：</p><p>   说把5只猴子关在一个笼子里，笼子里有一串香蕉，实验人员准备了冰水，谁碰香蕉，所有猴子都会被冰水泼到。然后几只猴子就轮番上阵，重复了大家都被浇的过程，接着，就没猴子去碰了。</p><p>   紧接着，实验人员把其中一只猴子换了出去，换进来一只新的，新的猴子并不清楚这个机制，于是去碰香蕉，还没等它碰到，就被其余4只猴子打了一顿，连续几次之后，它就不去碰了。</p><p>   然后，实验者把剩下4只猴子的其中一只又换了出去，结果又重复了以上的过程，那只刚刚被暴打过的猴子打起人来最狠，显然它并不清楚为什么不能碰香蕉，只知道碰香蕉的猴子要挨打，而由于它自己莫名其妙被打了，因此打别人的时候特别卖力。</p><p>   最后，5只经历过冰水的猴子都被换了出去，而冰水机制也早已被换掉，但这个一接触香蕉就得挨打的传统就一直留了下来，当然，所有的猴子都不知道为什么，它们殴打其他人的目的也只为了报复而已。</p><h2 id="经验局限（2）"><a href="#经验局限（2）" class="headerlink" title="经验局限（2）"></a>经验局限（2）</h2><p>   很多人喜欢讲传统，对，上面这个实验就是告诉你，某些传统是如何形成的。</p><p>   某项传统在当时的情境下或许是有道理的，也或许只是因为巧合而变得有道理，但一旦形成社会共识之后，就会变得牢不可破，哪怕它早已不适用。</p><p>   然而，就是有一大堆人，哪怕并没有什么利益也会自愿去守护，并借机惩罚其他人。比如前段时间那个月子期间被家人捂死的女子，她的家人真的想要她的命吗？当然不是，他们只是认为，月子期间要捂，否则会落下月子病，这是颠扑不破的上古真理，是古人的经验和智慧的结晶，我们之所以现在看不到，等老了病就出来了啊。</p><p>   这些人就与猴子无异，至少在我看来是这样，因为只有跟猴子一样，才会万事不求缘由，只因为其他人在做，所以我就得跟着做，并且去守护一个自己完全不懂的东西。</p><p>   如果你留心观察，或许会发现，身边进化未完全的人是为数不少的，所以如果你不是，那就得当心了，布鲁诺就是这样被烧死的，他们没有智慧，不代表没有攻击能力，且数量是你的数倍，万不可强行布道。</p><h2 id="经验局限（3）"><a href="#经验局限（3）" class="headerlink" title="经验局限（3）"></a>经验局限（3）</h2><p>   我们不得不承认这样一个事实，那些成功者大都是特立独行的，注意，并非特立独行的人就能成功，这是有区别的。</p><p>   而这事儿也是有逻辑靠谱性的，因为要从猴子进化成人，单凭经验显然是不行的，不仅依靠自己过去的经验不行，依靠别人的经验也是不行的，因为你的身边大部分都是猴子，包括你的父母，你的亲戚长辈，你的绝大多数朋友甚至是你的老师。</p><p>   他们会对你想成为人的各种努力都予以反对甚至是打击，因为他们是真诚地希望你好，所以要用经验来碾压你，并在你失败的时候对你进行冷嘲热讽——这不是良心坏，而是对你的惩罚，让你下次乖乖听话。</p><p>   因此，一只猴子要在一堆猴子的阻挠下变成人，得需要摆脱经验主义的束缚，并掸掉所有试图把你往下拽的手，这就需要强大的科学思维和认知，只有你真正从理论上证明的东西，才会笃信不疑，才能屏蔽掉噪音。</p><h2 id="自学"><a href="#自学" class="headerlink" title="自学"></a>自学</h2><p>   成功之路大抵是需要自己探索的，因为其他人的经验并不能替代你的，所以很多人觉得学了这么多没用，是因为你并没有把学到的东西通过实践去微调成自己的东西。</p><p>   出了学校的大门以后，不会再有人追着你屁股后头要作业，也不会有唯一目的地的考试，每个人前面都出现了无数条路，于是，那些习惯了闷头走别人安排的路的人就突然不会走路了，给定命题下的“成绩好”切换到了无命题环境，就不一定行了。</p><p>   自学是无命题环境的关键，当外在压力不足的时候，产生出自我驱动力去学习是至关重要的，很多人在讲知识焦虑的不好，事实上，那些根本没有焦虑的，是连意识都没有的。</p><p>   那些感慨离开学校就放弃学习了的，根本不明白，实践中的自学才是关键，因为除了极少数的天才以外，大部分人都是在实践之后才能知道自己要学的究竟是什么，以及某个领域真正能用得上的关键点在哪里。</p><p>   那为什么有那么多人还是放弃自学，放弃自我成长呢？因为大部分的自学在短时期内往往都看不到成效，大多数的领域，都需要一段没有产出的黑暗时间才能突飞猛进。因此，是否愿意自学筛选掉了一批人，而能否熬过那段时间，又筛掉了一批人，最后获得回报的，自然就是极少数人。</p><h2 id="今日导言-3"><a href="#今日导言-3" class="headerlink" title="今日导言"></a>今日导言</h2><p>   我们一直都在说深度思考，那么怎样才算深度？我们也常说独立思考，那么独立思考的概念又是怎样的？究竟什么是我们该遵循的，什么又是我们不该信的？</p><h2 id="独立思考"><a href="#独立思考" class="headerlink" title="独立思考"></a>独立思考</h2><p>   我们常常听到独立思考，也知道要独立思考，那么独立思考到底是一个怎样的过程呢？</p><p>   用李笑来老师在书里的解释就是：当从别人那里知道一个结论的时候，自己动脑重新推演一遍，看看得出结论的过程有没有漏洞和不合理的地方，衡量一下结论到底有没有道理。</p><p>   这个过程其实并不难，难就难在很多人并不愿意这么做，因为它跟学习一样，常常耗了时间却没有即时产出，还没有即时反馈，因此，大部分人还是觉得迷信权威来得更省事儿。</p><p>   我不信李笑来，不信古典，不信采铜，不信塔勒布，不信薛兆丰……所以细心的你们会发现，私塾的版本跟他们初始的版本是有点出入的，你们同样不应该信他们，也不应该信我，你们的版本也应该是自己的版本，但不可否认，一个更好的导师是有更多营养供你吸取的。</p><p>   独立思考是耗费时间的，但同时它也是省时间的，因为若是一个问题能在思想中解决，那么往往比在现实中走弯路更省时间。</p><h2 id="深层次的原因"><a href="#深层次的原因" class="headerlink" title="深层次的原因"></a>深层次的原因</h2><p>   很多事情之所以要思考再思考，是因为表象的原因往往不是真正的原因，几乎任何事情都有着更深层次的原因，它的深度取决于你使用的工具有多基础。</p><p>   任何事情的因果都没有表面看上去那么简单，比如说当女孩子说“我不想跟你说话了”，她的深层次原因并不是觉得跟你说话没意思，而可能是让你道歉，而让你道歉的深层次原因可能是希望得到一种“永远都能占你上风”的安全感，由于这种安全感一旦给予就得长期给予，因此，如果你认为自己能够忍受长期放弃自尊来迎合她的安全感，那么你就该在听到“我不想跟你说话了”以后，装作什么都不知道地哄她；如果你认为自己不能够长期忍受，那么一开始就不要给予，因为让她觉得“你变了”，不如一开始就让她习惯。</p><p>   很多事情都值得深入挖掘，多问自己，是这个原因吗？还有更深层的因素吗？还能再拆解吗？还有更符合人性本源的动机吗？……想事情看问题就能更加透彻。</p><h2 id="正确类比"><a href="#正确类比" class="headerlink" title="正确类比"></a>正确类比</h2><p>   正确思考除了逻辑以外，类比是一个很重要的方式，因为面对一个我们不熟悉的东西，我们的本能就会指引我们跟那些我们熟悉的事情去类比，从而加快理解。</p><p>   然而类比在实际操作的时候也有很多的坑，若是不加辨别就可能接收到错误的信息，某些鸡汤就喜欢用离奇的类比，书里有个这样的例子：</p><p>   一个牧师在准备第二天布道的讲稿，儿子很吵，他随手抄起一本杂志，把里面其中一页的世界地图撕成碎片，对儿子说，如果你能拼好这张地图，我给你2角5分钱。他以为儿子能安静一上午，没想到10分钟就好了，他很奇怪，儿子说，爸爸，你看地图的背面是一个人，我把它翻过来，把人的照片拼好了，我想只要人是正确的，那么世界也是正确的。</p><p>   这种鸡汤的味道是不是很熟悉？是的，我们从小就是看这样的鸡汤长大的，很多人觉得“人是正确的，世界也是正确的”听起来有道理，就不自觉地接受了这个类比，事实上，这是个失败的故事，如果你这么跟孩子讲，这比只讲道理不讲为什么更差，因为孩子会认为这么类比是正确的。</p><p>   试想一下，如果地图的背面是一只狗呢？那么狗是正确的，世界也是正确的，如果是一只黄鼠狼呢？蜘蛛呢？你还会觉得有道理吗？</p><p>   所以，类比首先是不能直接推出结论的，因为没有两件完全类似的事物；其次，在某一个侧面遵循相同逻辑的东西，才可以用来辅助证明，以帮助人们更好地理解。</p><p>   这才是类比正确的打开方式。</p><h2 id="道理和感悟"><a href="#道理和感悟" class="headerlink" title="道理和感悟"></a>道理和感悟</h2><p>   正确的类比需要在类比的侧面上遵循相同的逻辑，而道理这个东西也是这样，我在书的宣传上说，《认知突围》这本书告诉你某件事情为什么是这样，为什么应该这样，为什么只能这样，因为我个人的感悟就只是我个人的结论，而这个论证过程不能以我的个例为模板。</p><p>   比如成功人士认为自己不屈不挠的意志是成功的原因，但事实上，或许运气才是最大的因素，成功者在讲个人感悟的时候你就要注意听，是不是A必然可以推出B，如果不是，是不是A可以增加B发生的概率，如果都不能，那就证明要么他不想说真正的原因，要么他只是在试错的过程中碰巧成功了而已，并不是什么普适性的方法和规律。</p><p>   所以我们从第一本书开始一直在讲逻辑，逻辑之所以有用，是因为它基本不会变，它有普适性，该是怎样就是怎样，也就是道理的本来面目，而感悟则是在特定状况下发生的，环境一变，策略就得变，这也是我们常常会搞混的。</p><h2 id="重复才是重点"><a href="#重复才是重点" class="headerlink" title="重复才是重点"></a>重复才是重点</h2><p>   很多人一直在寻找道理，这当然是好的，但如果你想根据道理本身获益，最好的方法就是去做。然而有那么多人，他们的想法通常是，若是做得不够正确，那效率就不够高，如果效率不够高，那就事倍功半，于是，我得继续研究，研究好了再行动。</p><p>   有一个显而易见的事实容易被人忽略，那就是事倍功半也比没有功要好。</p><p>   比如欧阳锋逆练九阴真经，鸠摩智逆练六脉神剑，都成功了，虽然这只是小说的说法，但在现实生活中，如果把提高小技巧跟用功相比，显然也是不够看的。学习英语或者健身也一样，动作就那么几个，一个不懂太多技巧不断重复的人，成就一定比知道很多技巧但三天打鱼两天晒网的人要强得多。</p><p>   注意，很多人又要误解了，以为我说的是追求效率或者追求技巧不重要，那就建议你这一页多看几遍。</p><h2 id="今日导言-4"><a href="#今日导言-4" class="headerlink" title="今日导言"></a>今日导言</h2><p>   我们都知道交流很重要，不过有效交流更重要，而如何做到有效交流？大部分人可能都不知道关键所在。</p><h2 id="学会倾听"><a href="#学会倾听" class="headerlink" title="学会倾听"></a>学会倾听</h2><p>   倾听是一件并不容易的事，要听清别人的意思，尊重别人的表达没那么简单，光是“不打断”这一项，很多人就做不到。</p><p>   质疑精神是我们所提倡的，但质疑和反驳一定要建立在充分理解对方意思的前提下，而不是自以为是的理解，是获得对方肯定以后的理解。</p><p>   无论是什么样的表达，在初期就反驳总是容易的，因为对方可能还没有将自己的核心论证过程抛出来，然而这样既显得不礼貌，很粗俗，又显得非常的肤浅，当对方将论证过程讲完之后你才恍然大悟，这只能证明你在初期时根本想不到自己不懂的地方在哪里。</p><p>   我曾经在【请辩】的文章中写道：看文字也是一种倾听，很多读者在看完一篇文章后会有自己的疑惑，这很正常，但请相信，请辩的绝大部分文章的思考一定是大大于普通人随意看个10分钟得出来的思考的，因此，当你有质疑，你有疑问的时候，你需要很谨慎地提出来，因为我并没有解答你的义务，而对于那些上来就说“你写的根本不对，XXX是什么玩意儿”的，我一般都拉黑处置，很简单，你不仅连自己错在哪里都不知道，又懒得深入思考，还出言不逊。</p><p>   倾听也有自己的专用句式，比如：</p><p>   我这样理解对不对……；</p><p>   你说的是不是这个意思……；</p><p>   千万不要使用：</p><p>   那你的意思就是XXX喽？……</p><p>   这有很大的差别。记住，你永远都可能曲解别人表达中的真正含义。</p><h2 id="说话的资格"><a href="#说话的资格" class="headerlink" title="说话的资格"></a>说话的资格</h2><p>   同样一句话说出来，巴菲特说，大家点头称是；你说，大家各忙各的。</p><p>   这不是说“话的本身对不对”，而是你是不是有说话资格的人。张艺谋说，这个角色要这么演才传神，你觉得很有道理，你朋友说的东西一模一样，但你会嗤之以鼻：你这么厉害，你怎么没做导演，你怎么没做演员？</p><p>   所以，话对不对不重要，重要的是大家都认为跟着那些有资格说话的人做，就能成为跟他们一样的人，这才是重点。</p><p>   虽然人们的这种做法很值得商榷，但对你个人来说，当别人忽略你的观点时，你也大可不必为此懊恼，这不代表你的表达不对，而是提醒你，应该尽快成为能够配得上你的观点的人。</p><p>   据我们的很多学员反映，为什么我分享蚂蚁私塾给我的朋友，朋友都不感冒？我也有一些例子，另一些学员仅仅是分享到群里，一个人就能邀请到8个10个朋友，而且大家都因此受益了（并不是指我们系统发的红包）。</p><p>   后来我进行了一下初步统计，后者的平均收入是前者的约6.5倍。</p><p>   所以，不是你分享的东西不好，也不是你的朋友不爱学习，是你该努力去赢得在朋友面前说话的资格。</p><h2 id="有效交流"><a href="#有效交流" class="headerlink" title="有效交流"></a>有效交流</h2><p>   交流之中对于共同的观点和见解，大家都会生出惺惺相惜之感，但若是见解不同，则容易变得不愉快。如何让一次观点不同的交流变得有效呢？需要两个前提，这两个前提应该是双方互相认可的，这样真正有效的交流方可持续下去。</p><p>   1、竞争为辅，合作为主</p><p>   每个人都希望最后自己的观点是站得住脚的，但交流的目的并不是为了“赢”对方，而是借由对方的东西更加确定或者修正自己的观点，换言之，借对方一用，是为了提升自己，而不是打败对方。</p><p>   2、真理就是真理，谁说的不重要</p><p>   如果在交流过程中，一方认为自己掌握着真理，那就没有必要再交流下去了，比如你跟我聊认知方面的事，或许我有自信可以比一般人懂得多一些，因为我在这方面的有效积累时间足够长，但若是因为我看起来懂得更多，而认为自己在任何方面说的都是真理，那就没有交流的必要了。</p><p>   真理从来不变，任何人也不拥有它，仅仅是谁对它的解释和运用更为贴切而已，因此，那些说“马克思也说过”就想来结束讨论的人，是犯了这个忌讳的，因为马克思就不会错了么？真理为什么是这样，需要拿出科学的证据和分析过程来。</p><p>   有效交流，最后一定是达成一致，若最终大家都坚持自己的看法，那就说明，要么两个人的思维框架本身就不可沟通，要么有人违反了上面的其中一条规则，要么就不是诚心诚意想把事情搞明白的，这些都不能算有效交流。</p><h2 id="让人脉到来"><a href="#让人脉到来" class="headerlink" title="让人脉到来"></a>让人脉到来</h2><p>   人脉是个很抽象的东西，很重要，又很虚无。某个人的人脉很广，什么叫很广，什么程度叫广？没有定论。</p><p>   基于种种原因，生活中广受欢迎的人总是少数，而大多数人并不承认，绝大部分的友谊其实都只是基于一种交换关系，如果你拥有的资源不够多、不够好，就可能变成单纯的索取方，而单纯的索取方往往是得不到长久的友谊的，这与我在《认知突围：做复杂时代的明白人》一书中的某一个侧面观点很一致。</p><p>   因此，一个人脉很广的人，首要满足的条件是他自己有足够多的有价值的可交换资源。这里有两个点，一个是足够多的可交换资源，另一个是有价值的可交换资源，底层跟底层，换来换去还是底层。</p><p>   从这个层面来讲，往往就只有优秀的人，才会拥有足够多的有效人脉，大部分人所谓的人脉其实到了关键时刻都用不上或者不够优质，因此就算你不怎么考虑人脉的事情，当你在某个领域默默积累成为了专家的时候，那些以前跟你八竿子打不到一块儿的人，或许会惊喜地出现在你的“人脉”圈子以内。</p><p>   毕竟，就像我在【请辩】里写过的，要跟马云接触，你不需要是同等财富的王健林，但你得是李连杰，再次一点成为王林也行。</p><h2 id="复利的作用"><a href="#复利的作用" class="headerlink" title="复利的作用"></a>复利的作用</h2><p>   人脉和复利恐怕是李笑来老师的这本书里被传播得最广的两个概念，事实上，这两个概念是李老师提出来的吗？显然不是，但他对这两个概念的认知进行了梳理，这就是价值所在。</p><p>   复利现象其实是从马太效应里嫁接过来的，一个人有好习惯，会产生复利，因为他的初始优势会让他的“运气”越来越好，从而进步得越来越快。</p><p>   而坏习惯也一样，比如不爱思考，不爱看书，不爱成长，怕麻烦等，粗看看他们说的有道理啊，你如此在学习和践行，你成长了什么？也不见你比我们多赚几个钱啊。但你要知道，好习惯和坏习惯一样，都是慢性的，如果大家照着趋势走，10年后再看，你会发现根本就不在一个层次了，或许到了那时，你根本就不会想到这个事情，因为他们早在你的生命中消失很久了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   本书到此结束，看这本书的时候，我年纪还小，可以说在检验自己的底层认知的路上，它给了我很大的启示，虽然随着思考力的增长，我发现了书中一些并不十分严谨的地方，但不能否认它是一本好书的事实，尤其是对很多事情的概念上，可以说是高度精炼又清晰的。</p><p>   接下来我们对本书的重点进行一下简单总结：</p><p>   1、懒惰和勤奋，不能从表面行为上去区分；</p><p>   2、人们可以用大脑控制自己的大脑；</p><p>   3、不要问学了有没有用，学了就有用，只是用处大小之分，是否想得起可以应用而已；</p><p>   4、强行要求所有人都平均，是对天赋更强的人的一种不公平；</p><p>   5、几乎所有事都是越做越好的，接受一开始的笨拙，以及会被打击的现实，才能不畏惧开始；</p><p>   6、计划不是越详细越好，而是越有性价比越好；</p><p>   7、很多传统如今早已不适用，万事万理只有从理论上得以证明的，才能说本应如此；</p><p>   8、独立思考是耗费时间的，但也是省时间的，因为若是一个问题能在思想中解决，那么往往比在现实中走弯路更省时间。</p><p>   9、几乎任何事情都有着更深层次的原因，它的深度取决于你使用的工具有多基础；</p><p>   10、类比只能辅助理解，而不能直接推出结论；</p><p>   11、道理是“本来就是这样的”，是逻辑化的，是不太会变的，而感悟则很受当下环境的影响；</p><p>   12、当别人忽略你的观点时，你大可不必为此懊恼，这不代表你的表达不对，而是提醒你，你该尽快成为能够配得上你观点的人。</p><p>   13、有效的交流是为了让自己更好，而不是赢过对方；</p><p>   14、要成为一个人脉很广的人，首要的条件是自己有足够多的有价值的可交换资源。</p><p>   15、重视复利的作用，打开眼界，分清当下和未来的区别。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;《把时间当作朋友》&lt;/blockquote&gt;
    
    </summary>
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/categories/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/tags/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>JDK10 局部变量类型推断</title>
    <link href="yanchongsheng.github.io/2018/04/29/JDK10%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/"/>
    <id>yanchongsheng.github.io/2018/04/29/JDK10局部变量类型推断/</id>
    <published>2018-04-29T10:17:21.000Z</published>
    <updated>2018-05-03T10:06:18.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"> 局部变量类型推断 </blockquote><a id="more"></a><h2 id="var-保留字"><a href="#var-保留字" class="headerlink" title="var 保留字"></a>var 保留字</h2><p>JDK 10 采用了一个叫做 var 的<b>保留类型</b>来实现局部变量推断。需要注意的是：为了兼容旧版本，var 不是关键字，而是一个保留类型，也就意味着你仍然可以像这样用 var 为你的变量和函数命名：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><p>比较遗憾的是，JDK 10 只引入了 var，而没有引入 Scala 和 Kotlin 中用于声明不可变变量的 val 关键字，而需要使用 final var 这种遗憾的语法来达到这个目的。</p><h2 id="var-的使用"><a href="#var-的使用" class="headerlink" title="var 的使用"></a>var 的使用</h2><p>var 可以在任何需要声明局部变量的地方使用，包括普通局部变量声明、for 和 twr（Try With Resource）语句的声明部分的变量声明，以及增强型 for 循环中循环变量声明。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        var i = <span class="number">10</span>;</span><br><span class="line">        var str = <span class="string">"hello"</span>;</span><br><span class="line">        var p = <span class="keyword">new</span> Person();</span><br><span class="line">        var path = Paths.get(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (var inputStream = Files.newInputStream(path)) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var list1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        var list2 = List.of(<span class="string">"111"</span>, <span class="string">"222"</span>);</span><br><span class="line"></span><br><span class="line">        var map = Map.of(<span class="number">1</span>, <span class="string">"a"</span>, <span class="number">2</span>, <span class="string">"b"</span>);  <span class="comment">// type of 'map' is Map&lt;Integer, String&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (var entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (var x = <span class="number">0</span>; x &lt; list1.size(); x++) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="var-使用注意事项"><a href="#var-使用注意事项" class="headerlink" title="var 使用注意事项"></a>var 使用注意事项</h2><p>1、使用 var 声明的变量的类型 和 用于初始化它的表达式相同，即变量类型就是表达式的值类型<br>2、var 的作用仅仅是推断变量类型，变量仍然是静态类型的，与 JavaScript 中的 var（动态类型）作用完全不同。下面这段代码无法通过编译：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var i = <span class="number">10</span>;</span><br><span class="line">i = <span class="string">"20"</span>; <span class="comment">// error: incompatible types</span></span><br></pre></td></tr></table></figure></p><p>3、使用 var 声明变量时必须要在声明的同时初始化，所以下面这段代码是无法编译的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a; <span class="comment">// error: 'var' on variable without initializer</span></span><br><span class="line">a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><p>4、var 也不能用于局部变量声明以外的地方（唯一的例外是 JDK 11 会允许在 lambda 表达式的形式参数中使用 var 语法），所以对类库的接口不会造成影响。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  var i = <span class="number">10</span>;  <span class="comment">// error: 'var' is not allowed here</span></span><br><span class="line"></span><br><span class="line">  <span class="function">var <span class="title">f1</span><span class="params">()</span> </span>&#123;   <span class="comment">// error: 'var' is not allowed here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(var str)</span> </span>&#123;  <span class="comment">// error: 'var' is not allowed here</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (var e) &#123; <span class="comment">// error: 'var' is not allowed here</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5、var 还能用来声明一些不可指类型（Non-denotable types）的变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 有一个特殊的特性：在用匿名内部类初始化var声明的变量时，这个变量会被推断成一个局部的类型</span></span><br><span class="line">var obj = <span class="keyword">new</span> Object() &#123;  <span class="comment">// type of 'obj' is A anonymous class types</span></span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Intersection type，Java 不支持 union type</span></span><br><span class="line">var list = (List&lt;String&gt; &amp; AutoCloseable) <span class="keyword">null</span>; <span class="comment">// type of 'list' is List&lt;String&gt; &amp; AutoCloseable</span></span><br></pre></td></tr></table></figure></p><p>6、直接用 null 初始化 var 声明的变量是不合法的。这不难理解，虽然 null 具有一个独特的类型，不过这个类型的变量对于我们是没有意义的：它除了被赋值为 null 做不到其他的事情。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = <span class="keyword">null</span>; <span class="comment">// error: variable initializer is 'null'</span></span><br></pre></td></tr></table></figure></p><p>7、配合使用 var 和菱形推断的时候也要注意，它们在一起可能会推断出在你意料之外的类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var l = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// type of 'l' is ArrayList&lt;Object&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="var-的一些妙用"><a href="#var-的一些妙用" class="headerlink" title="var 的一些妙用"></a>var 的一些妙用</h2><p>1、var 可以用于声明不可指类型的变量。这个特性看起来用处不大，但实际上能够很好的为 Java 提供一些缺少的特性。我们知道 Java 8 的 lambda 表达式不能够捕获可变变量，也就是说下面这个代码是错误的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">List.of(<span class="string">"ice1000"</span>, <span class="string">"Glavo"</span>)</span><br><span class="line">    .forEach(e -&gt; count += <span class="number">1</span>); <span class="comment">//error</span></span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure></p><p>之前想要绕过这个限制，我们可以用<b>单元素</b>的数组实现。而在 JDK 10 中我们又多了一种选择：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用单元素数组的方式绕过限制</span></span><br><span class="line"><span class="keyword">int</span>[] count = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">List.of(<span class="string">"ice1000"</span>, <span class="string">"Glavo"</span>)</span><br><span class="line">        .forEach(e -&gt; count[<span class="number">0</span>] += <span class="number">1</span>);</span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 var 保留字的方式绕过限制</span></span><br><span class="line">var context = <span class="keyword">new</span> Object() &#123;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">List.of(<span class="string">"ice1000"</span>, <span class="string">"Glavo"</span>)</span><br><span class="line">    .forEach(e -&gt; context.count += <span class="number">1</span>);</span><br><span class="line">System.out.println(context.count);</span><br></pre></td></tr></table></figure></p><p>当有多个需要捕获的变量时，这种方式就要比使用数组简单的多，而这种方式其实就是 Scala 编译器实现捕获可变参数的方式。不过要注意的是，这样修改变量是线程不安全的。<br>2、除了帮助我们捕获可变参数，var 还能够帮助我们实现嵌套函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  var context = <span class="keyword">new</span> Object() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> accumulator)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (i &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> accumulator;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> fact(i - <span class="number">1</span>, i * accumulator);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> context.fact(i, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、在使用长的 Stream 操作链的时候，我们也可以把一些操作放在 context 中，从而简化操作链，增强可读性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] parseAndLogInts(List&lt;String&gt; list, <span class="keyword">int</span> radix) &#123;</span><br><span class="line">  var context = <span class="keyword">new</span> Object() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">parseAndLogInt</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">      System.out.println(str);</span><br><span class="line">      <span class="keyword">return</span> Integer.parseInt(str, radix);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> list.stream().mapToInt(context::parseAndLogInt).toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、使用 var 我们能够在变量绑定的匿名类型里重写超类型中的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        var v = <span class="keyword">new</span> Student() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"son"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"super"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5、在 Java 9 里我们可能会想着用这样的方法来实现类似 Golang 中的 defer 语句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AutoCloseable context = () -&gt; &#123; <span class="comment">/* ... *. &#125;;</span></span><br><span class="line"><span class="comment">try (context) &#123;</span></span><br><span class="line"><span class="comment">    // ...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure></p><p>不过很遗憾，这样写是无法通过编译的。因为 AutoCloseable 接口的 close 方法声明为可能抛出任何异常，所以你必须要用 catch 捕获全部异常，这可不是我们想要的。不过在 Java 10  里，我们能用匿名类型来重写掉 AutoCloseable 中的异常声明，从而避免被要求强制捕获异常。我们把 parseAndLogInts 方法来改写一下，让它在返回后打印出字符串 “exit”：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] parseAndLogInts(List&lt;String&gt; list, <span class="keyword">int</span> radix) &#123;</span><br><span class="line">  var context = <span class="keyword">new</span> AutoCloseable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">parseAndLogInt</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">      System.out.println(str);</span><br><span class="line">      <span class="keyword">return</span> Integer.parseInt(str, radix);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"exit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">try</span>(context) &#123;</span><br><span class="line">    <span class="keyword">return</span> list.stream().mapToInt(context::parseAndLogInt).toArray();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>日常开发中，我们能够注意到，很多变量的类型都是能够直接看出的。new 表达式、字面量、工厂方法、初始化表达式最终调用的方法名以及变量名本身都是包含着类型信息的，更多的类型信息不仅仅无助于阅读，更增加了语法噪声，给阅读带来了障碍。这是我认为 var 保留字合理使用的最大好处，增强代码的可读性。</p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://zhuanlan.zhihu.com/p/34911982" target="_blank" rel="noopener">Java 10 新特性之局部变量类型推断</a><br><a href="https://blog.csdn.net/rickiyeat/article/details/79101931" target="_blank" rel="noopener">Java 10 - 与“var类型推断机制”的第一次亲密接触</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt; 局部变量类型推断 &lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="yanchongsheng.github.io/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 基础" scheme="yanchongsheng.github.io/tags/Java-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>经济学通识</title>
    <link href="yanchongsheng.github.io/2018/04/29/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E9%80%9A%E8%AF%86/"/>
    <id>yanchongsheng.github.io/2018/04/29/经济学通识/</id>
    <published>2018-04-29T04:47:53.000Z</published>
    <updated>2018-04-28T04:56:59.336Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">《经济学通识》</blockquote><a id="more"></a><h2 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h2><h2 id="经济学通识"><a href="#经济学通识" class="headerlink" title="经济学通识"></a>经济学通识</h2><p>   作者：薛兆丰</p><p>   责任编辑：白丽丽</p><p>   出版社：北京大学出版社</p><p>   本版版次：2015年8月第2版</p><p>   ISBN：978-7-301-25869-9</p><h2 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h2><p>   私塾前面讲了两本经济学著作：《一课经济学》和《卧底经济学1》，至于为什么不讲《卧底经济学》的2、3、4，是因为不值得一讲，包括《魔鬼经济学》系列也一样，今天我们来看一本比较正统但不呆板的经济学著作《经济学通识》。</p><p>   《经济学通识》是由薛兆丰老师所著，薛兆丰老师是北京大学国家发展研究院教授，我非常喜爱他的经济学观点，也购买了他的专栏。他的经济学思想博采众长，很多观点跟我在经济学以外推导过来的不谋而合（虽然我也是主修的经济），这也说明，不管任何学科，正确的深度思考以后的成果总是殊途同归的。</p><p>   本周就带大家见识下这本不错的经济学书籍，有了前面两本入门书的铺垫，这本原本就不枯燥的经济学著作会让大家更容易入手，如有原书需求，请自行购买。</p><h2 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h2><p>   薛老师的这本书无时无刻不在讲着市场机制的重要性，那么什么才是筛选市场机制最重要的手段、最适合的手段？一言以蔽之：钱。</p><h2 id="免费"><a href="#免费" class="headerlink" title="免费"></a>免费</h2><p>   我们常听人说，免费的就是最贵的，深以为然。但很多时候，我们的观点却常常受到情感的牵制，做出不理智的判断。比如有一次北京地铁涨价，就导致很多人怨声载道，他们的观点通常是，穷人怎么办？</p><p>   事实上，价格是筛选需求紧迫性最有效的方式，北京地铁不是挤嘛，那就涨价，把那些需求度没有那么高的人挤出去就行了，他们自然会选择其他的出行方式，尤其是在高峰期。</p><p>   这同样也适用于交通拥堵，对拥堵时段通行的车辆收取足够高的拥堵费用，谁有更高需求，这个时段就归谁，否则就免不了跟节假日的免费高速公路一样，大家都堵在上面，造成极大的浪费。</p><h2 id="竞争规则（1）"><a href="#竞争规则（1）" class="headerlink" title="竞争规则（1）"></a>竞争规则（1）</h2><p>   什么是公共物品，什么是私人物品？这个概念的区分怕是99%的人都不知道。</p><p>   所谓的公共物品，是指你使用了也不妨碍我同时使用，比如知识；所谓的私人物品，是指你用了我就不能同时用，比如一个杯子，我用它来喝水，你就不能同时用它来喝水。</p><p>   这个概念很重要，以至于很多我们认为的公共物品其实都是私人用品，比如政府盖的剧院，是公共的吗？错，是私人的，因为它受到争用人数多寡的限制，容纳100个人就是100个人，放我进去了就阻止了另一个人进去，所以我们前面说交通时提到的道路，也是私人物品，在拥堵时段，道路上多一辆我的车，就挤出了一辆别人的车。</p><p>   而对于私人物品来说，价格是最好的解决争用的方案，既然要争，就是稀缺，如何去竞争稀缺？用给他人提供有价值的服务的方式赚钱，然后用赚来的钱去参与一个叫“价高者得”的竞争游戏。</p><h2 id="竞争规则（2）"><a href="#竞争规则（2）" class="headerlink" title="竞争规则（2）"></a>竞争规则（2）</h2><p>   很多人会说，那么如果某些刚需也用这个方式竞争，穷人怎么办？好的经济学理论会告诉你，这个世上没有所谓的刚需，如果大米不够吃，吃不起大米的人会自动转向小麦，或者只吃很少数量的大米，这个世界不保证任何人过上跟其他人一样的生活，人们自动就会寻找替代品。</p><p>   同样的，春节回家也不是刚需，你会发现，当你给每个不回家的人发放5000元或者10000元以上补贴时，有很多人会选择不回家，那么请问，刚需的“刚”在哪里？</p><p>   价格才能反映需求，至于有人说，富人买一张机票只需拔根毛，穷人买一张机票需要半年的收成，富人愿意买高价票就证明他对回家的需求大于穷人吗？</p><p>   需求不能这么比较，需求只能跟自己比，富人愿意买头等舱享受舒适还是宁愿买经济舱挤一点也行？穷人愿意买机票回家过年，还是愿意把钱留着给孩子上学？需求的效用只能这么比，不能在人与人之间比。</p><h2 id="黄牛是什么"><a href="#黄牛是什么" class="headerlink" title="黄牛是什么"></a>黄牛是什么</h2><p>   很多人痛恨黄牛，我曾经写过关于4500元专家号的文章，也写过关于春运火车票的文章，跟薛老师的观点十分一致，也同样的，受到了很多人的口诛笔伐。</p><p>   恨黄牛，是恨错了对象。很多人认为，是黄牛推高了票价和挂号价，是黄牛让自己买不到票、看不起病，其实并不然。所有竞争，都是旅客和旅客之间的竞争，病人和病人之间的竞争，黄牛买了票最后还是要卖的，卖给谁呢？给那些愿意支付高价的人，这说明什么，说明原本的票价定得太便宜，所以人们都来捡便宜了，你看4500元的专家号也有人要，那可能是性命之虞，但我们却要将其限定在300元，可能是感冒发烧也愿意出的价钱，怎么还能反映出谁对专家的需求更紧迫呢？</p><p>   有人说，那岂不是富人就肯定能买到，占尽了便宜？对啊，你以为排队富人就没辙了么？你以为网上抢票富人就没辙了么？只要他出钱，有的是方法抢。</p><p>   黄牛并没有抬高票价，它只是帮助体现出了某类产品和服务的实际价值，实际上起到了一个价格纠偏的作用，只有价格已然被扭曲了的地方，才有黄牛的生存空间。</p><h2 id="今日导言-1"><a href="#今日导言-1" class="headerlink" title="今日导言"></a>今日导言</h2><p>   学完了第一天，这市场经济课就算走到了门口，接下来我们来看看人们都最最关心的房价。房子到底值多少钱？为什么它会变得这么贵？究竟是谁把房价推上去的，是你，是我，是开发商，还是政府？</p><h2 id="限购的错误"><a href="#限购的错误" class="headerlink" title="限购的错误"></a>限购的错误</h2><p>   从10来年前开始，我们就不断听到什么最严限购令，最严调控之类的，控着控着，房价却越控越高。这么多年来，我们从计划经济一路走过来，很多坏毛病还没改掉，动不动就试图用强硬的行政手段干预，不顾经济规律，政府有这么大力量吗？高估了。</p><p>   以北京为例，北京的房价为什么涨？是炒房团炒上去的？那为什么炒房团不炒西藏的房子呢？</p><p>   北京的房子涨，是因为北京这座城市涨价了，吸引了更多的人来争夺有限的稀缺资源，根据价高者得的原理，能够留下的人自然应该是负担得起更高生活成本的人。</p><p>   比如说一个旅游区有一口清泉，吸引来了很多游客使旅游区增值了，如果要让泉水降价，第一种方式是多挖几口泉，那么泉水的单价降了，供给数量增加了，整个旅游区的总价值水涨船高；第二种方式是限购，把一部分游客赶走，那么竞争者少了，泉水的单价也降了，但同时整个旅游区的总价值也因此受损了。</p><h2 id="推高房价"><a href="#推高房价" class="headerlink" title="推高房价"></a>推高房价</h2><p>   是谁推高了房价？是政府吗，是开发商吗？都不是。</p><p>   我们前面说过一个类似的道理，引申过来就是，只有购房者自己才能推高房价。</p><p>   很多人认为，土地成本和税决定了房价，这是不懂经济学的人说出来的话。价格永远是由供需决定的，没人要，亏本也得卖，不以你的成本为转移，而成本，恰恰是由价格反向决定的，当房价很高的时候，政府自然可以把土地卖得更贵，这就像我们在《卧底经济学1》里说的，当你可以挣很多钱的时候，房东就会给你加租金，增加你的成本。</p><p>   因此，即使政府不收一分钱的税，即使政府把土地免费贡献出来，由于10个人都想要天安门旁边的房子，他们还是会根据自己的购买力，把价格抬高到其中9个人退出竞争为止，房价不会有任何变化，请好好理解这一点。</p><h2 id="房子的价值"><a href="#房子的价值" class="headerlink" title="房子的价值"></a>房子的价值</h2><p>   购房者之间互相竞争，使房价升高，不管这些购房者是投资者还是使用者。</p><p>   很多使用者会痛恨是投资者推高了房价，比如温州炒房团等，这虽然比让政府背锅靠谱得多，但作为投资者的正常投资行为来讲，这很正当。</p><p>   如果一套房子确定明年可以涨到500万，那么它现在就该值500万，这样投资者就赚不到1分钱。正因为有很多人不认为它明年会值500万，因此投资者才能以450万买到这套房子。</p><p>   他并没有抢走市场上的房子，而是用真金白银下了一个注，对了就赚钱，错了就亏钱，自己承担后果，任何人跟他看法不同，都不需要跟他辩论，用实际行动跟他对赌就行。</p><p>   房子本没有确定的价值，一个遮风避雨的地方价值几何？是不是真值500万？山顶的洞也可以遮风避雨，你要吗？只有大家都想要某些地方的某些东西，比如学区，比如就近的商场和医院，比如便利的交通等，抢着抢着就贵了，这就是价格机制，值多少钱是我们这些市场上的参与者自己说了算，而不是房子原本的功能就该值多少钱。</p><h2 id="认钱还是认人"><a href="#认钱还是认人" class="headerlink" title="认钱还是认人"></a>认钱还是认人</h2><p>   竞争是残酷的，价高者就是可以得，我们有句俗话，叫“认钱不认人”。那么，究竟认钱不认人好不好？我们是该认钱还是认人？</p><p>   认钱和认人是两种情况，两种挑选模式。如果你谈恋爱，你需要挑选一些非金钱的品质，在这种交易里你在“挑客”，采取的是认人的方式，也就是你以放弃了获得最大的金钱收入为代价，购买了“歧视对象”的权利。我们在影视剧里看到的，黑人不许进入，纳粹不得入内等，都属于这类。</p><p>   而认钱则不同，只要一个黑人赚到了20块钱，它可以自由进入麦当劳，买到的汉堡也跟白人的一样大。</p><p>   认人必然产生歧视，因为根据诺贝尔经济学奖得主加里•贝克尔的说法，为了满足个人偏好宁愿放弃一定的利益时，才是歧视，因此，如果一位男性本身就比女性能力要强，招了男性就不是歧视，只有当女性的能力强过男性，但还是招了男性才是歧视，这是“认人”的典型特性。</p><p>   如果你反对歧视，那么你就应该赞成认钱，市场是色盲的，它会自动惩罚歧视者，也自动奖励宽宏者。</p><h2 id="卖家和买家不竞争"><a href="#卖家和买家不竞争" class="headerlink" title="卖家和买家不竞争"></a>卖家和买家不竞争</h2><p>   很多时候，面对高价，人们总是会归咎于卖家，是商人利欲熏心，这是个很大的错误。</p><p>   我们说过，买家只和谁竞争？只和同样的买家竞争，并不和卖家竞争。一个iphone手机卖得再贵，只要你们是你情我愿，那么当你们成交的那一刻，就证明你们都受益了，因为贵比没有好，你才会买。所以卖家跟你竞争了吗？没有，如果没有他提供产品和服务，会变得更糟，如若不然你们便不会达成交易。</p><p>   那么谁和卖家竞争呢？当然是卖家了，当你去买车的时候，告诉4S店你看了很多家，并且别家的价格更便宜，他就只能降价给你。</p><p>   所以，不要责怪卖你东西的卖家，正是由于你要买的东西有很多人愿意出这个价，东西才会到这个价，这个价不是卖家定的，是由无数卖家和无数买家在博弈之后共同决定的。</p><h2 id="今日导言-2"><a href="#今日导言-2" class="headerlink" title="今日导言"></a>今日导言</h2><p>   很多人在面对经济现象的时候喜欢讲良心，人当然应该讲良心，但良心和真相并不矛盾，某些看似很有良心的举动在智慧面前就会变得无比的苍白，所以，还是要先了解事物发展运行的本质规律，再谈良心。</p><h2 id="投机倒把"><a href="#投机倒把" class="headerlink" title="投机倒把"></a>投机倒把</h2><p>   年长一些的读者应该知道，我国以前是有投机倒把罪的，也就是所谓的炒家，投机者。</p><p>   很多人可能到现在还认为，这些炒家把原本应该“正常”的价格变得不正常，他们似乎没有任何的道德感，发饥荒财，发国难财，发战争财，至今还被很多人误会是祸国殃民的主体，这实在是令人遗憾。</p><p>   我们都知道，一吨煤用来炼钢，就不能同时用来取暖，那么，到底用于哪里才是人们更紧要的需求呢？需要钢的人当然说钢重要，想取暖的人当然说取暖重要。我们需要无数有判断力的人参与进市场里，对人们的需求和信息做出判断，谁判断准确就有奖赏，谁判断错误就要惩罚，奖赏和惩罚都是用金钱来表示。</p><p>   投机者囤积居奇，把大米价格炒高，是他正确地预见了饥荒，注意，饥荒不是他造成的，他判断正确应该获得更多的利润，而若是最后丰收了，他的大米就得亏本卖出去，可惜人们只看到他挣钱的时候，亏的时候都看不到。</p><p>   索罗斯在亚洲金融风暴里大赚了一笔，很多人说，索罗斯是魔鬼，给很多国家送上了沉重的一击。但索罗斯只是发现了这些国家畸形的经济结构而已，他靠自己的判断挣了钱，何罪之有？没有索罗斯这样的人，错误就会累计，国家也好，政府也罢，都不能阻止他人正当的理性决策。</p><h2 id="垄断和暴利"><a href="#垄断和暴利" class="headerlink" title="垄断和暴利"></a>垄断和暴利</h2><p>   谈及垄断，大家都恨得咬牙切齿，例如上面的囤积居奇，就是在一定程度上造成了垄断，垄断当然应该有暴利，我们说了，因为对信息、对趋势判断正确。</p><p>   而那些通过创新造成的垄断呢？比如说微软，大家都在用着windows，所以它把价格卖得很高，比它的开发成本要高得多，但是我们又没有太多别的选择，于是骂它靠垄断赚黑心钱。</p><p>   这里我们要清楚，微软的垄断是哪里来的？世上本没有windows，是它自己创造出来的，而用户用脚投票以后，最终都选择了它，这就说明一个事情，就是微软的暴利是自己创造的，而这些暴利在支付了员工的工资、公司的开销等以后，还顺便惠及了用户，所以在市场环境下，暴利都是正当的，而所谓的市场垄断是根本不存在的，只有行政垄断才叫垄断，那些只有政府规定谁才能进入的领域，才是真正供应被严格限制的垄断区域。</p><p>   欧盟曾经根据反垄断法制裁过微软，最终结果是让微软提供价格不变，但功能较差的产品，因为这样微软相对其他竞品的竞争优势就没那么明显了，这真是让人哭笑不得。</p><p>   这种扛着“保护消费者”大旗的所谓保护，其实是保护了竞争对手，而消费者花同样的钱买了更差的服务，其利益是实实在在受损了的。</p><h2 id="非市场的市场之道"><a href="#非市场的市场之道" class="headerlink" title="非市场的市场之道"></a>非市场的市场之道</h2><p>   任何非市场的行为，都会以另一种市场的方式展现出来，无论是潜规则还是违法犯罪。</p><p>   比如你把票的价格定得过低，黄牛就是无法杜绝的；比如你把教师的工资定得过低，补课就是不可避免的；比如你把医生的服务费定得过低，那么和药品搭售的现象就无法避免。</p><p>   同理，很多人想让政府规定一个大家都买得起的房价，这是荒谬的，不说抢不抢得到的问题，就算抢到了，1000万的房子被政府限定为200万以后，开发商也会让你买一把800万的钥匙。</p><p>   很多人喜欢讲“良心”，试图用虚无的东西去约束他人，但如果你不是太幼稚，就知道真正有良心的，通常都是有约束的，或是规则限定了好心的参与者才能获得更大利益的，让好心跟获得利益的多寡相矛盾，就绝不是一个好主意。</p><h2 id="今日导言-3"><a href="#今日导言-3" class="headerlink" title="今日导言"></a>今日导言</h2><p>   当我们学了前三天的内容以后，就已经对经济规律和人性有一些了解了，接着第四天，我们就再来看一些颠覆性的东西，看看某些关于剥削劳动者以及用民主的方式争夺资源的想法和做法有多荒谬。</p><h2 id="最低工资恶法"><a href="#最低工资恶法" class="headerlink" title="最低工资恶法"></a>最低工资恶法</h2><p>   我们在前面的很多本书中都提到了“最低工资保护”这样的恶法，包括强行规定几倍的加班工资等，这都是一些貌似讲人权但实则蔑视人权的做法。</p><p>   双方自愿，诚实地出卖自己的劳动，换取报酬养家糊口，这是不是基本人权？</p><p>   我就不想要加班费，我就想要1500元一个月，可不可以？这当然可以，但很多政府给予了限制，不行，你只能要2000元一个月，且加班费你得照拿，但问题是同等条件别人比我强，若是我还不能要1500一个月与其他人竞争，那我是不是只能等待失业？</p><p>   如果这是保护人权的话，很简单，我们规定最低工资为100万一个月不就好了？</p><p>   同理还有禁止童工，孩子之所以做童工，是因为童工是他最好的选择，如果孩子沦落到要饭，那么做童工是不是比要饭要强？但由于禁止雇佣童工，因此没有人愿意接纳他，导致他只能要饭，如果你再禁止儿童要饭，那境况就只会更糟了。</p><h2 id="血汗工厂"><a href="#血汗工厂" class="headerlink" title="血汗工厂"></a>血汗工厂</h2><p>   与最低工资类似，血汗工厂也是常被人扭曲和误解的点。</p><p>   为什么叫血汗工厂？无非是认为劳动力不值钱，比如苹果的产品卖这么贵，但代加工厂的工人工资少得可怜，认为苹果在对工人进行剥削压榨。</p><p>   当我们学到了这里，那些优秀的学员应该自动就能回想起我们前几天学的内容，买家和买家竞争，卖家和卖家竞争。所以这些工人的工资低是谁造成的？是苹果吗？不对，富士康工人的竞争对手是其他劳工，比如越南的劳工，是他们愿意拿更低的工资，如果你要价更高，你的工作机会就会被他们抢走。</p><p>   那些辛辛苦苦从农村出来的，难道不是因为农村更为血汗，或者更没有希望才选择出来的么？市场从来不会不给人选择的权利。</p><p>   至于苹果的股东挣多少钱，那是他们应得的资本市场回报，如果回报不大，他们就会把钱投入其他地方，世上永远有更高回报的地方，不过可能也就没有苹果了。</p><p>   这跟底层劳工的薪水又有什么一毛钱的联系呢？</p><h2 id="剥削"><a href="#剥削" class="headerlink" title="剥削"></a>剥削</h2><p>   血汗工厂的指向就是一个，那就是——剥削。</p><p>   但剥削人人都想，不仅资本家想，工人也想剥削啊，所以既然剥削这么好，怎么你不去剥削别人，要让别人剥削你呢？</p><p>   我们可以看到很多公司里，有些员工就是磨磨时间等下班，那么到底是公司剥削了他，还是他剥削了公司呢？</p><p>   市场环境里，是不存在剥削这回事的。</p><p>   曾经香港有个裁员的事件，一个工会领袖在电视节目大骂餐厅老板，说他们利润如何丰厚，不仅给他们微薄的薪水，现在还把他们裁员了，有一位餐饮业雇主的代表反击道，我借你本钱，你来经营，一年赚10%的利润给我看看？</p><p>   老板没有义务算出工人的理想工资，根据我们在本书内的一贯观点，工人的工资是由跟他们同竞争的工人决定的，如果工人的工资真的过低，那么老板就雇不到人，自然就会提高工资，如果提高工资以后成本吃不消，就会倒闭，换一个效率更高，能赚得更多的老板，咦，这么看，好像工人又被剥削了，因为老板的收入和工人的又拉大了。</p><p>   所以，这世上真的有剥削么？</p><h2 id="收入分配"><a href="#收入分配" class="headerlink" title="收入分配"></a>收入分配</h2><p>   每当听到“合理调节收入分配”这样的词语就不是很爽，薛老师也跟我一样有同感，因为收入分配本就应该由经济规律决定。</p><p>   道理也很简单，价格本身就传递了资源是否稀缺的信号，而正因为人人自利，因此，资源自动就会到最高效，有最大产出，人们有最大需求的地方去，此时自利和利他是统一的。</p><p>   这时候，如果有一股力量，以它自认为合理的方式去分配和扭曲，无论是不是出于好心，都几乎肯定会造成市场失灵，然后在人力所不能预见的地方犯下错误。</p><p>   例如我们前面举例的统一压低专家挂号费等，如果还加上打击黄牛，那么看病难显然就不可避免了。很多人只看到了每个人看病都很便宜，却忽视了很多急于看病的人被拖了病情导致死亡的场景。</p><h2 id="贫富差距"><a href="#贫富差距" class="headerlink" title="贫富差距"></a>贫富差距</h2><p>   为什么要对收入进行人为调节呢？其中一个原因是为了缩小贫富差距，贫富差距过大，会导致社会不稳，因此，要对穷人或对某些项目给予补贴。</p><p>   但贫富差距这个东西有时候很难测算，我们目前通常都使用即时测算的方法，得出中国的贫富差距是大还是小，然而这种测算方法是不靠谱的。</p><p>   我25岁，你35岁，他45岁，就算智识一样，经历相同，我们的收入肯定不一样，贫富差距肯定也不一样。那位45岁的天天可以去国外潇洒，而我这个25岁的只能泡面加香肠，看起来社会的贫富差距很大，但是我们忽视了一点，当我45岁的时候，我经过20年的努力和积累，完全有可能跟他一样，拿婴儿跟成年人比体重，这叫有贫富差距吗？</p><p>   要算贫富差距，只能算一个人一生中总共能赚到多少钱，留下多少财富，拿即时指标去对比是毫无意义的，统计数据不仅不足信，且光算法就有问题。</p><p>   大部分人一生中赚到的钱都不会相差太远，中位数的上下是一个非常庞大的群体，所以无须担心。</p><p>   整体上的确有一些是特别富裕的1%，或是0.1%，比如马云，但我们需要容忍这些异类，因为他们这么富是提供了足够大的价值，如果不让他们这么富，我们的生活是会变得更糟的。</p><h2 id="资源争夺"><a href="#资源争夺" class="headerlink" title="资源争夺"></a>资源争夺</h2><p>   很多关于资源的争夺都喜欢用民主的方式解决，但好的经济学家会告诉你，有时候，民主的方式其实是大部分人对小部分人的专制而已。</p><p>   比如大部分人身高是150cm以上，那么大部分人就会同意将所有的税赋交由150cm以下的人承担。</p><p>   那么什么时候不适用民主呢？对于那些有明确产权的资源的交换或争用，就该用“投钞票”的方式来解决而不是“投选票”。</p><p>   比如春运的乘车成本，比如最低工资等，每个赶春运的人都希望春运最好是免费，但就算把所有人都拉来投票，也无法给春运期间的火车多增加一个位子，只会破坏市场的自我调节功能，把事情变得更糟而已。</p><p>   而当市场的资源配置失去了自动调为最优的作用之时，整体利益必然受损，也就是馅饼终究会越做越小，最后损害的是每一个人的平均利益。</p><h2 id="想的、说的和做的"><a href="#想的、说的和做的" class="headerlink" title="想的、说的和做的"></a>想的、说的和做的</h2><p>   人们的思想五花八门，甚至于说的也是五花八门，但行为却大同小异，这是为什么呢？</p><p>   因为前者不承受代价，而后者承受代价。</p><p>   比如举一个非常贴近事实的例子，键盘侠。表达爱国之心是廉价的，我们很容易就会在网上说一些慷慨激昂的话，展示出寸土不让的决心，但要找出一个实实在在的孝子却不容易。</p><p>   这是因为孝子的形象是要几十年如一日地维护出来的，而爱国者只需喊两句口号即可，人人都知道，真的上战场是轮不到自己的，因此，在安全的情况下，最大限度表现出自己的勇气、爱国心、热血等是最好的选择。</p><p>   很多人在小时候都会说“将来要如何如何报答父母”，而长大以后想法就不一样了；小情侣在婚前山盟海誓，婚后表现却大相径庭，都是一个道理。有父母将孩子小时候的说辞当真了，有情侣将对方婚前的承诺当真了，都是没弄明白代价的问题。</p><h2 id="决策与后果"><a href="#决策与后果" class="headerlink" title="决策与后果"></a>决策与后果</h2><p>   前面我们说了民主的结果有时候不一定是最好的，是针对那些明显不该用投票的方式而应该用投钱的方式来解决的事情，我们再来补充一下，民主之所以有时候不适用，是因为民主的代价通常并不需要自己承担，或承担得没有那么明显。</p><p>   比如有人赞成版权保护，自己用的却都是盗版；有人赞成保护民族工业，却只用进口货或走私货；有人赞成节水行动，自己的浴缸却时常漏水不关。</p><p>   市场的个人选择常常要以个人利益作为投票的代价，但公共政策的投票却几乎不需要承担任何后果，因此，人们会以一种摒弃利益只论高尚的心态去参与，这种决策显然就是与市场的资源优化配置相悖的。</p><p>   因此，要得到有效的民主决策结果，请先把每个人的决策代价绑在上面，如果你赞同贸易保护，那么就请你在买东西时候自动把价格加上10%。</p><h2 id="今日导言-4"><a href="#今日导言-4" class="headerlink" title="今日导言"></a>今日导言</h2><p>   最后一天，我们来随着薛老师的“经济学随想”了解一些经济现象的本质，当我们在高喊庞氏骗局或歧视的时候，我们是不是真的明白自己在喊什么？</p><h2 id="庞氏骗局"><a href="#庞氏骗局" class="headerlink" title="庞氏骗局"></a>庞氏骗局</h2><p>   每当一家巨头资金链断裂之时，总有很多人跳出来说庞氏骗局，那么，究竟什么是庞氏骗局？</p><p>   庞氏骗局的故事大家都听过，就是一个叫查尔斯•庞兹的人弄了一个投资计划，许诺高额回报，他呢，一边故意把这个计划弄得很复杂，搞得大家都看不懂，另一边拿出一些实在的证据，比如让前期加入的人都获得了高回报，吸引越来越多的人参加这个金融骗局，最后破产。</p><p>   对照这个故事，我们很容易就会把一些画饼——融资——烧钱——再画饼——再融资的企业模式同庞氏骗局等同起来，比如乐视，很多人说它是庞氏骗局。</p><p>   其实我们对庞氏骗局有很多误解，首先融资是正当的，融多少都不能说是庞氏骗局；其次承诺给出高回报也是正当的，不能说高回报就是庞氏骗局；再次，借新债还旧债也是正当的，也不能说是庞氏骗局。</p><p>   那么什么是庞氏骗局呢？如果你的业务盈利在事实上不足以抵消借债允诺的利息支出，你刻意隐瞒亏损，并试图吸引更多人加入这个摆明亏钱的游戏，这才叫庞氏骗局。如果诚实以待，哪怕亏光了也不是庞氏骗局，更不构成诈骗。</p><p>   在著名的吴英一案中，其故意误导储户，将新增的借款说成是经营利润以回报之前的投资者，这是判断庞氏骗局的关键所在。</p><h2 id="歧视与代价"><a href="#歧视与代价" class="headerlink" title="歧视与代价"></a>歧视与代价</h2><p>   凡歧视必有代价，当我们说到A对某物、某事或某人有歧视时，其实A已经付出了相应的代价。</p><p>   比如我明知道这个黑人很能干，但我就是不雇佣他，因为我讨厌黑人，或者不是黑人，是矮子，胖子等（请记住我只是举例），那么我就已经付出了代价，因为我的歧视，我让自己受到了损失。</p><p>   相反，我们在前面说到过类似的，当一所医学院录取名额固定的时候，我们一定要分配一定比例的名额给整体成绩没那么好的少数民族或者是某些我们认为需要被照顾的群体，那么挤掉的，就是原本成绩更好的学生的位子。</p><p>   这不仅从非歧视变成了真正的歧视，还顺带损害了社会整体利益，比如医学院这事儿就有可能在今后损害了病人的利益。</p><h2 id="人性的利己"><a href="#人性的利己" class="headerlink" title="人性的利己"></a>人性的利己</h2><p>   一个好的经济学家难免显得有点“不近人情”，我想看到这里大家也都有这样的感受，那就是很多优秀的经济学观点其实跟我们的道德观念是相悖的，但这就是经济学，一门研究“事实真相”的学科。</p><p>   为什么经济学里一直假定人是理性的呢？因为人性总是利己的。</p><p>   哪怕是那些最高尚、最无私、最具有同情心的人，他们在做着那些高尚、无私和具有同情心的事情时，也是为了追求一种内心的满足。如果没有这种内心的满足，他们便没有理由做这些高尚、无私和具有同情心的事，因此，人是绝对自利的，这一点不因某个人的利他行为而改变。</p><h2 id="利率"><a href="#利率" class="headerlink" title="利率"></a>利率</h2><p>   利率这样的名词，随处可见，但我敢说，在没有进入私塾学习之前，绝大部分人根本不懂利率是什么意思，也不懂利率的高低是由什么决定的。</p><p>   利率是怎么产生的呢？是由人们的急躁产生的，也就是说人们都不想延迟满足，希望现在就享受，这种急躁越是增加，未来的东西（期货）就越少人接受，就有更多人需要即时的东西（现货）。</p><p>   比如你有一张半年期的1000美元国库券，半年后能向美国政府换回1000美元，那么它现在值多少？应该是略小于1000美元是吧。如果市场越是急躁，也就是大家越倾向于现在就拿，那么现价就会比较低，有人可能800块也想拿走，那么反映出来的利率就相对较高；相反，市场越有耐心，大家都觉得放着就放着，那么现价就比较高，哪怕只挣20块钱，大家也不会现在就取，反映出来的利率就相对较低。</p><p>   其他方面也是如此，在纯高利率的区域，人们更容易选择及时行乐，不愿意付出艰苦的智力投资，也更不注重健康。</p><p>   所以，利率这个东西，只是人们是否急躁的反映。</p><h2 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h2><p>   我在【请辩】的文章里提到的关于成本的观点与薛老师的一致。</p><p>   什么叫成本？成本就是放弃了的最大的代价。比如我现在在键盘上敲下这行字，成本就是我本可以吃西瓜，葛优躺，看电视，看书，写专栏等无数选择中效用最大的那个。</p><p>   从这个角度来看，我们常常说的“自家的铺子0成本”就是大大错误的，因为自家的铺子如果不自己用，也可以租出去，这个租金，就是你自用的成本，跟你租别人的铺子的成本是一样高的。</p><p>   任何选择都有成本，但我们往往意识不到。比如我们常说，餐厅里用布巾比纸巾更环保，因为布巾可以重复使用，纸巾就纯耗费了木材。但如果你真正考虑了成本就知道，布巾增加的浆洗等工序，会造成其他的资源消耗，比如多用水，多用电，多用洗涤剂等。</p><p>   因此什么样的成本最低，我们就应该如何选择，而如何判断成本？就让天生的“自利”来选择吧，自利引导我们用最小的成本去行动。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   薛老师的《经济学通识》到此结束，是不是很过瘾？其实这本书是薛老师多年来的专栏合集，书很厚，而且是一篇一篇呈现的，每一篇还有文章日期。我按照主题将同类进行了归类，并对薛老师的核心观点进行了提取与点评，方便我们私塾的学员阅读，可以说是干货满满。</p><p>   接下来，我们对全书进行一下简单总结：</p><p>   1、免费的就是最贵的；</p><p>   2、所谓的公共物品，是指你使用了也不妨碍我同时使用，而私人物品，是指你用了我就不能同时用；</p><p>   3、价格是需求强弱的反映，而需求只能跟自己比，不能在人与人之间比较；</p><p>   4、黄牛起到的是价格纠偏的作用；</p><p>   5、买家和卖家只要达成交易，就是互利共赢，买家只和买家竞争，同理，卖家只和卖家竞争；</p><p>   6、如果你“挑客”，你就在“认人”，认人的代价就是你挑客付出的利益代价；</p><p>   7、只有行政才会造成垄断，那些反“商业垄断”的，几乎都是为了自己的利益，最终伤害的是消费者；</p><p>   8、任何非市场的行为，都会以另一种市场的方式展现出来，无论是潜规则还是违法犯罪。</p><p>   9、世上本没有剥削，资本家和工人的收入组成部分不同罢了；</p><p>   10、正因为人人自利，资源才会到最高效，有最大产出，人们有最大需求的地方去，此时自利和利他是统一的。</p><p>   11、要计算贫富差距，不能以即时状态去看；</p><p>   12、想要得到正确的民主决策结果，请先把每个人的决策代价绑在上面；</p><p>   13、凡歧视必有代价；</p><p>   14、人是绝对自利的，这一点不因某个人的利他行为而改变。</p><p>   15、利率是人们是否急躁的反映；</p><p>   16、成本就是放弃了的最大的代价。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;《经济学通识》&lt;/blockquote&gt;
    
    </summary>
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/categories/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/tags/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>升级 JDK 到 10</title>
    <link href="yanchongsheng.github.io/2018/04/28/%E5%8D%87%E7%BA%A7JDK%E5%88%B010/"/>
    <id>yanchongsheng.github.io/2018/04/28/升级JDK到10/</id>
    <published>2018-04-28T05:34:43.000Z</published>
    <updated>2018-04-28T10:05:37.866Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"> 时代在进步，需要不断的跳出舒适圈，才能不掉队 </blockquote><br>JDK10 于 2018.03.20 发布，期待已久的<b>局部变量类型推导</b>功能也随着 JDK10 的发布走入千家万户，而且 Oracle 最近说 JDK8 将于 2019.01 停止免费更新，趋势引领必须不断的接受新的技术改进。应项目需求，遂负责将项目的 JDK 升级到 10，对于升级过程进行简短记录，以备不时查看。</p><a id="more"></a><h2 id="开发工具集（百度云）"><a href="#开发工具集（百度云）" class="headerlink" title="开发工具集（百度云）"></a>开发工具集（百度云）</h2><p>链接：<a href="https://pan.baidu.com/s/1DxvxKtyyGxps6ElfvQu3xA" target="_blank" rel="noopener">https://pan.baidu.com/s/1DxvxKtyyGxps6ElfvQu3xA</a> 密码：pfsd</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1、从 Oracle 官网下载 JDK10 的安装包：jdk-10_windows-x64_bin.exe</p><blockquote><p>卸载原先的 JDK (也可以不卸载，但是使用的时候需要指定 JDK 版本，麻烦)<br>安装 JDK10<br>配置环境变量</p></blockquote><p>2、从 JetBrains 官网下载 Intellij IDEA 的最新安装包：ideaIU-2018.1.2.exe</p><blockquote><p>由于 Intellij IDEA 2018.1 才开始支持 JDK10，所以升级 JDK 附带的要升级 IDEA 到 2018.1 的版本</p></blockquote><p>3、从 Gradle 官网下载 Gradle 的最新安装包：gradle-4.7-all.zip</p><blockquote><p>同理 Gradle 也是于 gradle-4.7 这个版本才开始支持 JDK10</p></blockquote><h2 id="IDEA-环境配置"><a href="#IDEA-环境配置" class="headerlink" title="IDEA 环境配置"></a>IDEA 环境配置</h2><p>1、在 Project Structure 配置 SDKs，指定 JDK home paht<br><img src="/upload_image/JDK10-1.png" alt="JDK home paht"><br>2、在 Project Structure 配置 Modules，指定 Language Level<br><img src="/upload_image/JDK10-2.png" alt="Language Level"><br>3、在 Settings 中的 Java Compiler 中，指定各个 Module 的 Target bytecode version 为 10<br><img src="/upload_image/JDK10-3.png" alt="Target bytecode version"><br>4、将项目中的每个 pom.xml 中的 source 和 target 中的 JDK 版本全部设定为 10<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                <span class="string">"&lt;source&gt;10&lt;/source&gt;"</span></span><br><span class="line">                <span class="string">"&lt;target&gt;10&lt;/target&gt;"</span></span><br><span class="line">                &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></p><h2 id="代码调整"><a href="#代码调整" class="headerlink" title="代码调整"></a>代码调整</h2><p>由于 JDK10 对 API 进行了调整，比如去掉了 sun.misc.BASE64Decoder ，所以如果项目中有比较老的代码，在这个版本中就需要进行升级了。理论上都会有对应的新类供你使用，耐心找，肯定有的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt; 时代在进步，需要不断的跳出舒适圈，才能不掉队 &lt;/blockquote&gt;&lt;br&gt;JDK10 于 2018.03.20 发布，期待已久的&lt;b&gt;局部变量类型推导&lt;/b&gt;功能也随着 JDK10 的发布走入千家万户，而且 Oracle 最近说 JDK8 将于 2019.01 停止免费更新，趋势引领必须不断的接受新的技术改进。应项目需求，遂负责将项目的 JDK 升级到 10，对于升级过程进行简短记录，以备不时查看。&lt;/p&gt;
    
    </summary>
    
      <category term="工具手册" scheme="yanchongsheng.github.io/categories/%E5%B7%A5%E5%85%B7%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="工具手册" scheme="yanchongsheng.github.io/tags/%E5%B7%A5%E5%85%B7%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>Java Web 开发简介</title>
    <link href="yanchongsheng.github.io/2018/04/22/JavaWeb%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B/"/>
    <id>yanchongsheng.github.io/2018/04/22/JavaWeb开发简介/</id>
    <published>2018-04-22T03:22:41.000Z</published>
    <updated>2018-05-03T09:39:41.685Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"> Java Web 开发简介 </blockquote><a id="more"></a><h2 id="什么是-Web"><a href="#什么是-Web" class="headerlink" title="什么是 Web"></a>什么是 Web</h2><p>Web 本意是蜘蛛网和网的意思，但是现在已经被广泛的翻译成网络、互联网等。</p><h2 id="什么是-Internet-即因特网"><a href="#什么是-Internet-即因特网" class="headerlink" title="什么是 Internet 即因特网"></a>什么是 Internet 即因特网</h2><p>先来了解三个概念：网络、互联网、因特网。</p><ul><li>网络(network) 由若干节点(node) 和连接这些节点的链路组成。网络中的节点可以是计算机、集线器、交换机或路由器等。很多情况下我们用一朵云表示一个网络，这样做的好处是可以不去关心网络中的细节问题，因为可以集中精力去研究网络跟网络互连有关的一些问题。</li><li>网络和网络还可以通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互联网(互连网)，因此互联网是网络的网络。</li><li>因特网(Internet) 是世界上最大的互连网络，习惯上，大家把连接在因特网上的计算机都称为主机(host)。网络把许多计算机连接在一起，而因特网则把许多网络连接在一起。</li></ul><p>所以：Internet 是指将世界各地的计算设备连接起来组成的一个网，其中“连接”需要两部分：物理连接（即硬件连接）和软件连接。物理连接指的就是硬件设备，比如光纤、无线网络信号等；软件连接指的就是各种通信协议。</p><h2 id="Web-是如何传输的"><a href="#Web-是如何传输的" class="headerlink" title="Web 是如何传输的"></a>Web 是如何传输的</h2><p>有了将世界各地计算机连接在一起的 Internet 以后，那么理论上在这个网里的任何两台计算机都是可以通信的。但是问题来了，假设每个人都有自己的一套传输规则，比如我用 1 表示存在，另一个人用 1 表示不存在，而还有人用 11 表示存在等等五花八门的规定，这样的传输造成的问题是通用性极差，所以需要制定一套标准，然后大家都遵守。</p><p>在 Web 中，利用 HTTP 协议进行超文本和超媒体的传输，这个是大家约定好的一个规则，即只要你的内容是超文本或者超媒体，就可以利用超文本传输协议进行传输，并且所有遵守这个规则的电脑都能正常发送或接受内容。</p><ul><li>HTTP(Hypertext Transfer Protocol) 超文本传输协议，专门用来传输超文本的</li><li>Hypertext 超文本</li><li>Hypermedia 超媒体</li><li>HTML( Hypertext Markup Language) 超文本标记语言</li></ul><h2 id="静态-Web-和-动态-Web"><a href="#静态-Web-和-动态-Web" class="headerlink" title="静态 Web 和 动态 Web"></a>静态 Web 和 动态 Web</h2><ul><li>静态 Web：程序员手动写好静态页面代码，然后放到文件服务器中供用户访问。其内容是固定的，不管何人何时以何种方式其访问得到的内容都是一样的。</li><li>动态 Web：网页代码是由 Web 容器根据用户请求动态生成的，即代码是由程序动态生成而不是程序员写死的。动态 Web 主要采用了拼凑代码的的形式动态的生成页面。<br><img src="/upload_image/Java_Web01.png" alt="动态 Web流程图" title="动态 Web流程图"></li></ul><h2 id="胖客户端-和-瘦客户端"><a href="#胖客户端-和-瘦客户端" class="headerlink" title="胖客户端 和 瘦客户端"></a>胖客户端 和 瘦客户端</h2><p>胖客户端程序指的是，当一个程序运行时需要一个单独的客户端程序支持，例如 QQ。<br>瘦客户端操作时不需要进行任何其他程序的安装，直接使用即可，例如 论坛。</p><h2 id="企业开发架构"><a href="#企业开发架构" class="headerlink" title="企业开发架构"></a>企业开发架构</h2><p><img src="/upload_image/Java_Web02.png" alt="企业开发架构" title="企业开发架构"></p><p><a href="https://blog.csdn.net/conleyfree/article/details/50890505" target="_blank" rel="noopener">因特网，互联网，以太网，局域网的区别</a></p><p><a href="http://www.cnblogs.com/xdp-gacl/p/3729033.html" target="_blank" rel="noopener">JavaWeb学习总结(一)——JavaWeb开发入门</a></p><h2 id="Web-应用程序"><a href="#Web-应用程序" class="headerlink" title="Web 应用程序"></a>Web 应用程序</h2><p>Web 应用程序指供浏览器访问的程序，通常也简称为 Web 应用。一个 web 应用由多个静态 web 资源和动态 web 资源组成，如:html、css、js文件，Jsp文件、java程序、支持jar包、配置文件等等。即我们所谓的 Web 开发就是开发一个 Web 应用程序以供外界访问。例如：淘宝网、亚马逊网等都是 Web 应用程序。<font color="red">Web 应用开发好后，若想供外界访问，需要把 web 应用所在目录交给 web 服务器管理，这个过程称之为虚似目录的映射</font></p><h2 id="Web-服务器"><a href="#Web-服务器" class="headerlink" title="Web 服务器"></a>Web 服务器</h2><ul><li>Web 服务器是指 驻留于因特网上某种类型计算机的 一个软件程序，是可以向发出请求的浏览器提供文档的程序。服务器是一种被动程序：只有当Internet上运行在其他计算机中的浏览器发出请求时，服务器才会响应。 </li><li>首先 Web 服务器是一个软件程序，这种程序主要用来对外提供某些服务。即 Web 服务器其实就是一个在电脑上 24 小时运行的程序软件（例如：QQ），但是这个程序软件还必须具备一个特点，就是能够向外界提供 Web 服务。</li><li>Web 服务器就是电脑上的一个程序，这个程序能把你电脑上的某个真实目录（eg: D:/test）映射成一个虚拟目录（eg: /hello）暴露出去，然后可以供大家访问。（通过：IP地址 + 端口号 + 虚拟目录 的方式就可以访问到你电脑上虚拟目录对应的真实目录下的内容）。</li><li>可以将 Web 服务器理解成一个容器，只要你将内容放入到这个容器中，那么你放入的内容就可以被全世界访问到。而 Web 服务就是一个只能放置 Web 页的服务器，即 web 服务器是基于网站架设的服务器，我们平时可以浏览的网页都是在别人的服务器上面保存的文件</li></ul><h2 id="Web-开发的本质"><a href="#Web-开发的本质" class="headerlink" title="Web 开发的本质"></a>Web 开发的本质</h2><p>学习 web 开发，需要先安装一台 web 服务器，然后再在 web 服务器中开发相应的 web 资源，供用户使用浏览器访问。所谓的 Web 开发，就是开发一整套 Web 资源，即事先准备好各种 Web 资源，包括静态的还有动态的，以供外界访问。例如：淘宝、微博等。</p><h2 id="学习web开发，为什么必须要先装一个WEB服务器？"><a href="#学习web开发，为什么必须要先装一个WEB服务器？" class="headerlink" title="学习web开发，为什么必须要先装一个WEB服务器？"></a>学习web开发，为什么必须要先装一个WEB服务器？</h2><p>在本地计算机上随便创建一个web页面，用户是无法访问到的，但是如果启动tomcat服务器，把web页面放在tomcat服务器中，用户就可以访问了。这说明什么问题？1、不管什么web资源，想被远程计算机访问，都必须有一个与之对应的网络通信程序，当用户来访问时，这个网络通信程序读取web资源数据，并把数据发送给来访者。2、WEB服务器就是这样一个程序，它用于完成底层网络通迅。使用这些服务器，We应用的开发者只需要关注web资源怎么编写，而不需要关心资源如何发送到客户端手中，从而极大的减轻了开发者的开发工作量。</p><h2 id="Web-服务器在-Web-开发中的作用"><a href="#Web-服务器在-Web-开发中的作用" class="headerlink" title="Web 服务器在 Web 开发中的作用"></a>Web 服务器在 Web 开发中的作用</h2><p>在计算机网络中，当两台电脑连同以后就可以进行通信了，但是有一个问题，电脑上回同事跑很多应用程序，例如 QQ、浏览器，我是如何区分发送到这台电脑的信息是给 QQ 用呢，还是给浏览器用呢，所以要想进行通信，就必须在电脑之上跑一个应用程序，通过应用程序的端口号去区分消息是给谁用的。Web开发说白了就是把你电脑上的某个文件夹暴露到外网上可以供大家访问，所以就必须保证两个应用程序间是可以通信的，所以我们开发好 web 应用程序以后就应该处理应用程序的通信问题了，但是实际上这个问题 tomcat 帮我们处理了。当一个请求发送到服务器上的 tomcat 的时候，它会把请求转发到你的程序中，并对请求做一些处理。</p><p><a href="http://www.cnblogs.com/xdp-gacl/p/3734395.html" target="_blank" rel="noopener">JavaWeb学习总结(二)——Tomcat服务器学习和使用(一)</a></p><h2 id="Tomcat-服务器虚拟目录的映射方式"><a href="#Tomcat-服务器虚拟目录的映射方式" class="headerlink" title="Tomcat 服务器虚拟目录的映射方式"></a>Tomcat 服务器虚拟目录的映射方式</h2><p>Web应用开发好后，若想供外界访问，需要把web应用所在目录交给web服务器管理，这个过程称之为虚似目录的映射。</p><ul><li>虚拟目录的映射方式一：在server.xml文件的host元素中配置</li><li>虚拟目录的映射方式二：让tomcat服务器自动映射</li><li>虚拟目录的映射方式三：$CATALINA_BASE/conf/[enginename]/[hostname]/ directory目录下设置配置文件</li></ul><h2 id="Tomcat-服务器配置虚似主机"><a href="#Tomcat-服务器配置虚似主机" class="headerlink" title="Tomcat 服务器配置虚似主机"></a>Tomcat 服务器配置虚似主机</h2><p>配置虚似主机就是配置一个网站，即给某个 IP 地址起个别名。配置的主机(网站)要想通过域名被外部访问，必须在DNS服务器或windows系统中注册访问网站时使用的域名，找到”C:\Windows\System32\drivers\etc”目录下的hosts文件，编辑这个文件，将新添加的网站的域名和IP地址绑定在一起，这样我们就可以在浏览器中使用www.gacl.cn这个域名去访问name是www.gacl.cn那个虚拟主机里面管理的那些web应用了。先查询主机的 host 文件如果找不到就会去 DNS 指定的服务器上去查找某个域名所对应的 IP 地址。</p><h2 id="Tomcat-修改端口号需要修改两个地方"><a href="#Tomcat-修改端口号需要修改两个地方" class="headerlink" title="Tomcat 修改端口号需要修改两个地方"></a>Tomcat 修改端口号需要修改两个地方</h2><p>一台机器要想同时部署多个 tomcat 除了保证 HTTP 的启动端口不一样外还要保证 AJP 的控制端口不一样，启动端口用来接收请求， AJP 用来管理 tomcat 服务，即 tomcat 修改端口需要修改两处。<br>1、<connector port="8090" protocol="HTTP/1.1" connectiontimeout="20000" redirectport="8443"><br>2、<connector port="9009" protocol="AJP/1.3" redirectport="8443"></connector></connector></p><p><a href="http://www.cnblogs.com/xdp-gacl/p/3744053.html" target="_blank" rel="noopener">JavaWeb学习总结(三)——Tomcat服务器学习和使用(二)</a></p><h2 id="CA-的由来"><a href="#CA-的由来" class="headerlink" title="CA 的由来"></a>CA 的由来</h2><p>非对称性加密存在一个问题：A想向B发数据，A如何确定拿到的公钥一定是B发的呢？那么如何解决这个问题呢？只能靠一个第三方机构(CA机构，即证书授权中心(Certificate Authority )，或称证书授权机构)来担保。</p><p><a href="https://zhuanlan.zhihu.com/p/22544725" target="_blank" rel="noopener">什么是 Web 服务器</a><br><a href="https://segmentfault.com/a/1190000008271889" target="_blank" rel="noopener">WEB服务器、应用程序服务器、HTTP服务器区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt; Java Web 开发简介 &lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java Web" scheme="yanchongsheng.github.io/categories/Java-Web/"/>
    
    
      <category term="Java Web" scheme="yanchongsheng.github.io/tags/Java-Web/"/>
    
  </entry>
  
  <entry>
    <title>卧底经济学1</title>
    <link href="yanchongsheng.github.io/2018/04/22/%E5%8D%A7%E5%BA%95%E7%BB%8F%E6%B5%8E%E5%AD%A61/"/>
    <id>yanchongsheng.github.io/2018/04/22/卧底经济学1/</id>
    <published>2018-04-21T16:44:37.000Z</published>
    <updated>2018-04-24T01:54:21.728Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">《卧底经济学 1》</blockquote><a id="more"></a><h2 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h2><h2 id="卧底经济学-1"><a href="#卧底经济学-1" class="headerlink" title="卧底经济学 1"></a>卧底经济学 1</h2><p>   原名：THE UNDERCOVER ECONOMIST</p><p>   作者：【英】蒂姆•哈福德（Tim Harford）</p><p>   译者：赵恒</p><p>   出版社：中信出版社</p><p>   本版版次：2017年1月</p><p>   ISBN：978-7-5086-6960-1</p><h2 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h2><p>   本来本周的书目放的是《决策与理性》，也是基思•斯坦诺维奇的，因为我希望把同一位作者的好书都尽量放到一起来讲，毕竟同一位作者的思维具有连续性。但拆了一部分之后，我发现里面的很多观点和内容甚至是例子都是跟《超越智商》雷同的（由于我之前看这两本书并非连续看），因此果断放弃，不被沉没成本拖累，毕竟我做无用功好过你们做无用功。</p><p>   同时这也说明，哪怕是一名优秀的作者，在同一类型的书籍里，要让他产生出新颖的见解，是非常困难的，因为一个人对一种类型的认知积累总归是有上限。</p><p>   本周我们要学习的书目叫《卧底经济学》，《卧底经济学》一共有4本，我们先来学习第一本，该书是一本十足的畅销书，上市后稳居英国商业畅销书前三，我对它的评价是：小身材，大味道。</p><p>   这是一本由小场景搭成的经济学书籍，如有原书需求，请自行购买。</p><h2 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h2><p>   我们都知道，东西有贵有便宜，那么一杯咖啡为什么卖这么贵？咖啡豆的成本其实是很小的，而且为什么有些咖啡店做出来的东西明明跟别人一模一样，却可以卖得特别贵？别人不会嫌贵就不买了吗？</p><p>   今天我们来学习下，关于“贵”的艺术。</p><h2 id="为什么是高价（1）"><a href="#为什么是高价（1）" class="headerlink" title="为什么是高价（1）"></a>为什么是高价（1）</h2><p>   据经济学教授布莱恩•麦克马纳斯计算，咖啡的利润空间约为150%，一杯售价40元的咖啡，成本不到18元。</p><p>   星巴克的咖啡看起来并没有什么技术含量，味道也没有比其他的咖啡店更好，为什么总是能卖得比其他的咖啡店更贵？不怕别的咖啡店用低价策略来抢生意吗？</p><p>   事实上，星巴克的高价策略并不是靠咖啡的质量，也不是靠员工的热情，它的所有秘诀只有两个字：地段。</p><p>   当类似的咖啡店都想入驻一个绝佳人流的好地段时，房东或者广场方会发现，如果签下5家店，那么或许没人愿意跟竞争对手共享同一片的人流，这样租金价格就会很低，所以还不如跟其中一家签订排他性协议，把价格抬到足够高就可以了。</p><p>   星巴克以其品牌自带的效应，又常常愿意以最高价拿下这样的地段，因此这类绝佳的地段常常是它的囊中之物。</p><p>   然而，星巴克也不是见到人流多的地段就无脑拿的，为什么人们愿意在星巴克喝40元的咖啡，而不愿意在隔壁街喝35元的咖啡呢？因为它们挑选的要么是人们行色匆匆，去隔壁街购买就会迟到的地方，要么是大型广场的中心地带，它们会签下排他性协议，以便让那些去隔壁街的人来不及回来买东西。</p><p>   这样的人群对咖啡价格就不会太敏感。</p><h2 id="为什么是高价（2）"><a href="#为什么是高价（2）" class="headerlink" title="为什么是高价（2）"></a>为什么是高价（2）</h2><p>   从上面我们已经知道了，高价的原因不仅仅在于稀缺，还在于对人们的心理、行为习惯等的判断。但当你的这些策略或者心思被房主知道以后，房主会想办法挖走你的利润，具体会挖走多少呢？大概是到你的合理利润为止。</p><p>   这就像一块好的地可以产出A吨粮食，差的地可以产出B吨粮食，那么租用的租金差价是多少呢？大约就是A-B的产量*价格。</p><p>   所以为什么说麦当劳是一个房地产企业，因为它知道只要它的生意红火，房东就会涨房租，涨到它的利润回复到原来水准为止，所以它就选择自己买下来。结果，N年以后，它的最大一块利润竟然是来源于房地产。</p><p>   有人问为什么有些地的租金这么高，是不是跟人流正相关？并不一定是，最正确的原因是利用这块地产生的利润足够大。</p><h2 id="竞争排他"><a href="#竞争排他" class="headerlink" title="竞争排他"></a>竞争排他</h2><p>   毒品买卖中，获得最大利润的通常是实力最为雄厚的帮会，他们会通过威胁其他竞争者进入的方式进行垄断。</p><p>   工会也是一样，工会的目的一方面就是增强讨价还价的能力，另一方面是阻止更多人进入该行业。以前在美国，工会是被法律所反对的，这跟大公司合并垄断性质是一样的，但毕竟每个政党都是需要尽力争取更多人的选票，尤其是底层劳动者，因为人数众多，因此这些法律就渐渐不见了。</p><p>   工会的确可以通过竞争排他的方式抬高价格，但也不总能得逞，最终还是取决于雇员和雇主之间谁更有议价能力，在沃尔玛面前，工会就基本没有任何发言权。</p><h2 id="价格敏感度"><a href="#价格敏感度" class="headerlink" title="价格敏感度"></a>价格敏感度</h2><p>   无论你运用什么样的手段，你的客户里一定会有对价格敏感的，也会有对价格不敏感的，那么你该如何定价呢？面对价格不敏感的往死里宰，对价格敏感的能卖出多少是多少？</p><p>   很明显这挺不容易的，虽然以前有人这么干过，比如亚马逊，根据不同客户的不同购买记录设置了不一样的价格，但最终还是很容易穿帮的，一旦穿帮以后，事情还是挺严重的。</p><p>   但是如果你将群体进行了合适的定位，似乎人们就不会很反对了，比如旅游景点给老人和小孩提供优惠，大家都不会反对。</p><p>   不过这样就偏离了我们的目标，我们是想让那些只愿意付低价的人付低价，宰那些愿意付高价的人，而不是不管他们的心理购买力，只筛选特殊人群为他们提供福利。</p><p>   佛罗里达州的迪士尼乐园就做到了，他们的人群定位是本地和外地，只对本地人提供折扣票价。因为本地人对票价敏感，低一点价格他们就会去，高一点就不会了；而外地游客好不容易来一趟，对价格不敏感，高一点也会来玩，因此就可以狠狠“宰”一笔，况且，就算你调了低价，绝大部分人也只会光顾一次，这就失去了本来可以到手的利润。</p><h2 id="餐厅里的酒"><a href="#餐厅里的酒" class="headerlink" title="餐厅里的酒"></a>餐厅里的酒</h2><p>   有没有想过，为什么餐厅里的酒卖得这么贵？因为餐厅有稀缺性？因为进了门就必须“挨宰”？好像也不是，通常餐厅都是扎堆的，餐厅并不拥有稀缺性，况且餐厅里的酒通常也是从超市拿来的，并没有什么特别，但哪怕是最普通的餐厅，饮料和酒水的价格都要远高于超市，甚至比饭菜的利润大。如果你说是餐厅的环境让这些饮料酒水的价格水涨船高，显然应该和饭菜同步才是。</p><p>   究竟这是为什么呢？</p><p>   这就是餐厅的定价策略。餐厅最重要的是什么？翻台率，只要翻台率够高，餐厅就能源源不断地赚钱，翻台率高一倍在同等时间里就能多赚一倍的钱。那么什么最影响翻台率？当然就是一直“赖”在餐厅不走的人。什么样的人会一直“赖着不走”？</p><p>   最有可能的就是慢慢喝酒和喝饮料的人，因此，要么你就吃完赶紧走，别影响我做生意，要么你就点高价酒和饮料，那就是你为自己延长的用餐时间付了费。</p><p>   你看，餐厅把定价策略运用得多好。但我敢肯定，很多餐厅并不知道这个定价策略是为了干什么的，他们只是看到别人这么干，所以也依样画葫芦罢了。</p><h2 id="差异化服务"><a href="#差异化服务" class="headerlink" title="差异化服务"></a>差异化服务</h2><p>   有时候，引导那些对价格敏感的人去购买低价产品是可行的，但引导那些对价格不敏感的人去购买高价产品却不是那么容易。</p><p>   比如飞机，大家都知道不管我坐哪个仓位，最终都是从A地到B地，所以怎么让他们多掏钱呢？这是个问题。对航空公司来说，解决方案是你将最好和最差的服务尽可能拉大。</p><p>   比如飞机完全可以提供给每一位乘客更好的膳食、鲜榨果汁等而无需付出多少额外成本，又比如将火车中的二等座打造成一等座的样子也不需要太多成本，但如若这样，头等舱和一等座的体验就跟经济舱和二等座拉不开差距，导致购买头等舱和一等座的人数减少。</p><p>   再比如汽车里的低配和高配，给低配装一个天窗是件很花成本的事么？并不是，这只是人为地拉开与高配之间的差距，从而能把对价格敏感与不敏感的人群分开的一种方式。</p><h2 id="今日导言-1"><a href="#今日导言-1" class="headerlink" title="今日导言"></a>今日导言</h2><p>   你喜欢听真话吗？喜欢。你能想象一个只说真话的世界吗？你或许想象不出来，因为我们习惯了现在的世界。</p><p>   但在完全市场里，有些东西可能就代表了绝对的真话，究竟是什么呢？</p><h2 id="价格就是真话（1）"><a href="#价格就是真话（1）" class="headerlink" title="价格就是真话（1）"></a>价格就是真话（1）</h2><p>   想象一个人人都说真话的场景，当你去买东西的时候，对方问你，如果我卖你50块你能接受吗？你说能，然后你问对方，你的成本是多少？对方说1块钱。</p><p>   这样的场景看起来有点滑稽。</p><p>   所谓价格，就是这样一个说真话的场景，当你愿意买一杯40块钱的星巴克咖啡时，就意味着你自愿用40元去换这样的一杯星巴克咖啡，不会有人问你，你觉得值不值，因为你接受这个市场价格就代表了你说值。</p><p>   在一个完全市场里，价格会说更多的真话。就像比特币挖矿，挖矿有成本，当这个成本相比于币价比较少，那么挖矿者会源源不断加入，当人数到了一定程度，或者币价下跌，挖矿还不如直接购买时，挖矿者因为无利可图就会逐渐退出，挖矿的难度也会随之降低，留下来的矿工又能挖到更多币了。</p><p>   币价也好，挖矿成本也罢，都是大家在用价格说着自己的真话。</p><h2 id="价格就是真话（2）"><a href="#价格就是真话（2）" class="headerlink" title="价格就是真话（2）"></a>价格就是真话（2）</h2><p>   当我们都用价格来表达自己想表达的内容时，我们的那种无声的表达还会带动其他人进行表达。</p><p>   比如将我们的表达汇总以后，发现想喝咖啡的人更多，那么街道两旁的服装店可能因为门可罗雀被咖啡店所取代，而地也会被更多人用来种植咖啡豆，或者有更多的运输公司愿意运输咖啡豆。</p><p>   这只是在咖啡这一条线上，在完全市场里，我们所有人的表达都带动着这世上所有产业链的变化，我们不断地用无声的表达构建出了一个有序的商业体系网。</p><p>   这会导致：</p><p>   1、长期存活下来的公司都是在正确汇总表达，并表达自己的；</p><p>   2、从宏观上来看，大家都在进行着最小浪费的生产；</p><p>   3、所有商品都留向那个最合适的人。</p><h2 id="合理税率（1）"><a href="#合理税率（1）" class="headerlink" title="合理税率（1）"></a>合理税率（1）</h2><p>   有没有发现，在完全市场下，我们通过各自的表达，自然就能将群体的效率达到最优配置，也就是我们说的有效社会。</p><p>   有效对应的是无效，所谓的无效，就是可以在不损害任何人利益的前提下，令某些人受益，通俗来讲，就是效益未饱和。</p><p>   造成无效的一大普遍原因，就是税收。我们前面说了完全市场，税收就是非完全市场的典型产物，因为税收本质上是拆东墙补西墙嘛，而且是违背市场意愿的人为拆补。</p><p>   书里有个例子：</p><p>   一杯咖啡的成本：90美分；</p><p>   完全市场竞争下，一杯咖啡价格：90美分；</p><p>   税后价格：99美分；</p><p>   人们愿意支付95美分。</p><p>   你会发现，由于税的存在，这笔交易无法发生，而没有税的话，卖家是可以有5美分收益的，交易也是会发生的。更糟的是，正是由于税的存在，交易没发生，最后连税也没收到。</p><p>   这就意味着，假如政府去掉这笔税，政府也没有损失什么，因为本来也收不到。这样，在不损害政府利益的前提下，却会有其他人受益，这就是前面说的效益未饱和。</p><p>   因此，税究竟应该定在多少，怎么定，这是个非常复杂的技术活，虽然我们这里不展开讨论，但大家要明白，不是越低越好，也不是越高越好，更不是拍脑袋就能定出来的，一个合适的税率方案关乎整个社会的运行总效率。</p><p>   可以想想，关于定税率的问题，如何应用我们学过的方法去往那些对价格不敏感的人身上多收点，然后给对价格敏感的人一点优惠。</p><h2 id="合理税率（2）"><a href="#合理税率（2）" class="headerlink" title="合理税率（2）"></a>合理税率（2）</h2><p>   看起来向富人收重税几乎得到了全世界人的认同，既然你挣这么多钱，那么就理应多交一点税，税率也应该更高，在绝大多数人看来，这是公平的。</p><p>   不管富人自己是不是认同，大家都觉得这样会让世界变得更好（这跟谷歌CEO拉里•佩奇的想法相反，他认为应该把钱给更有能力的富人，因为他们将会加快人类进步的进程，给穷人大多数时候将一无所获）。</p><p>   然而这是真的吗？</p><p>   以迈克尔•乔丹为例，迈克尔•乔丹人人都知道，篮球史上最强，也因此获得了巨额的财富，如果对他课以难以忍受的重税，若是他并不十分喜欢篮球，他就可能放弃打篮球，因为他拿不到多少钱了，这样人们就失去了一个看迈克尔打球的机会，世界真的变得更好了吗？</p><p>   还是上面这一句，一个合理的税率是非常非常非常难的，很多人在网络上对税率指手画脚，但他们可能连什么叫经济都不是太懂。</p><h2 id="今日导言-2"><a href="#今日导言-2" class="headerlink" title="今日导言"></a>今日导言</h2><p>   在公共场合，我们常常会见到一些人在抽烟，或者高声喧哗等，他们究竟能不能这么做，有没有权利这么做？相应的，如果一个人的房子装修得很漂亮，给路过的人都带来了美感，那么他是不是该被奖赏？</p><h2 id="外部效应"><a href="#外部效应" class="headerlink" title="外部效应"></a>外部效应</h2><p>   当我们说完了价格和付费之后，我们来聊聊付费的人。</p><p>   正常情况下，我使用我的东西，好处是我的，坏处也是我的，比如抽烟，我觉得很爽，你管我得不得肺癌，跟你有什么关系呢？</p><p>   但为什么我们要限制公共场合抽烟呢？因为你得肺癌是你的事，但影响到他人就关他人的事了，这个叫做负面外部效应，如果是请辩的老粉，应该看过我写的关于外部效应的文章。</p><p>   比如城市里，大量的汽车尾气造成了环境污染，在英国，每年约有7000人因尾气污染过早死亡。这些死亡的人里都是开车的吗？不一定，很多人不开车，却因尾气污染而死。</p><p>   开车提高了出行效率，但提高的是开车者的效率，然而不好的后果却让所有共同呼吸的人买了单，这就是负面外部效应。</p><h2 id="为负面买单"><a href="#为负面买单" class="headerlink" title="为负面买单"></a>为负面买单</h2><p>   在路上开车利用的是免费的道路，开车者的负面外部性完全释放给了所有人，这就不太公平，因此我们要收税，对这些人收各种税，汽油或者柴油，烟草也是。</p><p>   收税的理由是因为你们做的这些事可能会对其他人造成影响，因此你们必须为所有共同呼吸的人买单，你们要多出钱，这些钱收上来以后是属于国家的财富，也就是所有人的财富，这样补贴才能抵消你们造下的孽（对烟草收重税还有一个原因，这些人上了瘾之后成为了价格不敏感者，根据我们前面的总效益最大原理，当然要对他们多收钱）。</p><p>   有些时候，这种补贴的方式甚至比直接禁止要好。</p><h2 id="买单的公平性（1）"><a href="#买单的公平性（1）" class="headerlink" title="买单的公平性（1）"></a>买单的公平性（1）</h2><p>   很多人会认为，向给高峰期造成拥堵的司机收费是不合理的。一个原因是用这种方式把司机赶出道路不道德，另一个原因是那些富人根本不在乎这些钱，那富人就可以随心所欲地污染环境了？</p><p>   这两条听上去好像有点道理，其实全都经不起推敲。</p><p>   道德不道德就不说了，造成污染，尤其是高峰期给他人造成负面外部效应的，就应该多交钱，这样会促使大家错峰出行，如果你要赶着上班，又没有其他交通工具，那就乖乖买单吧。</p><p>   富人这个问题，看上去真的很不公平，但是，给别人造成多少麻烦就交多少钱这是天经地义又一视同仁的，并不因为是穷人富人而改变，你交不起钱，你可以选择不给他人造成麻烦，这很合理吧。</p><p>   富人本来就可以比穷人吃得更好，住得更好，享受佣人，这也是不公平，但却是合理的不公平，因为市场环境下，富人的钱本身就是由于给社会提供了足够多的价值以后的回报。</p><p>   有人说，那也有用非法手段获得财富的，对，但这是法律的事情，一码归一码。如果换成更本质的说法，对方使用非法手段获得财富也冒着被抓的风险，跟去澳门赌来的是一样的性质，你当然可以说，这不一样，一个合法一个违法，所以我说是更本质的说法，如果你不理解什么叫更本质，那就还需要在私塾更认真地学习。</p><p>   一个给了社会更多价值的人，正在进行价值的消费和转移，是件不正常的事吗？太正常了。所以能在金钱的范围内达成协作的，富人当然可以利用金钱来达成，否则谁还有兴趣成为富人？大家都做一摊烂泥就好了</p><h2 id="给生命定价"><a href="#给生命定价" class="headerlink" title="给生命定价"></a>给生命定价</h2><p>   我在请辩里有一篇文章，叫《富人的命就是比穷人的值钱》，很多人接受不了，说哪怕你说的都对，但就是接受不了。这种矛盾又混乱的逻辑是他们产生痛苦的原因。</p><p>   每个人都会给自己的生命定价，也会给他人的生命定价。比如面对同样的交通状况，富人可能会开车送孩子上学，穷人买不起车，可能就不送了。但他们真的买不起吗？不是的，很多穷人砸锅卖铁还是可以的，只不过这些生活成本对他来说太重要了，比孩子出事的微不足道的概率要更重要，这种博弈才是缘由，我们无时无刻不在给自己和他人的生命定价，哪怕很多人不承认。</p><p>   当我们选择五星级酒店或者是黑心小旅馆时，我们为居住环境定了一个价，如果你嫌麻烦不买烟雾报警器，你就是宁可让死亡风险增加，也要省下钱和时间，虽然死亡概率的增加值微乎其微，但不等于0，因此这个概率一乘，你就给自己的生命定了一个价。</p><h2 id="正面外部效应"><a href="#正面外部效应" class="headerlink" title="正面外部效应"></a>正面外部效应</h2><p>   说完负面外部效应，很多人就想到肯定有正面外部效应，是的，当然有。</p><p>   一个美女打扮得漂漂亮亮，街上的人看着赏心悦目，更让某些人得到了心理意淫上的满足感，那么这些人为此付费了吗？没有，这个美女带来了正面的外部效应，却没有收到相应的钱。我想今后一定会有更聪明的机制去补贴这位美女上街，不要觉得不正常，任何“顺便”给世界带来美好的东西，都应该收到钱。</p><p>   再比如政府为什么要给万达广场之类的项目以贷款利率上的优惠或者是变相补贴，明明广场只是一个商业项目，照理说成本、盈亏都自负才对。那是因为广场的受益方不只是单纯的自己，而是可以辐射周围几公里，包括带动周边的房价以及其他商业设施，还能惠及很多的民众，尤其是有牌子有名气的广场。</p><p>   那么政府为这样的正面外部效应付费就很合理了。</p><h2 id="今日导言-3"><a href="#今日导言-3" class="headerlink" title="今日导言"></a>今日导言</h2><p>   当我们在淘宝买东西的时候，可曾想过，淘宝解决的是什么问题？解决的是一个买家和一个卖家谁都不肯先付钱的问题。</p><p>   这个问题叫做“信任”，任何领域内只要解决了“信任”造成的利润损耗，那就肯定能够赚到钱。</p><h2 id="信息对等"><a href="#信息对等" class="headerlink" title="信息对等"></a>信息对等</h2><p>   有一句俗话，叫“买的没有卖的精”。</p><p>   这句话是什么意思呢？就是卖东西的人通常清楚地知道自己的东西值多少钱，比如有一半是好东西，另一半是没那么好的东西，但买方需要很强的鉴别力才能够接近这种“了解”，也只能是接近，没法像卖方一样知道得清清楚楚。</p><p>   卖方还有一个优势，就是他将这些东西挂出来以后，当买方决定以一个优等品和劣等品的平均价购买的时候，如果买方选择的是劣等品，那么卖方当然可以故作难办地开心卖出去，但如果买方选择的是优等品，卖方当然可以选择不卖，选择权都在卖方手里。</p><p>   然而当买方愿意出优等品的最低价购买时，却承担了万一东西不是优等品的风险，得不偿失，因此我们说买的永远没有卖的精，这是由于双方的信息不对等造成的。</p><h2 id="二手车之殇"><a href="#二手车之殇" class="headerlink" title="二手车之殇"></a>二手车之殇</h2><p>   我们都知道，要辨别一辆二手车价值多少钱是很困难的事，卖方非常清楚地知道这辆车价值大概多少钱，而买方并不知晓这辆车以前发生过什么，哪怕是专业的老师傅进行了全车检查，也不可能知道得像卖方这么清楚。</p><p>   所以买方肯定免不了为了信息劣势而多花钱，因为如果占了卖方便宜卖方就不卖了嘛。</p><p>   在这样的信息不对称的市场上，二手车几乎就是卖不出好价钱的，因为卖方的优势人人皆知，买方就更倾向于购买新车。而现在市面上出现的那些第三方中介，从一定程度上缓解了这样的信息问题，尤其是大平台，会更注意自己的声誉，因此对于车的估值会更接近真实价值，虽然还是无法完全消除这种信息不对称问题。</p><p>   新车到手价格跌一半，就是这类问题没有被解决的明证，新车到手，没开几次，价格怎么会跌一半呢？9折应该也抢着要才对，但，谁知道你的车出过什么问题呢？这笔信息税买方不愿意交。</p><h2 id="劣币驱逐良币（1）"><a href="#劣币驱逐良币（1）" class="headerlink" title="劣币驱逐良币（1）"></a>劣币驱逐良币（1）</h2><p>   几乎人人都听过经济学上这句著名的话：劣币驱逐良币。如果有不知道的同学，可自行百度，关于它的解释太多了。</p><p>   在信息不对等的市场上，也存在着这样的现象。当我们去买二手车的时候，我们心目中已经有了一个估价，那就是我们将买到不好的车的风险考虑在内。</p><p>   这样的话，我们几乎买到的总是较差的车，因为车况好的车对方不肯低价卖，而我们又怕承担万一是劣等品的危险，因此这类好车反而都不容易成交，反而是那些劣等车，成交概率就会大上很多，因为价格便宜，正所谓2块钱买不了吃亏买不了上当，我们早知道它是劣等车，就不怕被骗了。</p><p>   因此，长此以往，好车就会渐渐退出市场，整个市场被劣等车占领。</p><h2 id="劣币驱逐良币（2）"><a href="#劣币驱逐良币（2）" class="headerlink" title="劣币驱逐良币（2）"></a>劣币驱逐良币（2）</h2><p>   同样的情况还可见于保险业。</p><p>   一个健康指数满分的人，不太容易去购买健康保险，而那些健康指数不太行的，就会倾向于购买健康保险。</p><p>   这就导致，保险公司的客户都是那些自信可以拿到保险赔付或者大概率能拿到保险赔付的人。也就是保险公司的客户慢慢都会变成他们认为的“劣等客户”。</p><p>   接着由于赔付概率的上升，他们不得不提高保费，那些健康的人看到之后，更加不会去参保，连那些稍微健康的人都觉得得不偿失，最后导致坚持参保的人的平均身体状况会比之前更差，恶性循环之后直到无以为继。</p><p>   保险公司需要了解更多客户的信息，但正如买的没有卖的精一样，如果它了解的客户信息不如客户本人了解的详尽，那么它就总是吃亏的。</p><p>   所以它需要了解的是那些客户本人都没有了解到的信息，这有点像信息博弈，你认为付出这点钱购买保险很划算，因为你觉得自己的身体不算很好，但保险公司了解了以后觉得你目前的身体状况不足以影响健康，你们双方都认为自己赚到了，这笔交易才会成功。比如你更愿意在火灾发生的前一秒购买保险，而保险公司要做的，是在你不需要这种保险的时候将保险塞给你。</p><p>   这是一个谁更无知谁就吃亏的游戏。</p><h2 id="道德风险"><a href="#道德风险" class="headerlink" title="道德风险"></a>道德风险</h2><p>   保险公司虽然可以利用自己的专业性有可能了解到更多客户没有预知到的事情，但保险同时也会引发一些道德风险。</p><p>   试想，如果一件东西丢了有人赔给你，是不是你会更加不在意它有多大概率被盗呢？比如保了汽车盗抢险之后，你就更加容易将车停在无人看管的地方，因为那些地方不用给钱。</p><p>   所以保险公司在推出保险计划的时候也会进行这方面的考量，一方面他们不会推出你口头上说不愿意但事实上或许正中你下怀的产品，比如怀孕险，意外怀孕可以赔付，谁知道你是不是正想要孩子呢？另一方面，他们会根据赔付情况对你的新保险合同进行“惩罚”，比如车险出过险之后，就要大幅上调第二年的保费，以便让你不因为能够全赔而不专心开车。</p><h2 id="今日导言-4"><a href="#今日导言-4" class="headerlink" title="今日导言"></a>今日导言</h2><p>   只要有人，博弈就永远存在，每个人为了替自己争夺最大的利益，都会不断地根据他人的行为和思想来修正自己的策略，股市是这样，经济是这样，其他的事情也是这样。</p><h2 id="股市的奖赏"><a href="#股市的奖赏" class="headerlink" title="股市的奖赏"></a>股市的奖赏</h2><p>   经济模型里经常假设人都是理性的，那么对股市的预测上，人还是不是理性的呢？</p><p>   作为一名理性的人，当你知道一个确切的好消息，这个好消息又在市面上进行了公开，于是你坚定地预测明天的股票会涨。现在很显然，你今天就应该买入，但如果人们都如你一般的理性，大家都会在今天买入，一直到股价不再便宜为止，那么明天怎么还会涨呢？这明显是个悖论。</p><p>   所以假如投资者都是理性的，那么就不会有任何的可预测空间，因为所有的可预测性都会在当下这一刻反映在股市的价格上，也就是所有的趋势在当下就会实现，剩下的就只有无法预料的那部分。</p><p>   因此，根据理性人假设，股价应该是根据不可预测的信息进行随机游走才对。</p><p>   事实上，我们知道还是有很多人，他们并不是那么理性，就像排队一样，如果都是理性人，你自然可以随便排在哪个队伍，因为保证一样长，但有些人就是数不清长短，所以股市奖赏的是那些更为理性的，更努力做研究的人（绝对不是更会看K线的人）。</p><h2 id="股市的理性"><a href="#股市的理性" class="headerlink" title="股市的理性"></a>股市的理性</h2><p>   假设阿里巴巴发行了100股股票，如果你持有1股，那么阿里巴巴今年赚了100亿，理应分给你1个亿。但是我们知道，有时候阿里巴巴可能不分红，并不是因为它把钱吞了，而是钱会拿去还银行贷款，拿去拓展新业务，只要公司整体估值上去了，那么显然给你的分红一样会反映在股价上，如果阿里巴巴对分红的使用是得当的，那么反映在股价上的收益会比现金分红更可观，是这样的道理。</p><p>   那么，我们买股票买的是什么，是判断这家公司未来会更值钱，就这么简单，不要相信其他的幻觉。</p><p>   但是，在现实操作中，有时候人们并不是想长期跟着公司一起前进，他们只想利用投资者的信息不对称来短期获利或者为了很多股票盈利以外的其他目的，那情况就变得复杂了。</p><p>   比如大家都知道某家公司不行，但追捧的人就是多，谁都想在泡沫破裂前捞上一笔；又比如明明知道股市有泡沫，但某些基金经理不愿意卖出的原因是，客户看着人家赚钱自己却空仓，就会将基金经理解雇，他们为了自己的饭碗而做出和理性不一样的行动。这些都会让股市变得更为复杂。</p><h2 id="博弈游戏（1）"><a href="#博弈游戏（1）" class="headerlink" title="博弈游戏（1）"></a>博弈游戏（1）</h2><p>   股市这样的游戏是属于人与人之间的游戏，我猜测你知道些什么，然后我根据你可能会出现的行为调整我的行为，而你也在进行着同样的过程。</p><p>   我们把这个过程叫做博弈。</p><p>   在德州扑克这样的游戏里，对方下小注究竟是牌小不敢下，想多看几张牌，还是牌太大，希望你跟牌，又或者仅仅是一次试探，试图得到你的情绪反馈？你必须猜测对方的意图，同时，不管你猜没猜到，你都得隐藏自己猜测的结果或者误导对方，以免被对方知道你在看到他的行为之后的想法。</p><p>   只要有人就有博弈，将军打仗需要博弈，军事家无一不是博弈的高手，而爱情游戏也需要博弈，谁能预测对方的行为和反应，谁就能稍胜一筹。</p><p>   最高明和最精彩的博弈，无一不是需要大的代价。比如仅仅把德州扑克当成是游戏，那么所有的博弈都将不起作用，哪怕是小赌注也不行，那些试图吓跑对手的都会被识破，因为不需要什么成本。只有某一次的下注额大到让你肝儿颤，才能体验最精彩的博弈过程，然而这往往也是赌徒倾家荡产的开始。</p><h2 id="博弈游戏（2）"><a href="#博弈游戏（2）" class="headerlink" title="博弈游戏（2）"></a>博弈游戏（2）</h2><p>   最后让我们来看一个博弈小游戏。</p><p>   一位教授拿着一个价值100元的东西进行拍卖，说班里同学谁出价最高就把这个东西给他，但前提是，出价第二名的钱要被无偿没收。你觉得抢到这件东西的人需要花费多少钱呢？</p><p>   一开始大家从1块钱开始，喊得很踊跃，但当升高到八九十的时候，渐渐就没人喊了，只剩两个人还在继续，直到100元到了，大家发现中计了，但这两个人只能硬着头皮继续往上喊，因为如果我101元买了东西，我亏了1元钱，但若是我不喊，99元就全没了，连一根毛都拿不到，最后两个人已经不是为了赚钱了，而是为了比谁损失得少，当然最后是教授赚得盆满钵满。</p><p>   这只是博弈的一个小小陷阱而已，事实上，拍卖还有很多变种，比如逆向拍卖，先喊一个高价，然后依次往下降，只要有人抢，就归他所有；比如一口价谈判，轮流对每个人玩“要么接受，要么拉倒”的游戏等。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   其实这本书后面还有三章，专门是写政府的，但由于跟前面的经济学知识并不十分搭调，且内容无特别的新意和实用性，暂且略去，关于政府跟经济之间的关系，我们之前的书里讲到过，之后我也还会在合适的书里给大家更为深入的解构。</p><p>   好，我们对全书进行一下简单总结：</p><p>   1、高价的原因不仅仅在于稀缺，还在于对人们的心理、行为习惯等的判断；</p><p>   2、羊毛出在羊身上，租金高是由于利用这块地能得到的收益足够大；</p><p>   3、对人群进行合理的标签化细分，把对价格敏感和不敏感的分成两部分进行收费，可以最大化利益；</p><p>   4、在一个完全市场里，价格就是真话。</p><p>   5、一个合理的税率会极大地增加经济的活力，最大化地减少对经济的破坏，同时也是非常难定的；</p><p>   6、能在金钱的范围内达成协作的，富人无论怎么利用金钱来达成都是合理的；</p><p>   7、造成负面外部效应的应该为此付费，而有正面外部效应的应该得到额外的补贴，不管这些费用和补贴是政府出的还是私人之间达成的协议；</p><p>   8、解决信息对称问题在任何领域都是大的机会，就是将“信任”造成的利润损失给抹平了；</p><p>   9、假如投资者都是理性的，那么就不会有任何的可预测空间，因为任何预测都会即时反映在当下的价格内。</p><p>   10、能够更准确地预料对方行为的一方，就是博弈中处于优势地位的一方。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;《卧底经济学 1》&lt;/blockquote&gt;
    
    </summary>
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/categories/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/tags/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>Object 源码分析</title>
    <link href="yanchongsheng.github.io/2018/04/19/Object%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>yanchongsheng.github.io/2018/04/19/Object 源码分析/</id>
    <published>2018-04-19T14:14:57.000Z</published>
    <updated>2018-05-17T10:50:06.789Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"> Object 源码分析 </blockquote><a id="more"></a><h2 id="Object-简介"><a href="#Object-简介" class="headerlink" title="Object 简介"></a>Object 简介</h2><p>Object 是所有其他类的父类，它里面的方法大多数是 native 方法。用 native 关键字修饰的方法是 Java 中的本地方法，一般是用 C/C++ 语言来实现。</p><h2 id="registerNatives-方法"><a href="#registerNatives-方法" class="headerlink" title="registerNatives 方法"></a>registerNatives 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    registerNatives();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用：将 Java 层的方法名和本地函数对应起来，方便执行引擎在执行字节码时根据这些对应关系表来调用 C/C++ 函数。函数的执行是在静态代码块中执行的，在类首次进行加载的时候执行。</p><h2 id="getClass-方法"><a href="#getClass-方法" class="headerlink" title="getClass 方法"></a>getClass 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure><p>作用：返回此 Object 的运行时类。返回的 Class 对象是由所表示类的 static synchronized 方法锁定的对象。理解：首先需要明白动态类型 和 静态类型，那么返回的这个 Class 其实就是某个对象的动态类型所表示的类的 静态同步方法锁定的对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">A a = <span class="keyword">new</span> C(); <span class="comment">// 对象 new C() 的静态类型是 A，动态类型是 C</span></span><br><span class="line">B b = (B)a; <span class="comment">// 引用 b 指向的还是 new C()，动态类型还是 C</span></span><br><span class="line">C c = (C)b; <span class="comment">// 动态类型还是 C</span></span><br><span class="line"></span><br><span class="line">那么 a.getClass()、b.getClass()、c.getClass() 返回的 Class 其实都是 xxx.xxx.xxx.C，这三个方法的返回值 即 Class</span><br><span class="line">对象，是由其所表示类  xxx.xxx.xxx.C 的 <span class="function"><span class="keyword">static</span> <span class="title">synchronized</span><span class="params">(<span class="keyword">this</span>)</span> 方法锁定的对象</span></span><br></pre></td></tr></table></figure></p><h2 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode 方法"></a>hashCode 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>作用：获得该对象的 hash 值，具体的 hash 算法由各个 JVM 厂商自己实现。</p><h2 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals 方法"></a>equals 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>作用：== 比较的就是对象的内存地址，默认比较的是两个对象的地址值，子类可以覆写该方法，定义自己的比较规则。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 覆写 equals 方法模板</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span> || getClass() != obj.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 其他逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是：在覆写 equals 方法的时候，一般需要同时覆写 hashCode 方法。</p><blockquote><p>hash 值不等，两个对象肯定不等。<br>hash 值相等，两个对象不一定相等。<br>equals 相等，hash 值肯定相当。<br>即 hash 值相等是 equals 相等的必要条件。所以，我们在覆写 equals 方法的时候，需要注意满足以上几点需求。</p></blockquote><h2 id="clone-方法"><a href="#clone-方法" class="headerlink" title="clone 方法"></a>clone 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure><p>关于实现 Cloneable 接口的说明：因为 Object 的 clone 方法有对对象类型的验证，所以如果你使用 clone 方法而该类没有实现 Cloneable 接口就会报错，但是我们可以通过覆写 clone 方法，绕开 Object 类中 clone 方法对对象类型的验证。即：方法中不写 super.clone() 方法。</p><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="notify-方法"><a href="#notify-方法" class="headerlink" title="notify 方法"></a>notify 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>在调用 notify() 之前，线程必须获得该对象的对象级别锁<br>执行完 notify() 方法后，不会马上释放锁，要直到退出 synchronized 代码块，当前线程才会释放锁<br>notify() 一次只随机通知一个线程进行唤醒</p></blockquote><h2 id="notifyAll-方法"><a href="#notifyAll-方法" class="headerlink" title="notifyAll 方法"></a>notifyAll 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>使所有正在等待池中等待同一共享资源的全部线程从等待状态退出，进入可运行状态 让它们竞争对象的锁，只有获得锁的线程才能进入就绪状态。</p><blockquote><p>每个锁对象有两个队列：就绪队列和阻塞队列<br>就绪队列：存储将要获得锁的线程<br>阻塞队列：存储被阻塞的线程</p></blockquote><h2 id="wait-三方法"><a href="#wait-三方法" class="headerlink" title="wait 三方法"></a>wait 三方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"nanosecond timeout value out of range"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        timeout++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wait(timeout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    wait(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wait方法会引起当前线程阻塞，直到另外一个线程在对应的对象上调用notify或者notifyAll()方法，或者达到了方法参数中指定的时间。 调用wait方法的当前线程一定要拥有对象的监视器锁。线程在没有被唤醒，中断或者时间耗尽的情况下仍然能够被唤醒，这叫做伪唤醒。虽然在实际中，这种情况很少发生，但是程序一定要测试这个能够唤醒线程的条件，并且在条件不满足时，线程继续等待。换言之，wait操作总是出现在循环中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>在对象被 GC 之前被调用（JVM 主动调用），你可以重写这个方法，然后在这个对象回收之前做某些动作，注意：不仅仅是释放资源，你可以做任何你想定义的操作。这个方法对于这个对象来说只能调用一次，明确其只能执行的一次的原理。该方法只是提供了在回收一个对象之前做某些操作。Object 的 finalize 方法默认是什么都没有做，如果子类需要在对象被回收时执行一些逻辑处理，则可以重写 finalize 方法。</p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://blog.csdn.net/a327369238/article/details/52490359" target="_blank" rel="noopener">Java源码解析(1) —— Object</a><br><a href="http://www.cnblogs.com/Qian123/p/5710533.html" target="_blank" rel="noopener">Java提高篇——对象克隆（复制）</a><br><a href="https://blog.csdn.net/benjaminlee1/article/details/72843713" target="_blank" rel="noopener">Java-Object类源码解析</a><br><a href="https://blog.csdn.net/wangyangzhizhou/article/details/73743876" target="_blank" rel="noopener">从JDK源码角度看Object</a><br><a href="https://blog.csdn.net/bbirdsky/article/details/55100512" target="_blank" rel="noopener">Object类源码分析</a><br><a href="https://blog.csdn.net/cs408/article/details/48930803" target="_blank" rel="noopener">Synchronized（对象锁）和Static Synchronized（类锁）的区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt; Object 源码分析 &lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="yanchongsheng.github.io/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 基础" scheme="yanchongsheng.github.io/tags/Java-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="yanchongsheng.github.io/2018/04/16/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>yanchongsheng.github.io/2018/04/16/观察者模式/</id>
    <published>2018-04-16T12:52:59.000Z</published>
    <updated>2018-04-24T01:42:39.040Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"> 设计模式 之 观察者模式 </blockquote><br>观察者真正观察的不是 Subject 类中改变的方法，而是调用 Subject 类中这个改变方法 的对象的动作。比如拍卖会，拍卖师观察最高标价，然后通知给其他竞价者竞价。在这个例子中其他竞价者是观察者，拍卖师是被观察者。但拍卖师通知其他竞价者这个动作 是由有人出更高价这个动作触发的。所以观察者其实观察的是：是否有人出了更高的价格，而非拍卖师通知的这个动作。即有人出更高的价格这个动作触发了拍卖师通知其他竞价者价格发生了改变。<br><a id="more"></a></p><h2 id="观察者模式使用场景"><a href="#观察者模式使用场景" class="headerlink" title="观察者模式使用场景"></a>观察者模式使用场景</h2><p>当对象间存在一对多关系时，则可以考虑使用观察者模式。例如：当一个对象被修改时，则会 主动 通知它的依赖对象，注意这里是 被依赖对象 主动通知 依赖对象，并且依赖对象被自动更新。</p><h2 id="实现观察者模式"><a href="#实现观察者模式" class="headerlink" title="实现观察者模式"></a>实现观察者模式</h2><p>使用该模式时牵扯三个类，一个是观察者，一个是被观察对象，一个是调用者(调用者可以是被观察对象本身调用，更多情况是一个具体的业务类)。我们用 Subject 表示被观察者、Observer 表示观察者 和 Client 表示调用者。Subject 对象带有绑定观察者到 被观察者 和从 被观察者 解绑观察者的方法。例如：A 类种执行 save 方法的时候，B、C 类打印一句话。那么 A 就是 Subject，A 类中维护了一个观察者的 List，并且提供了往这个 List 添加和删除观察者的 方法，如果A执行了 save 方法，则遍历 List 主动通知每一个观察者即 B 和 C，此处 B、C就相当于 Observer。Client 负责调用被观察者提供的方法，即维护被观察者中 观察者 List 和调用可以触发被观察改变的方法。</p><p>由于调用 Subject 类中触发改变的方法的 一般都是具体的业务类 Client 调用的，很少主题类自己调用自己的，所以观察者观察的本质其实是 Client 类中调用 Subject 中 触发改变方法 的这个动作。所以 Subject 中提供的 addObserver 和 removeObserver 方法，其本质就是绑定或移除观察者到 Client 对象上。尽管代码表象上看到的是 add 和 remove 观察者 到 Subject 类中的 List 上，其实是 add 和 remove 观察者到 Client 上。观察者观察 Client 的某个动作，而 Client 在执行这个动作以后，Subject 就会主动通知观察者，即调用观察者中的 update 方法，相当于观察者被自动更新了。<b>以下的代码给人看起来是：观察者在观察 Subject 类种的 setMsg 方法，但细想观察者真正观察的其实是 具体某个业务对象调用 setMsg 方法这个动作，而不是 setMsg 这个方法，这才是观察者真正观察的地方。</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">观察者接口：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第一个观察者：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">F_Observer</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(F_Observer.class.getName() + <span class="string">" : "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第二个观察者：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">S_Observer</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(S_Observer.class.getName() + <span class="string">" : "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第三个观察者：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T_Observer</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(T_Observer.class.getName() + <span class="string">" : "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">被观察者：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();    <span class="comment">//状态改变    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;        </span><br><span class="line">        notifyAll(msg);    </span><br><span class="line">    &#125;   </span><br><span class="line">     <span class="comment">//订阅    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAttach</span><span class="params">(Observer observer)</span> </span>&#123;        </span><br><span class="line">        observers.add(observer);    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//通知所有订阅的观察者    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">(String msg)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;            </span><br><span class="line">            observer.update(msg);        </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用方法：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        F_Observer fObserver = <span class="keyword">new</span> F_Observer();        </span><br><span class="line">        S_Observer sObserver = <span class="keyword">new</span> S_Observer();        </span><br><span class="line">        T_Observer tObserver = <span class="keyword">new</span> T_Observer();</span><br><span class="line">                        </span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();        </span><br><span class="line">        subject.addAttach(fObserver);        </span><br><span class="line">        subject.addAttach(sObserver);        </span><br><span class="line">        subject.addAttach(tObserver);                </span><br><span class="line">        subject.setMsg(<span class="string">"msg change"</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用-Java-SE-提供的类库实现观察者模式"><a href="#利用-Java-SE-提供的类库实现观察者模式" class="headerlink" title="利用 Java SE 提供的类库实现观察者模式"></a>利用 Java SE 提供的类库实现观察者模式</h2><p>Java 对观察者模式支持类为 Observable 和 Observer，位于 java.util 包中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被观察者类，继承了 Observable 表示该类可被观察</span></span><br><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">extends</span> <span class="title">Observable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 价格发生了变化</span></span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="comment">// 将 Observable 类中的 changed 设置为 true，表示发生了改变</span></span><br><span class="line">        <span class="keyword">super</span>.setChanged();</span><br><span class="line">        <span class="comment">// 这个方法被重载了，可以传参也可以不传，参数表示要通知的内容</span></span><br><span class="line">        <span class="keyword">super</span>.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JDK 里面 Observable 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 之所以使用 Vector 而不使用 List，是因为多线程操作时，Vector 是线程安全的，而 List 则是不安全的</span></span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; obs;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每个子类的 Vector 都是一个新的 Vector 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obs = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向 Vector 中添加观察者    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">// 这个判断让我写，估计想不到这个点    </span></span><br><span class="line">        <span class="keyword">if</span> (!obs.contains(o)) &#123;</span><br><span class="line">            obs.addElement(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        obs.removeElement(o);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obs.removeAllElements();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        changed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">clearChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        changed = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObservers(<span class="keyword">null</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object arg)</span> </span>&#123;</span><br><span class="line">        Object[] arrLocal;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!changed)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            arrLocal = obs.toArray();</span><br><span class="line">            clearChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">            ((Observer)arrLocal[i]).update(<span class="keyword">this</span>, arg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">hasChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> changed;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">countObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obs.size();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;     </span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者实现了 Observer 接口，并且复写了接口中的 update 方法，表示</span></span><br><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"><span class="keyword">import</span> java.util.Observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer01</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        System.out.println(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Observer01 o = <span class="keyword">new</span> Observer01();</span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">        </span><br><span class="line">        subject.addObserver(o);</span><br><span class="line">        subject.setPrice(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Observable 和 Observer 之间是依赖关系，即 Observer 的方法依赖于 Observable 类。但是也存在关联关系，即 Observable 的子类总存在 Vector<observer>，表明了 Observable 和 Observer 之间的对应关系，所以是关联关系。所以两者之间两种关系都存在。</observer></p><h2 id="使用观察者模式的一些注意事项"><a href="#使用观察者模式的一些注意事项" class="headerlink" title="使用观察者模式的一些注意事项"></a>使用观察者模式的一些注意事项</h2><p>观察者和被观察者是抽象耦合的，他们之间是关联关系，引用类为被观察者，被引用类为观察者，即 UML 类图中，实线箭头由被观察者指向观察者，即被观察者需要知道哪些观察者关注了它，它在改变的时候好挨个主动去通知观察者。代码表现为被观察者类中有观察者类的引用。也是依赖关系，Observer 的方法依赖于 Observable 类。注意观察者和被观察者之间可能会存在循环依赖，该问题可能导致系统崩溃。</p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="http://www.runoob.com/design-pattern/observer-pattern.html" target="_blank" rel="noopener">极客学院-观察者模式</a><br><a href="http://wiki.jikexueyuan.com/project/java-design-pattern/observer-pattern.html" target="_blank" rel="noopener">菜鸟教程-观察者模式</a><br><a href="https://blog.csdn.net/u012250875/article/details/77747878" target="_blank" rel="noopener">Observer和Observable详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt; 设计模式 之 观察者模式 &lt;/blockquote&gt;&lt;br&gt;观察者真正观察的不是 Subject 类中改变的方法，而是调用 Subject 类中这个改变方法 的对象的动作。比如拍卖会，拍卖师观察最高标价，然后通知给其他竞价者竞价。在这个例子中其他竞价者是观察者，拍卖师是被观察者。但拍卖师通知其他竞价者这个动作 是由有人出更高价这个动作触发的。所以观察者其实观察的是：是否有人出了更高的价格，而非拍卖师通知的这个动作。即有人出更高的价格这个动作触发了拍卖师通知其他竞价者价格发生了改变。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="yanchongsheng.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="yanchongsheng.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>超越智商</title>
    <link href="yanchongsheng.github.io/2018/04/15/%E8%B6%85%E8%B6%8A%E6%99%BA%E5%95%86/"/>
    <id>yanchongsheng.github.io/2018/04/15/超越智商/</id>
    <published>2018-04-15T12:01:14.000Z</published>
    <updated>2018-04-17T10:06:01.598Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">《超越智商——为什么聪明人也会做蠢事》</blockquote><a id="more"></a><h2 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h2><h2 id="超越智商"><a href="#超越智商" class="headerlink" title="超越智商"></a>超越智商</h2><p>——为什么聪明人也会做蠢事</p><p>原名：What Intelligence Tests Miss</p><p>The Psychology of Rational Thought</p><p>  作者：【加】基思•斯坦诺维奇</p><p>译者：张斌</p><p>审校：阳志平</p><p>出版社：机械工业出版社</p><p>本版版次：2016年8月第1版</p><p>ISBN：978-7-111-50927-1</p><h2 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h2><p>   我家里有两本书，每本分别有两版，其中一本是《超越智商》，另一本以后会讲到。</p><p>   基思•斯坦诺维奇的著作对我有不小的影响，《超越智商》就是其中之一。本书单论字数并不多，内容又很聚合，很多人会以为读完很快，其实并不是这样。</p><p>   可能是内容的原因，也可能是翻译的原因，书里的很多知识点要深入挖掘还是需要费点功夫，尤其是对本身并没有这方面概念的读者来说，尤其费劲，但一旦将其通读、读通之后，它会给你很多反思，不要小看这些反思，只要能在判断和决策的时候蹦出几个，就已经受益无穷，幸好我们前面已经学完了《思考，快与慢》，这对学习这本书会非常有帮助。</p><p>   接下来，我就带着你们来读一读这本关于心智、认知、智商的好书，如有原书需求，请自行购买。</p><h2 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h2><p>   经过了一周的休整，我们又要开启烧脑书的节奏了，今天是第一天，我们来看看理性和智力这两者之间存在着多么大的鸿沟，为什么智力测验测出的智力数字明明还是比较靠谱的，但却对现实生活不一定是最有用的，那最有用的到底是什么呢？</p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>   每个人的判断和决策能力都存在着差异，由于判断和决策的正确性基本都由理性决定，那么这就意味着每个人的理性程度是有差异的。</p><p>   然而，智力测验中我们却看不到有对这些重要的思维属性的评估，或许，智力测验的设计者们认为能在智力测验中拿高分就意味着他们有较强的分析事物的能力，而这种分析能力可以帮助他们更好地判断和决策。然而，理性这种特质，或者说如何抑制感性的本能冲动的能力，却并没有在智力测验中得到体现。</p><p>   我们在前面好几本书里都提到了“聪明人做蠢事”的问题，其实这就很好理解了，聪明这里代表智力测验的分数高，蠢事主要是决策层面的，跟理性的关系较大，所以对于智商人们有不同的定义：狭义的智商自然就是指智力测验里的神经智力，而广义的智商指的是总能利用正确的决策让自己获得最大的长远利益和总利益，这里面就把理性给包含进去了。</p><p>   本书重点讨论的是智力测验是否应该同时测量理性的问题，为什么理性思维是跟目前的智商测验里的内容同等甚至更为重要的存在。</p><h2 id="理性障碍"><a href="#理性障碍" class="headerlink" title="理性障碍"></a>理性障碍</h2><p>   乔治•W•布什总统的智力一直是人们所津津乐道的话题，很多人觉得他思维混乱，对事物的认知停留在小学生水平，但他的智商分数却大概能到120左右，这是典型的中等偏上的智力水准。</p><p>   其实，一个人拥有怠于思考、缺乏认知、有着确信偏差以及常常前后矛盾这样的特质跟他同时拥有高智商是没有什么太大冲突的，前面的这些特质可以被称为理性障碍，理性障碍和智力障碍是完全不同的两个层面的东西。</p><p>   事实上，目前在全世界的范围，大家都渐渐认识到了理性的重要性，你或许不会让一个智商90的医生给你做手术，但你一样不想让一个理商（RQ）90的人做手术，做法官，立法，或者帮助你理财。</p><p>   在理性障碍的例子里，或许布什并不是最典型的例子，因为理性障碍最典型的是高智商、低理性，而人们会对布什的智力测验成绩感到诧异或者是怀疑，说明在人们心目中，他并非高智商，最典型的例子就是那些人们都公认为是高智商的，最终却常常做出非常不理智行为的那些，这才让人们感到无比的不可思议。</p><h2 id="买股票"><a href="#买股票" class="headerlink" title="买股票"></a>买股票</h2><p>   或许买股票应该算是最最典型的高智商人士未必玩得转的领域了，历史上有那么多的高智商人士，包括牛顿、保罗斯等在数学和物理学届有着极高成就的神经智力方面突出的牛人，都没能玩转股票。</p><p>   以保罗斯为例，虽然当他亏损之后，有越来越多的迹象表明该卖出而非买入，但他还是选择继续购买，最后输光裤衩不得不离场。</p><p>   很多人都认为这些公认的聪明人当然会做出比常人更聪明的决定，但事实上，聪明且愚蠢的现象在我们身边就比比皆是，不信的话，你可以翻翻你的通讯录，随意就能在朋友堆里找到他们。</p><h2 id="聪明的含义"><a href="#聪明的含义" class="headerlink" title="聪明的含义"></a>聪明的含义</h2><p>   当我们说到某人很聪明的时候，我们在说什么？我们中文里常常还有小聪明和大聪明之分，小聪明常常指的是思维敏捷、能说会道、有创意等，而大聪明常常指的是通晓事物发展运行的规律，知道怎么做对自己最好，比如拥有高执行力、毅力、成熟稳重等品质，他们常常会花笨功夫，也就是我们常说的——大智若愚。</p><p>   所以中文的聪明有着很多的意思，既可以指纯智力，也可以指对事物的反应，还可以指智慧（甚至是卑鄙），而我们所说的理性，则更多的被包含在智慧里面，很可惜，包含理性的聪明恰恰是我们平时说的最少的一类，因此，后文指的聪明一般是智力分数高的那部分人。</p><h2 id="什么是理性"><a href="#什么是理性" class="headerlink" title="什么是理性"></a>什么是理性</h2><p>   关于理性有很多定义，那么究竟什么才叫理性呢？</p><p>   目前认知学上通常将理性分为两种，一种叫工具理性，一种叫知识理性。</p><p>   什么叫工具理性？就是能够利用手上的所有工具最优化实现目标的能力，这个工具也可以被叫作资源，包括除你以外的所有人和物。</p><p>   我们可以看到，拥有完全工具理性能力的人是很可怕的，因为这意味着身边所有的人、事、物都是他的利用对象，从学术的角度讲，这是达成目标最好的状态，但我们的私塾不止讲认知，还有别的东西在里面，就是“应该是怎么样，怎么样可以达成目标，但最终选择权在你自己手里”，因此我不是非常建议成为完全工具理性的人。</p><p>   那么什么叫知识理性呢？知识理性指的是你的认知跟世界的真实样子之间的一致程度。也就是你看世界是什么样子的，而它的真实面目是什么样子的（给我2017年7月下旬预售的新书《认知突围》打个硬广）。</p><p>   这个层面的理性可以跟人们的认知能力挂钩，理性的程度、对底层知识的解剖程度决定了认知的高度。这并不是只有高智商能完成的事情，是所有人都可习得的、对生活起着决定性作用的能力。</p><h2 id="类型一和类型二"><a href="#类型一和类型二" class="headerlink" title="类型一和类型二"></a>类型一和类型二</h2><p>   说到理性，就逃不开类型一和类型二，怎么这么熟悉？对，就是我们在《思考，快与慢》里讲的系统一和系统二，只是不同作者不同译者的缘故。</p><p>   类型一可以多任务同时进行，也被称为平行式加工，正如我们在上一本书里举例的，边洗澡，边哼歌等；类型二的加工则只能在同一时间处理一个或极少的几个任务，如果是高速运行的，或许只能同时处理一个任务，又被称为序列加工，就是得挨个儿排序处理，比如你不能在算56*93的同时在陌生的地方开车找一家只知道名字的餐厅。</p><p>   类型一反应快速，但常常以牺牲准确率为代价，当我们需要对事关重大的情境进行风险评估时，我们肯定不会希望用欠缺准确率的判断方式，所以，我们希望类型二可以跳出来压制类型一的自动加工。</p><p>   压制的顺序是什么呢？</p><p>   首先是中断系统一的能力，养成反驳自己的习惯，为什么我会这么想，我这么想究竟有没有问题？</p><p>   其次是假设性推理，这个很重要，用大白话说就是找个小人儿替你去死的能力。我这么干会有什么后果，一步步推理下去，会被人喷死，死的是小人儿，不是你，然后你再想，我那么干会有什么后果，一步步推理下去，会被人打死，死的也是小人儿。</p><p>   这种能力越强，在短时间内可以创造出来的小人儿越多，推导越正确，最后的选择就会越靠谱。</p><h2 id="思维倾向"><a href="#思维倾向" class="headerlink" title="思维倾向"></a>思维倾向</h2><p>   每个人的思维都是被倾向牵着走的，有没有倾向决定了会不会容易往这方面去考虑，有没有类似的习惯。</p><p>   当我们要做一个强类型二的判断和决策时，怎样能更接近正确呢？我们需要有收集更多信息的倾向、寻求多元观点和论据的倾向、发散思维的倾向、根据已有证据一步步修正已有观点的倾向、寻找细微差别以避免绝对化的倾向等等，这些都是理性思维中最重要的部分，也是做出正确决策所依赖的重要部分。</p><p>   然而智力测验评估出来的思维能力却不包含以上任意一种，或许能测出的是神经智力的“上限”，却并不负责测出个体有没有高层次思维活动的倾向。</p><h2 id="今日导言-1"><a href="#今日导言-1" class="headerlink" title="今日导言"></a>今日导言</h2><p>   知道了理性的重要性还不够，还得知道我们会在什么地方犯错，犯怎样的错，以及为什么会犯错。</p><p>   很显然，人生的所有事情并非同等重要，在某些地方犯错或者不想用脑，完全没有问题，但在另一些地方，可能失去的是改变的机会。</p><h2 id="反省心智"><a href="#反省心智" class="headerlink" title="反省心智"></a>反省心智</h2><p>   理性是为了最大化目标实现，而目标实现的过程则是自我认知和一系列证据的最优化契合。在这个过程中，最重要的一种心智，就是反省心智。</p><p>   反省心智是一种根据现有证据对自己的固有观念进行校准的心智能力，这个校准有一个原则，就是如果证据是模棱两可的，那么我们就只能假设，而不能确定，很多人都玩过数独，如果在一个格子里有两种可能，那么你就应该把其中一种写在右上角，而不是直接填进去。接着在一个个排除错误证据之后，只有唯一确定的，才能填入。</p><p>   很多人的理性程度较低，其实是反省心智的能力较低，我在读者群里经常见到这样的人，当我写到跟他所处群体的利益有利的观点时，他能表现得非常理性，但当相反时，他就表现得像个傻帽。</p><p>   这类人就是属于反省心智中的无偏差思维较低的人。什么是无偏差思维？就是不以己方立场改变理性思考方式的思维能力，如果你对照之后发现自己正是这样，现在发现还不晚。</p><p>   顺便说一下，无偏差思维跟智力的相关度，为0。</p><h2 id="过度自信"><a href="#过度自信" class="headerlink" title="过度自信"></a>过度自信</h2><p>   关于反省心智的障碍，表现得最明显的就是股票，对，又是股票，为什么我老拿股票做例子，因为证券市场是人性博弈的典型市场，而股票又是大家熟悉的事物，所以拿来做例子。</p><p>   在股票的交易中，我们很容易就会表现出过度自信。</p><p>   想一想，我们每一次的交易行为肯定都是认为收益期望为正才会做出的，也就是成功率是大于50%的，但为什么最终我们都亏损了呢？而每一次我们自认为得到了足够多的信息以后，再战，再输，反而是那些傻乎乎的一直持有的人却赢得了最大的利益，那些自以为可以在每一次小波动中获益的几乎都赔光了，纵观历史，99.9999%都是这样。</p><p>   这种毛病在“聪明人”身上尤其会有，因为他们总认为股市是聪明人打败傻瓜的地方，然而股市却是理性打败情绪的地方。</p><h2 id="过度反应"><a href="#过度反应" class="headerlink" title="过度反应"></a>过度反应</h2><p>   人们倾向于寻找规律，哪怕是完全随机的地方，也倾向于寻找出规律和意义，因为人们讨厌随机性，随机性意味着未来完全不可预测，人们不喜欢失去控制的感觉。</p><p>   但有一些地方就是完全随机的，比如说彩票，很多人试图在彩票中寻找规律和意义，显然他们终将一无所获，而股市也是一样，股市的理论会多得多，什么波浪理论等，但除了作弊，这些图形对于预测是毫无意义的，可能很多人并不赞同，因为他们倾向于往后看。不过那些研究出形形色色理论的大师们，自己却几乎没在证券市场上留下什么善终的战绩。</p><p>   承认随机而不是对每一次随机事件进行过度反应和解读，可以降低投资者交易的频度，我们之前的书和本书都说过，降低交易频度是有效的，因为可以减少心理风险，避免被“损失厌恶”的心态影响了决策。</p><h2 id="认知吝啬"><a href="#认知吝啬" class="headerlink" title="认知吝啬"></a>认知吝啬</h2><p>   每个人都有想减轻负担的倾向，尤其是认知负担，试图让自己处理更少的信息，让思想更轻松，然而就是这种想法让我们在认知上成为了吝啬鬼。</p><p>   为什么人类会有这样的倾向呢？因为人类就是被设定成这样的，我们的进化过程造就了我们的非理性。</p><p>   要知道，人类在恶劣的条件下进化，最重要的并非理性，而是适应，怎样最适应环境，人类的基因里就保留着那些东西，比如倾向于吃高热量的食品。为什么明知道多吃对身体不好，还是想吃呢，因为以前环境一直很恶劣，人体的设定是为了尽可能地应对没有食物的时候，所以毫无顾忌地储存脂肪几乎一直是正确的。</p><p>   再比如说羊群效应，我们为什么总是容易跟风，那是因为跟群体在一起行动，存活概率总会更大一些，那个时候个体差异还没像现在这么大。</p><p>   自然选择不在乎事实和真相，它只关心是否能够繁殖成功。</p><h2 id="能不用就不用"><a href="#能不用就不用" class="headerlink" title="能不用就不用"></a>能不用就不用</h2><p>   大卫•赫尔曾经说，人类大脑所遵循的准则是：能不用，则不用，该用脑时也不用。当我们的眼前出现一个待解的问题，被要求进行严谨的推理时，大部分人都可以做到，但绝大部分人在遇到问题时都不会自动自发地应用自己的这项能力。</p><p>   认知吝啬这件事在生动信息和鲜活信息上表现得尤其明显，因为生动的信息和鲜活的信息可以让大脑远离枯燥和艰涩的推理，于是大脑自动会寻找捷径，尤其善于根据鲜活信息或者根据情绪做出判断。</p><p>   2001年的9•11事件后，人们由于害怕飞机失事，导致选择飞机出行的人数骤减，但是大家都知道，汽车是比飞机危险得多的，果然，仅在2001年的最后一个月里，由于放弃飞机选择驾车而增加的死亡人数就超过了300人。研究小组用更直观的数据告诉你，如果让飞机跟汽车的危险程度相同，9•11事件将每月都会发生一次！</p><p>   再比如，研究发现，当人们使用数额是本国货币若干倍的外币买东西时，会花得更少，比如用日元去买东西，总觉得3000块10000块拿出去是很多钱，但其实没那么多；而用欧元买东西时，总觉得几十块上百块似乎并没有什么，但其实已经不少了，所以人们用欧元容易花得更多。</p><p>   这些汇率人们知道吗？知道，每个人都知道，但人们就是懒的用大脑，偶尔会突然理性一下，但大多数时候理性的阀门是关闭的，能不用就不用。</p><h2 id="该用的时候"><a href="#该用的时候" class="headerlink" title="该用的时候"></a>该用的时候</h2><p>   大脑很懒。事实上，它之所以懒，是有道理的，因为我们生活中绝大部分的事情都不需要用到深度认知，仅仅依赖根据启发就自动加工的模式就可以了。</p><p>   比如洗衣服、熨衣服、拖地，你能做得比其他人更出色吗？相信每个人只要做上几天都能一样出色，你没有机会比别人做得更好，况且就算你做得一点也不好，又能怎么样呢？但如果你因为做了某些事情，让你的资产翻了100倍，这就能真正改变你的生活状态和质量。</p><p>   所以人的一生中，就是有一些真正重要的事情的，你可以在平常的时候做一个认知吝啬的人，但如果你养成了这样的习惯，就可能会在真正重要的事情里，错过改变生活的机会。</p><p>   很多人在小的时候，父母会调侃说，连饭都不会做，看你以后怎么办。等你长大以后你就会发现，这只是一个微不足道的问题，而当你开始尝试去做几次以后，你会发现，这甚至不是问题，哪怕你并不打算尝试，也有更好的解决之道，所以，一定要清楚什么事情是值得我们再费脑也不为过的，什么事情是可以让我们的大脑进行暂时放松的。</p><h2 id="今日导言-2"><a href="#今日导言-2" class="headerlink" title="今日导言"></a>今日导言</h2><p>   我们昨天阐述了关于认知吝啬的事情，认知吝啬是由于我们的大脑中存有一个个的框架，当我们遇到与框架大概一致的东西时，大脑就会开启“能不用就不用”的模式，直接拿起框架就用，今天让我们看看不同高度的框架，会对你的决策产生什么样的影响。</p><h2 id="认知框架（1）"><a href="#认知框架（1）" class="headerlink" title="认知框架（1）"></a>认知框架（1）</h2><p>   每个人都有属于自己的认知框架，有的人的认知框架是一些本质化的、底层的东西，就更容易分清楚什么东西事实上是怎么一回事；有的人的认知框架是一些表层化的现象，这样当换一个说法的时候，他们竟然会得出不一样的结论。</p><p>   比如生两个孩子是正常的，少生一个孩子，需要多交1000块的税，那么对于同样没生孩子的两个家庭，一个年收入20万的家庭多交2000块和一个年收入1万的家庭多交2000块，这是否合理呢？</p><p>   很多人本能地认为不合理，因为穷人收入一共只有这么点，也要罚同样多的钱，这太残忍了，应该按照比例才对。</p><p>   请大家记住自己刚才的结论。</p><p>   现在我们换个说法，假如不生孩子是正常的，那么每多生一个孩子，就能减税1000，既然上面的说法很多人认为不合理，也就是说穷人和富人不应该增减税的绝对值，而应该按照比例，那么富人多生一个孩子就应该减更多的税不是吗？生两个孩子就更多了。</p><p>   很多人又跳出来了，凭什么，富人家的孩子多生一个凭什么能减更多税？</p><p>   有没有发现，上下其实是一个问题，但很多人考虑问题丝毫不会从公平性出发，对他们来说，“富人就该吃亏”是他们的认知框架，但当你这么说的时候，他们往往拒绝承认。</p><h2 id="认知框架（2）"><a href="#认知框架（2）" class="headerlink" title="认知框架（2）"></a>认知框架（2）</h2><p>   看完上面这个自己也没意识到的框架以后，是不是很吃惊：原来我竟然是一个这样的人。对，你就是这样的人，你认为自己有自主意识吗？你对穷人更有同情心？其实只是被你的框架控制着而已。</p><p>   从《思考，快与慢》中，我们也看到过很多个这样的例子，很多时候只要换一种说法，我们中的大部分人就会转换自己的态度，哪怕明明是一回事。这就说明我们的认知远远达不到要求，那些提出问题的人，也就是设置框架给你的人，才是控制你的思想、言论以及行为的人。</p><p>   不信吗？再来看一个。</p><p>   研究者将等待器官移植的患者按照病情的严重程度从1到200排序，但是只有100个器官，很多人说，那就碰运气，从1到100吧，谁排前面谁受益。</p><p>   但现在如果我将1到100称为1组，将101到200称为2组，很多人就不愿意“放弃”2组。这中间发生了什么？什么也没有，换个称呼而已，仅仅是“组”这个字眼就能让人们的框架系统起作用，做出完全不一样的决定。</p><h2 id="认知框架（3）"><a href="#认知框架（3）" class="headerlink" title="认知框架（3）"></a>认知框架（3）</h2><p>   认知框架有点像我们所说的心理账户，比如一个人爱买衣服，她在买衣服的这个心理账户里放的钱就多，你要说她很会花钱？那倒不一定，她在吃的方面可能很节俭，在住的方面也可能很节俭，在旅行方面也可能很节俭。</p><p>   人们的心理账户就像抽屉或者是口袋，是互相隔离并不互通的，所以不能笼统地说一个人很会花钱或者是很节俭，仅仅是心理账户的不同而已，一个处处都很节俭，计较一毛两毛的老太太，在购买保健品的时候拿出一万两万可能连眼睛都不眨一下。</p><p>   认知框架也是一样，每一个字眼在人们的心目中所代表的含义都是不同的，我们在昨天就说了，大脑是能不用就不用的，因为闲置代表着有空余进程随时可应对突发状况，因此人们通常没有那么多时间去研究整体，光凭字眼就直接拉开抽屉把对应的情绪给翻出来了。</p><p>   比如有一个实验是说，有两组被试都拿到了500元钱，对一组说是“额外补贴”，对另一组说是“学费退款”，结果拿到额外补贴的那组很快就将这笔钱花完了，甚至是超支，另一组则并没有。</p><p>   仅仅是一个“退”字，就让人们打开另一个抽屉，人们会认为这笔钱本就是从我地方拿走的，而“额外”则让人们默认为是新增部分，是“飞来横财”，因此花着不心疼。</p><p>   这在赌徒中很常见，赌徒倾向于挥霍赢来的钱，是由于在他的认知框架中，这笔钱是意外之财，却忽略了概率因素的主导下，他会有同等的时候是亏损的，因此哪怕他参与的是一个50对50的赌博游戏，口袋里的钱也会少得比不赌时候更快。</p><h2 id="利用认知框架"><a href="#利用认知框架" class="headerlink" title="利用认知框架"></a>利用认知框架</h2><p>   正因为人们有那么多的表层框架，而不是底层知识的框架，有心人才有机会利用这种特性达到自己的目的。</p><p>   比如如何表述现金和刷卡支付之间的手续费差额，如果使用“刷卡将收取额外费用”的语句，人们在对该信息进行编码的时候，就会放入损失框架中，而使用“现金消费可享有折扣优惠”，人们则会将其放入收益框架中。</p><p>   很多人会认为，对于这种小伎俩，聪明人不会上当，然而事实却并不是这样，聪明人有着自己的认知框架，我们第一天就说了，理性跟聪明并不能划上等号，只要这个“聪明人”使用的是较为表层的框架，那么他一样会常常“中招”。</p><p>   换言之，聪明人只有被告知这是一道测试，或者被告知要怎么做的前提下，他才有可能比普通人表现得更好，其余时候，他的聪明程度还是会受到自我的认知框架影响。</p><p>   因此，如何让自己的认知框架变得更为底层，变得更为本质化，是比聪明这种特质重要得多的事情。</p><h2 id="我方立场"><a href="#我方立场" class="headerlink" title="我方立场"></a>我方立场</h2><p>   我们在前面好几本书里都提到过类似的观点，即大脑会以最适合我们的方式去解释问题，而不是我们希望的所谓反映和评价“客观事实”。</p><p>   比如同样的一个事实，研究反映日本食品在中国未通过检验检疫标准的有90%，我国正考虑对日本食品颁布禁令，支持的中国人可能有99%以上；而研究反映中国食品在日本未通过检验检疫标准的有90%，日本正考虑对中国食品颁布禁令，支持的中国人或许只有60%或者更低。有人会猜测日本是否故意找个借口刁难中国？但他们绝对不会认为在第一个例子里中国会故意刁难日本。更有甚者，会直接叫嚣，我们也禁售他们的所有东西，给他们一点颜色看看。</p><p>   我方立场偏差是一个非常显著的事实，就像我们要做一个实验，如果我们事先带着自己的观点，那么当实验结果跟我们的观点不一致时，我们的智商会突然上线，发现更多实验设计上的漏洞；而当实验结果跟我们的观点一致时，我们的智商就不太管用了。这个有点类似于证实偏差。</p><p>   站在自己的对立面想问题是困难的，因为很耗费认知资源，但我们必须知晓，尽量控制我方立场加工带来的偏见未必可以完全消除认知吝啬的现象，至少可以减少一点非理性的认知和决策。</p><h2 id="过度自信（twice）"><a href="#过度自信（twice）" class="headerlink" title="过度自信（twice）"></a>过度自信（twice）</h2><p>   由于人人都在行动中不断根据外界的反馈修正自己的认知框架，那么其实在每个人的心里，自己的认知框架几乎就总是正确的，因为这是他们根据外界反馈做出的自认为的最优反应。</p><p>   而事实上呢，我们都知道能够用底层化的思维去掉现象看到本质的人寥寥无几，也就是说，几乎所有人都有过度自信的倾向，而绝大部分人在过度的度上无可避免地已经到达离谱的程度。</p><p>   关于过度自信将导致的后果最好的例子就是试图控制随机事件，彩票，我们举过N次的例子，所有研究走势的人无一例外都是对随机事件的认知程度严重低下的人，而股市也是如此，研究对107位伦敦的投资银行交易员进行了测试，发现那些更愿意相信自己的某一行为可以对一个即时变化的指标产生影响的交易员，年度收益就会越少，这种过度自信的幻觉每增加一个标准差，平均年收益就会少58000英镑。</p><p>   所以，不要觉得过度自信无所谓，不止是股市，很多时候你的认知程度都在不知不觉中跟你的金钱挂着钩。</p><h2 id="今日导言-3"><a href="#今日导言-3" class="headerlink" title="今日导言"></a>今日导言</h2><p>   应用直觉是人类的本能，然而很多人是有使自己理性的能力的，为什么有理性的能力却不应用理性呢？这是一件让人很沮丧的事情。不过我知道精通某些学科可以让人更加理性，比如说概率学。</p><h2 id="直觉、智商和理性"><a href="#直觉、智商和理性" class="headerlink" title="直觉、智商和理性"></a>直觉、智商和理性</h2><p>   在前面的书中我们大概都知道，直觉这种东西虽然快速，但准确度大部分时候都不太高，比如有一个实验是说，当你拿到红色球的时候，可以得到100块钱的奖励。下面两种方式让你选一种。</p><p>   1、在9个白球1个红球的袋子里拿；</p><p>   2、在92个白球8个红球的袋子里拿。</p><p>   我们平时说的“智商正常”的人肯定会选择第一种，因为10%的概率大于8%，人人都会算，但事实上却是有更多人选择第二种，当实验者问为什么的时候，他们显得有点别扭，其中一位说：“我会算概率，但第二种里面就是有更多的红球，尽管白球也更多。”</p><p>   这种别扭就是认知失调，当直觉和认知明显相悖时，选择直觉让人感觉很困难，但有很多人依然只愿意相信直觉，所以下次不能再说“智商正常”的肯定会选择什么，我们多次提到过，智商和理性完全不是一回事儿。</p><h2 id="拒绝本能"><a href="#拒绝本能" class="headerlink" title="拒绝本能"></a>拒绝本能</h2><p>   要拒绝本能冲动是一件非常困难的事，有时候并不是我们只会用本能思考，而是在想了又想之后，还是败给了本能的冲动。</p><p>   在前面的书中我们说过一个方法，是将本能的利益和理性的利益调成一致，这样当我们遵循本能行事时，就可以获得与理性行事时相同的利益。</p><p>   看看很容易，但其实这种方式是需要精巧的机制设计的，然而有时候我们想不到这种能一致的方式怎么办呢？还有一种办法，就是让意志力起作用。意志力可以让我们延迟满足或压抑我们的本能反应，但它有时候并不能自动跑出来，我们需要一些机制让它跑出来，比如将长远后果和当前行为进行绑定。</p><p>   当你说我想吃一块蛋糕时，你会想到发胖，但这不足以启动你的意志力，你会告诉自己，我今天吃完明天不吃，而只吃一天是不会发胖的，这事儿从逻辑上来说是正确的，但你得知道，明天你依然会面对其他诱惑。所以你必须将机制调整成：吃一块=未来每天都会吃一块，这样，当前的这块蛋糕带来的损失才会足够大。</p><p>   这整个过程，说白了就是欺骗大脑，因为本能会诱使你欺骗大脑，你要对抗它，只能进行反向欺骗。</p><h2 id="贝叶斯定理（1）"><a href="#贝叶斯定理（1）" class="headerlink" title="贝叶斯定理（1）"></a>贝叶斯定理（1）</h2><p>   大脑会被骗是由于我们的心智程序不够完善，而当我们判断事情的时候，最常见的就是在推断概率上出错，因为几乎所有的事情发生概率都是从0到1，因此对于概率判断的准确度是大脑急需提高的能力。</p><p>   说到对概率的准确判断就离不开贝叶斯定理，我们在之前的书里说我们会讲到贝叶斯定理，这就来看一个例子。</p><p>   你家附近开了一家看起来还不错的餐厅，你想去试试，但你的朋友反馈那里的食物很一般，这个时候你认为餐厅好吃的概率只有50%，有一次你碰到老板，老板说经常在附近看到你但你没来吃，是为什么，来我店里的顾客95%都说很好吃呢。</p><p>   请问老板的话能让你去尝试一下吗？</p><p>   我在这里并不想给大家列出一系列的公式，大家在百度上都能搜到贝叶斯定理相关的计算公式，只说明一个道理，哪怕老板并没有说谎，你也不能据此判断这就是家好餐厅。为什么？如果老板没有说谎，这家餐厅应该很不错才对？</p><p>   当然不是，贝叶斯定理很重要的一个概念就是“前提”，先想想，有多少顾客会因为饭菜不好吃而投诉呢？可能是5%，这已经是口碑很差的餐厅了，99%的餐厅都能比这好，一般客人吃到不好吃的大不了下次不吃也不一定会投诉。</p><p>   所以，老板的这个“在亲口对他评价的人里95%都是好评”是并没有多大的说服力的。</p><h2 id="贝叶斯定理（2）"><a href="#贝叶斯定理（2）" class="headerlink" title="贝叶斯定理（2）"></a>贝叶斯定理（2）</h2><p>   我清楚地记得多年前我第一次看到贝叶斯定理时的震撼：</p><p>   如果患上一种严重疾病的概率是1/1000，也就是1000个人里有一个会得这种病，而检测这种病的仪器的出错率是5%，也就是95%是准确的，某公司组织1000名员工去检测，其中第一个员工就显示呈阳性，请问他的得病概率是多大？</p><p>   按我们惯常思维框架的理解，检测这项疾病的仪器准确率不算很低，至少比天气预报高太多了是吧，那应该就95%得病了吧，他一定会直接被吓哭了。</p><p>   很多人会这么想，但我会告诉你大错特错了，这位员工根本无需这么担心。照5%的出错率，就算1000个人都没得病，也会有50个人被检测出来是呈阳性的，而得病率是1/1000，也就意味着这里面只有1个人是得病的，其中49个人都是被误诊的，所以他真实的得病概率只有1/50，也就是2%。</p><p>   从95%到2%，如果是一件跟钱挂钩的事等你来决策，你不懂贝叶斯定理的话，简直跟盲人差不多。</p><p>   无需去背贝叶斯定理的公式，只需记住我这几个例子，然后在碰到类似需要你判断概率的情况时，能想得起来，大脑惯常使用的思维框架一般就框不住你了。</p><h2 id="今日导言-4"><a href="#今日导言-4" class="headerlink" title="今日导言"></a>今日导言</h2><p>   为什么我们会做出非理性的行为？因为我们的心智程序运行不健全。什么？我不健全？相信很多人听到都会不敢相信，这是正常的，因为如果相信，并真正相信会带来自己很介意的不好的后果，不早就改了么。</p><h2 id="高估群体位置"><a href="#高估群体位置" class="headerlink" title="高估群体位置"></a>高估群体位置</h2><p>   底层的心智程序一旦出现了问题，就会衍生出很多避免不了的错误，这些错误有些会让我们损失金钱，有些会让我们损失时间，有些会让我们损失一段关系。</p><p>   高估自己在群体中的位置就是这样一种常见的底层心智程序问题。</p><p>   如果你去大街上做一个调查，问问那些会驾驶的人自己的驾驶技术如何，你会发现多半人的回答都是处于平均的驾驶水准之上。听起来这像是无伤大雅的错判，但如果跟钱挂钩，还能无伤大雅吗？</p><p>   很多人参加庞氏骗局并不是不知道这是击鼓传花游戏，而是明知道却依然进入，为什么呢？每个人都觉得比别人聪明，能让别人给自己接盘。比如MMM，人家摆明告诉你“我是传销”，摆明告诉你“我会崩盘”，摆明告诉你“崩了以后会重启一个新的”，爱玩不玩，玩的人竟然还是趋之若鹜。</p><p>   股票也类似，技术分析这样的东西会给人一种错觉，好像我比多数人懂得多一点，事实上，不说这玩意儿究竟有用还是没用（历史上基本没人用它长期挣到过钱，包括很多技术理论的创始人），比别人懂得多可能都是幻觉，毕竟连家庭主妇分析技术指标的能力都不逊专业分析师了。</p><h2 id="加倍愚蠢"><a href="#加倍愚蠢" class="headerlink" title="加倍愚蠢"></a>加倍愚蠢</h2><p>   请注意，上面说的“高估群体位置”跟一个人的智商通常是没什么太大关系的，如果一定要说有关系，恰恰相反，越是非低智商的，越是容易中招。</p><p>   Desmond Ryan说，如果一个人有两个大脑，他会加倍愚蠢。</p><p>   就用上面的技术分析的例子来说，那些试图玩弄市场的人常常用的都是涉及数学和概率学有关的技术分析方式，但事实上，长期跑赢市场的技术分析者几乎没有，越是认为自己能够掌握“复杂”技能的，就越是容易高估自己掌握的技能的可应用范围。</p><h2 id="心智污化"><a href="#心智污化" class="headerlink" title="心智污化"></a>心智污化</h2><p>   我们把错误的心智程序叫做被“污化”了的心智程序，这类心智程序有一个特点，就是它会根据错误的指引，在事实上伤害你本身。</p><p>   为什么我要加上“事实上”三个字，因为人的利己性决定了在主观上我们肯定是利己的，这是百分百的，无论你有多么无私，都是为了利己。错误的心智程序会让你错误地认为某些行为是利己的，其实却并非如此。</p><p>   比如9•11事件的劫机者，他并非是没有受过教育的人，他有城市工程和规划专业的学位，但是他的心智程序被一些错误的因子给污化了，让他错误地相信“牺牲自己”可以在来生获得慷慨的回报，这就让他在主观上的利己行为事实上成为了伤害自己的行为。</p><h2 id="避免污化"><a href="#避免污化" class="headerlink" title="避免污化"></a>避免污化</h2><p>   要避免安装上对自身在事实上有害的心智程序，就需要时刻调整自己有关认识世界的信念和模型，我之所以写《认知突围》这本书，就是希望帮助读者达到这样的目的，因为毕竟这应该算是影响人生最大的一个面了。</p><p>   修正对世界的认知需要的是底层知识，这个没有疑问，当我们拥有了更为正确的底层知识，对世界的本质认识就会更加深入，而怎样检验底层知识是否正确，就需要用科学和逻辑的态度去验证。那些逻辑混乱的，和那些不可验证的东西，比如说各种奇怪的盲目信仰，都是污化心智程序的元凶。</p><p>   像那些触碰到什么东西就会走霉运的，就是根本不可验证的，不说很少人会去验证，因为宁可信其有，就说去验证，也是不会有结果的，因为那些相信的人会告诉你，你现在没有走霉运不代表以后不会。这就没的说了，因为谁一辈子不走霉运？如果把霉运都归于某些事情的功劳，岂不是太扯淡了？</p><p>   所以我们要避免装上这种毫无根据的神秘主义的心智程序，这些东西有时候会让我们在“事实上”变成受害者。</p><h2 id="理性障碍（twice）"><a href="#理性障碍（twice）" class="headerlink" title="理性障碍（twice）"></a>理性障碍（twice）</h2><p>   正如我们在本书内一直重复的观点，心智程序容易被污化的人跟低智商没有什么直接联系，这世上有很多高智商的人都相信一些例如大脚怪、占星术、尼斯湖水怪、魔鬼附身之类的东西，他们还会去算命，会用祈祷疗法，这些人并非都是低智商，事实上我见过一些这样的人，你不能因为他们信这些而拒绝跟他们交往，他们在很多领域或许有独到之处，他们并不是蠢蛋。</p><p>   他们只是有理性障碍。</p><p>   理性是需要多种思维共同发挥作用的，还依赖于自身对于概率思维、科学思维以及逻辑思维的知识积累，这些都是没有办法通过对纯神经智力的测试来评估的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   全书到此结束，整本书对于思维的剖解很到位，但串起来其实一直都在说一个点，那就是理性。理性的重要性往往被人们所忽视，智商的重要性被人们无限拔高。</p><p>   由于工作环境的缘故，我见过一些人，他们并不是传统意义上非常聪明的那部分人，但他们在商业世界上非常具有远见，对世事洞若观火，且有强自律性和执行力，或许这些特质对于人生的作用还在智商之上。</p><p>   接下来我们对全书进行一次简单总结：</p><p>   1、理性障碍和智力障碍是互不干扰的；</p><p>   2、中文里的聪明有着很多种意思，可惜的是，人们很少会把理性考虑进去；</p><p>   3、理性分为工具理性和知识理性，工具理性是应用工具达成目标的理性，知识理性是认知是否符合真实世界的理性；</p><p>   4、思维倾向决定了一个人是否理性；</p><p>   5、一个人的反省心智的健全程度是会不会定向修正理性，以及修正到何种地步的关键；</p><p>   6、大脑倾向于能不用就不用，我们的认知吝啬就是这么来的；</p><p>   7、认知框架决定了人们的思考方式，很多时候人们意识不到，其实自己并没有使用自主心智；</p><p>   8、试图控制随机事件，是过度自信造成的悲剧；</p><p>   9、有时候不是我们忽略理性，是明明理性了但还是选择了第一直觉选择的东西，这是经常不使用理性带来的理性能力不足的后遗症；</p><p>   10、本能会诱使你欺骗大脑，你要对抗它，只能进行反向欺骗；</p><p>   11、贝叶斯定理教会我们在思考一件事的概率时，一定要多想想前提（前置概率）；</p><p>   12、要避免安装上对自身在事实上有害的心智程序，需要时刻调整自己有关认识世界的信念和模型。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;《超越智商——为什么聪明人也会做蠢事》&lt;/blockquote&gt;
    
    </summary>
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/categories/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/tags/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>一课经济学</title>
    <link href="yanchongsheng.github.io/2018/04/07/%E4%B8%80%E8%AF%BE%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    <id>yanchongsheng.github.io/2018/04/07/一课经济学/</id>
    <published>2018-04-07T06:23:04.000Z</published>
    <updated>2018-04-17T10:06:01.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">《一课经济学》</blockquote><a id="more"></a><h2 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h2><h2 id="一课经济学"><a href="#一课经济学" class="headerlink" title="一课经济学"></a>一课经济学</h2><p>   原名：ECONOMICS IN ONE LESSON</p><p>   作者：【美】亨利•黑兹利特</p><p>   译者：蒲定东</p><p>   出版社：中信出版社</p><p>   本版版次：2015年4月第2版</p><p>   ISBN：978-7-5086-5075-3/F•3341</p><h2 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h2><p>   最开始的时候，本周安排的书籍并不是这一本，是打算按照版块，先把思维类的书都一股脑儿搞定以后，再转到经济版块，但每个人都有疲劳，在连续看了《黑天鹅》、《反脆弱》和《思考，快与慢》之后，估计很少有人能继续啃下思维类的书了，事实上，自行看以上三本书要吃透的话，不夸张地讲，普通人可能需要3个月以上，并且还容易看得不适。</p><p>   因此，我们把《一课经济学》的顺序提了上来。</p><p>   如果要我推荐一本经济学的入门书籍，且只能推荐一本，或许我就会推荐这一本，因为它浅显、易懂、足够短，但又把经济学的底层思维给植入了进去。</p><p>   很多人认为，学了经济学就是去买股票，这是一种大错特错的误解，经济学是解决现实问题的，它跟现实生活的关系甚至比跟金融产品的关系要紧密得多，所以如果抱着学了就会选股的姿势来学习经济学，恐怕是要失望而归的，但如果你是为了充盈自己的思维，学一些正确看待事物、分析事物的方法，那你就找对地方了。</p><p>   接下来，我带大家来入门经济学这门“现实主义”学科，因为是入门书籍，脑子可以轻松点，如有需求，请自行购买原书。</p><h2 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h2><p>   很多人有一种想法，觉得“破坏”是一种推动社会前进的力量。是不是真的呢？我们不得而知，但作者会告诉你，那些只想着破坏带来的益处，尤其是只想着人为破坏带来的益处的，到底是哪里欠缺了考虑。</p><h2 id="破窗谬论"><a href="#破窗谬论" class="headerlink" title="破窗谬论"></a>破窗谬论</h2><p>   注意，这个破窗谬论不同于破窗理论。破窗理论讲的是如果一个人打破了一扇窗户，这扇窗户没有得到及时修补的话，那么其他窗户也很可能被人打破，扔垃圾也是一样。</p><p>   这是由道德压力弱化而引起的。</p><p>   破窗谬论是说破坏可以给经济带来好处。比如一个孩子把窗给打破了，有人说，这是好事儿啊，你老不打破窗户，对面的玻璃店怎么赚钱呢？玻璃店老板赚了钱可以再去其他地方消费啊，他不赚钱，他的员工就得下岗，照这么推算下去，很多人因此获得了就业机会，也促进了消费流动。</p><p>   这种论调常见于对于商品质量差的辩护，说我的东西质量差，质量差才好啊，要是质量都太好，东西永远不会坏，消费就流动不起来了啊，旧的不去新的不来，所以我是大善人。</p><p>   之所以被叫作破窗“谬论”，就因为它是不对的，哪里不对呢？你看，原本窗户不破，的确玻璃店是没生意了，但原本我可以去买西装啊，现在钱都拿去补玻璃，西装买不了了，所以玻璃店赚到的是西装店损失的钱，整个过程并没有新增任何“就业机会”，也没有额外增加财富的流转。</p><h2 id="战争之祸"><a href="#战争之祸" class="headerlink" title="战争之祸"></a>战争之祸</h2><p>   这就有点像为战争辩护一样，说如果没有第二次世界大战，怎么会有巨大的经济成果？</p><p>   是啊，经过战争的洗礼之后，建筑业的确是会蓬勃发展，也会有更多漂亮的建筑，因为拆迁成本大大减少，人的审美也一直在进步，而在战争期间积累起的那些对汽车、冰箱等的需求，也会集中释放。</p><p>   但这样就表示人们的总需求增加了吗？不，跟破窗谬论类似，人们的需求只是从其他地方转移到了这些最为迫切的、跟生存和基本生活需要相关的需求，战争改变的，只是需求结构。</p><p>   如果战争可以提升人们的总需求，可以创造财富，每个人最该做的就是点燃自家的房子，激发起自己的斗志，然后再拼命赚钱买房。</p><h2 id="政府之力（1）"><a href="#政府之力（1）" class="headerlink" title="政府之力（1）"></a>政府之力（1）</h2><p>   在大部分民众眼里，政府似乎是无所不能的。制造业不行？政府去投资，去补贴，去拉动；失业率太高？股市狂跌？房子买不起？总之统统可以通过政府花钱或者行使权力解决。</p><p>   不过细心点你就能发现，以上问题政府似乎一个都没解决，不是不想解决，是它并不是你想象中那么无所不能。</p><p>   我想现在很多人的心目中对于货币的定义里还有“政府信用”这样一个概念，以一个国家的政府信用作为保证，然而国家的背后是什么？是一个个的人。</p><p>   所以政府的所有投资，钱都是属于纳税人的，最终结果也是由纳税人买单，而政府的所有信用，本质上也是来源于民众认为“你花钱比我自己花钱对我更有利”。</p><p>   如果没有它，或许你家门前的那座桥不会出现，或许造桥工人不会得到造桥的工作机会，但正如前面的转移原理，这里不会有桥，但可能有房子，有洗衣机，有礼服，有粮食，政府并不能无中生有，它只是干着一件资源配置的活，牺牲这里，补足那里。</p><p>   比如政府大力支持的经济特区，给予人、钱、物、和税收优惠以后，的确建设得非常好，但那是全国老百姓的钱，把所有人的钱挪到某一个地方，建设好又有什么奇怪的呢？往全国的羊身上剪一刀，最后羊毛加到一只羊身上，可不就成了巨无霸了么？</p><p>   公共事业的成功掩盖了那些看不见的失败，而那些看不见的，甚至连自己也不知道，自己原本或许可以更好。</p><h2 id="政府之力（2）"><a href="#政府之力（2）" class="headerlink" title="政府之力（2）"></a>政府之力（2）</h2><p>   看完了上一页，相信你已经知道，政府的作用就是一个搬运工，至于它的技巧是不是足够好，那就见仁见智了。</p><p>   所有的扶持，都必须以牺牲另一部分利益为代价，而对于这种牺牲，政府会比私人更不在意一些。以贷款这件事来说，政府的放贷坏账率普遍高于非政府机构甚至是私人的放贷坏账率，因为私人需要对自己的真金白银负责，而政府拿的只是纳税人的钱。</p><p>   因此，政府看上去总会比私人更为慷慨，他们或许更愿意为了“关怀”和“施舍”，放贷给一些资质并没有那么好的个体，他们的理由也很充分，为什么不借给他们钱，帮助他们买农场、买骡子、买拖拉机、帮助他建立起自己的事业，让他们对社会有用呢？</p><p>   然而这样的结果，通常就是钱的使用效率更低，也就是被浪费的可能性更大，因为这些个体的坏账率更高，拿了钱以后的生产效率也更低。而那些资质更好的，却因为放贷的总量被占去一部分，从而总会出现那么一些人，生存处境变得更为艰难。</p><p>   这其中的转换关系，本质就是政府用浪费钱的方式让自己的内心更爽。而私人若非钱多到用不完，大都不肯这样把钱扔出去。</p><h2 id="今日导言-1"><a href="#今日导言-1" class="headerlink" title="今日导言"></a>今日导言</h2><p>   几乎全世界的国家都在愁就业，全世界的人民都在愁就业，因为看上去我们的生活一直都在变得更有效率，也就是说我们在很多地方都只需要比之前更少的人手。那么，我们该如何保护我们的就业岗位呢？</p><h2 id="机器抢夺就业"><a href="#机器抢夺就业" class="headerlink" title="机器抢夺就业"></a>机器抢夺就业</h2><p>   很多人反对大力发展人工智能的其中一个理由就是，未来我们所有人都会下岗，所有工作岗位都会被机器人抢走。</p><p>   其实这种论调并不新鲜，每当就业环境陷入困境的时候，机器总是背锅的那一方，但是只要你稍加利用一下自己的系统2（我们刚学过的），就可以知道这是一个极其荒谬的结论。</p><p>   要照这么看，每一次的技术进步都必然会导致一大波人失业，那我们现在都早应该赋闲在家才对，这明显是不靠谱的。</p><p>   为什么机器不管发生到什么阶段，人都不会处于无事可干的地步呢？</p><p>   比如一位制衣商，用了机器以后可以省下一半的劳动力，于是他买了机器之后，把一半员工给裁了，这从表面看起来似乎确实损害了就业率，但机器本身也需要人去生产，这些就业机会是原本没有的，而制衣商使用机器提高了生产效率获得了比以前多的这部分利润之后，无论他将利润用于什么方面，都将增加社会就业，不管他是换房还是换车，买珠宝还是买烟。</p><p>   因此，新技术只会淘汰那些落后技能的就业岗位，而那些下岗的职员，完全可以通过学习新技能重新上岗，就业机会仅仅是发生了转移而已，我们不能仅关注张三失去了工作，也应该同时看到李四得到了新工作。</p><p>   产业升级之路注定是没有尽头的，与之匹配的每个人的劳动技能当然也需要同步更新，我们以前说手上有活，就不愁没饭吃，千万不要这样笃定地以为，这是经济学带给我们的思考。</p><h2 id="拆分就业机会"><a href="#拆分就业机会" class="headerlink" title="拆分就业机会"></a>拆分就业机会</h2><p>   关于就业，之前有一些奇怪的论调比较风靡，比如将一份就业机会拆成两份，这样就能降低失业率，比如禁止员工每周的工作时间超过40小时，超过40个小时就得多付50%的薪水，我国也有加班工资和节假日工资等。</p><p>   这并不是为了保护劳动者，注意，这一点很重要，很多人会认为“这些都是为我好”，不要想当然，一定要有独立思考能力。这份规定显然是为了提高就业率，在给出单个劳动者的劳动时间天花板之后，企业就会倾向于多雇人。</p><p>   但是这同时又会出来一个新问题，劳动时间缩短了之后，单个劳动者的单位时间收入增不增加呢？如果不增加，那么劳动者的收入就相当于下降了，比如原本你一小时挣20块钱，单休，那么一月大概可以挣4000块钱；现在换成了双休，相比于给高额的加班工资，老板更乐意多雇人手给正常工资，那么你一月就只能挣3200块钱。</p><p>   你当然不肯，于是公会领袖或者你个人都要求保持4000块钱不变，但劳动时间减少。</p><p>   这样的话，问题就更严重了，因为企业平白无故损失了一部分劳动力，如果要不损失，就得增加额外支出，这就直接导致了企业的整体倒闭概率增加，也就可能导致比以往更高的失业率。</p><p>   所以很多看似美好的政策，都不一定有那么美好。</p><h2 id="裁减军队"><a href="#裁减军队" class="headerlink" title="裁减军队"></a>裁减军队</h2><p>   在就业这件事上，军队是一个特殊群体，战争年代，军队是必需品，但战争结束以后，国家是否还需要养着这么庞大的军队呢？</p><p>   有人说，你把这些退伍军人释放到市场以后，哪会有这么多多出来的劳动力需求去匹配？答案当然是有。</p><p>   军队是纳税人出钱养的，裁减之后，纳税人手上的钱就多了，钱多了以后要消费，需求不就产生出来了，这是动态平衡的。同样的道理也可以用于公务员，“过度供养”一名公务员（指拿的钱跟干的事儿不匹配），对消费力来说并不是促进，而是有损耗的。</p><h2 id="关税保护"><a href="#关税保护" class="headerlink" title="关税保护"></a>关税保护</h2><p>   关于就业，商人常常会善于利用，然后去威胁政府。</p><p>   从前有个美国的商人，曾经跑去国会慷慨陈词，说必须要对英国的羊毛衫收取一定的关税，我这里羊毛衫每件卖30美元，但同样品质的英国羊毛衫只卖25美元，所以如果你不征收5美元以上的关税，我这边就开不下去了，我手底下还有1000多名员工，到时候他们就会丢掉饭碗，失业率上升，购买力下降。</p><p>   这话有道理么？粗看是的，你看咱们的关税不也是为了保护自家企业，保护行业么，那如果不保护会怎么样？是不是真的会失业率上升，购买力下降呢？</p><p>   假设不保护，该制造商的工厂倒闭了，那么显然这1000多名员工会下岗，但是同时，老百姓可以用25元钱购买到羊毛衫，剩下的5元钱是不是可以用于其他地方的消费了呢？那么其他行业的就业率是不是会提高了呢？那么失业率是不是一定会上升，购买力是不是一定会下降呢？</p><p>   事实上，大卫李嘉图提出的比较优势理论就是让大家把劳动力资源都投入到自己的比较优势领域，提高了总效用以后，然后用交易的方式进行合作，我们在个人领域一直都是这么合作的，为什么到了国与国，就会出现这样的问题呢？</p><p>   作者并没有在书中试图反对所有的关税，只是针对“关税保护就业”的谬论提出更为理性的思考。</p><h2 id="拯救产业"><a href="#拯救产业" class="headerlink" title="拯救产业"></a>拯救产业</h2><p>   很多国家有这样一种想法，某产业很重要，某产业的某公司很重要，所以要大力补贴，大力扶持，哪怕它效率很低，年年亏损，也不能让它倒，一旦倒了相关产业都要倒霉，紧接着蔓延开去以后就会造成经济萧条。</p><p>   但是国家救产业也好，补贴公司也罢，它的本质是什么？依然仅仅是财富转移，身处这个产业的人有多少获益，纳税人就得损失多少。</p><p>   还不止这些，由于人为的救济或者补贴，资本、劳动力都从更高效的产业流入到了更低效的产业之中，也就是最终可能并不仅仅是财富的人为转移，而是会造成整个系统的净损失，拉低人均生活水准。</p><p>   补贴必然带来恶果，只要有补贴就不可避免地造成低效，就像拼死保护马车业只会减缓汽车业发展的脚步。当一个产业或者公司竞争不过其他公司的时候，最好的做法就是放手让它自然消亡，坐等新产业和新的生产方式的崛起。</p><h2 id="今日导读"><a href="#今日导读" class="headerlink" title="今日导读"></a>今日导读</h2><p>   今天我们用短短的篇幅来讲一下关于价格的道德，为什么价格的升降不需要人为的干预，以及为什么我们让价格自由升降才是最符合人类道德的。</p><h2 id="价格的道德"><a href="#价格的道德" class="headerlink" title="价格的道德"></a>价格的道德</h2><p>   企业家追逐利润的行为常常会被过度解读为无良的，因为有利润，所以企业家愿意生产，因为无利可图，所以哪怕许多民众嗷嗷待哺，企业家也不愿意投入。</p><p>   这种错误论调由于占领了道德高地，因此常常传播甚广，然而它的核心问题在于只考虑了单一的因素，我们从头到尾学的书籍里面都会很“鄙视”这样非常片面化的思考方式。</p><p>   每个人做某事的成本都是同一时间放弃了做其他事，而满足需求这回事也是一样，一个企业家花费精力和资源满足人们这方面的需求，必然会“耽误”他满足人们其他方面的需求，而如何判断什么需求是最为紧迫的呢？也就是劳动力和资本究竟最应该用在哪里，这个“应该”又是由谁来界定的？</p><p>   解决之道正是价格体系，因为价格是供需博弈后的产物，它不存在什么道德，它告诉商人，这里有多少利润，人们有多么需要这个东西，你应该生产，或者人们已经不想要了，你应该放弃，转而生产有更多人需要的东西等，它是一个灵活的信号。</p><p>   至于有人指责“为什么不赚钱你就停止生产衣服，为什么你没有企业家道德”的时候，不妨坦然地回答他们：如果鞋子有更大的利润，说明人们更需要鞋子。如果我继续生产衣服，只能说明我弃人们更重要的需求于不顾。</p><p>   有一句经典名言，叫“商业是最大的慈善”。</p><h2 id="价格维稳"><a href="#价格维稳" class="headerlink" title="价格维稳"></a>价格维稳</h2><p>   价格是个好东西，它可以自动调节人们的市场行为，但如果价格被人为干预，就可能会出现一些问题，正如书上所说：那些想要长期把特定商品的价格抬高到其自由市场价格之上的企图，通常以失败告终。</p><p>   比如粮食，政府为了保有耕地，不得不高价收购本国农民手里的粮食，哪怕他们完全可以买到廉价得多的进口粮食，这就几乎肯定会造成市场失灵，因为既然政府会用特定价格收，那么下一年的产量就很可能会大大过剩。</p><p>   这有点像媒体常常宣传的“救救果农”，果农生产了过剩的产品，是其对市场环境的错判，那么作为错判的代价，东西没人要，或者价格自动调节到对半乃至1/3是市场给予的正常惩罚。而我们的媒体却滥用同情心，希望消费者去为别人的错误买单，如果这样的呼吁有用，那么显然，下次过剩的情况可能会更加严重，或者他在下次判断市场的时候依然不会足够谨慎。</p><p>   价格，不应该由谁设定，而是所有的消费者根据供求共同博弈出来的，一只西瓜卖10块钱，并不是水果店的老板说10块钱，也不是政府说10块钱，而是供给与需求博弈之后，发现10块钱附近是单件利润与售出数量的最好平衡点，而商家仅仅是负责将其挂出来而已。</p><p>   任何试图干预市场的行为最终都会被无情地打脸。</p><h2 id="房租管制"><a href="#房租管制" class="headerlink" title="房租管制"></a>房租管制</h2><p>   我们常常觉得房租管制是一种好政策，因为给房租设置一个天花板可以保护“相对弱小”的租户的利益，可以保护租户不被敲竹杠，然而当我们前面学习了价格的作用后，会发现这种论调完全站不住脚。</p><p>   如果不存在管制，房租上涨意味着什么？意味着居住空间供不应求，或者是通货膨胀，那么有些租户可能就会精打细算，选择与人合租，或者是租住较小的空间，这样同样的空间就能给更多人居住，直到房荒缓解，然后租住价格就会自然下降。</p><p>   但现在实行了房租管制，会出现什么结果呢？对于已经租到房子的人来说很开心，但对没租到的人来说，由于房荒一直存在，因此总会有很多人是租不到房子的，而且新的供给也会由于租金管制而没有足够的动力被生产出来，导致恶性循环。</p><h2 id="今日导言-2"><a href="#今日导言-2" class="headerlink" title="今日导言"></a>今日导言</h2><p>   我们常常说，劳动者是弱势群体，资本家是吸血鬼，所以政府在定条文的时候，常常会偏向劳动者一些。但有时候，我们常常会适得其反，因为不了解经济规律，导致本来想保护劳动者的策略最终却伤害了劳动者。</p><h2 id="最低工资"><a href="#最低工资" class="headerlink" title="最低工资"></a>最低工资</h2><p>   政府通过人为干预提高商品价格会造成破坏，这个我们已经在前面进行了阐述，很多人就会举最低工资的例子，最低工资这样美好的东西难道也有破坏作用？</p><p>   那是当然的。</p><p>   关注“请辩”很久的读者应该知道，我曾经在两篇文章里提到过最低工资这样的“恶法”。那些试图照顾低收入者的行为，事实上却可能会导致低收入者的生存环境更为恶劣。</p><p>   比如一个人明明在工作技能上达不到2000元每月，但现在规定企业雇佣员工必须最低达到这个月薪，那么这就并不是在保护那些技能达不到2000元每月的员工，而是将他们直接驱逐出劳动力市场，因为作为企业来说，同样是2000元每月，我为什么不雇佣能够达到这个标准的员工呢？最低工资法只能增加失业率，或许在生存的压力下，可以迫使他们去学习更为有用的技能，这便是全部的好处了。</p><p>   要提高工资，最佳的手段只有提高边际劳动的生产力，要靠价格干预，最终是无法凭空创造出财富的。</p><h2 id="工会的力量"><a href="#工会的力量" class="headerlink" title="工会的力量"></a>工会的力量</h2><p>   对于劳动者工资的保障，工会这样的组织常常会起到举足轻重的作用，但，工会真的有那么大的作用吗？</p><p>   劳动生产率是工资最根本的决定因素，这个没有任何疑问，这并不是建立在雇主是慈善家的基础之上，好像劳动者的劳动生产率提高了，他就“必须”涨工资，不涨会怎么样呢？不涨当然会跳槽咯，如果另一位雇主可以雇到一位每月多给他挣200美元的员工，他为什么会留着现在这个呢？只要劳动生产率提高，那么就算当前的雇主没有给你加薪，你照样可以在别的地方拿到。</p><p>   这么说并不是说工会一无是处，毕竟单个劳工的谈判能力较弱，而且一旦判断错误，那些容易被替代的劳工的代价会比雇主高得多，因为雇主可以轻易找到类似的劳工，而劳工要找一份类似的工作则需要付出更高的时间成本。工会的作用，就是让雇主“谈崩”的风险提高，毕竟你可以找得到一两个容易替代的劳工，要瞬间找到一大批也还是不太容易的。</p><p>   然而，历史证明，这样的小团体很容易就会做得“过火”，比如强行要求雇主将其工会会员的工资标准定到高于他们劳动力的实际市场价，否则就罢工。而一旦有了这样的胁迫力之后，他们就可能会设立高昂的入会费，排斥非工会劳工生产的产品，甚至可能会在罢工的时候阻碍其余在职劳工继续工作，或阻止雇主招募新人。</p><p>   很多自身竞争力不足的劳工会渴望加入工会，或许，你就可以知道，为什么这是个滥竽充数又拖累社会生产力的地方了。</p><h2 id="买回商品"><a href="#买回商品" class="headerlink" title="买回商品"></a>买回商品</h2><p>   有一种论调认为，员工的工资应该要能买得起他们所生产的产品，所以生产廉价服装的，应该买得起廉价服装；生产貂皮大衣的，应该要买得起貂皮大衣；生产凯迪拉克轿车的，应该要能买得起凯迪拉克轿车。</p><p>   这通常是工会为了争取更高工资所用的诡辩术，这种论调有着完全经不起推敲的地方，因为在商品交换经济里，每个人的货币所得，其实是另一个人的成本。</p><p>   就算强行将生产凯迪拉克轿车的员工工资提高到足以用一年的时间买得起凯迪拉克轿车的地步，那么造成凯迪拉克轿车的成本大幅增加是肯定的，接着售价就只能同比提高，这些雇员最终可能还是买不起，并且还会造成额外的恶果，那就是买家进一步减少，市场进一步萎缩，导致一部分员工直接被裁员了。</p><h2 id="追逐利润"><a href="#追逐利润" class="headerlink" title="追逐利润"></a>追逐利润</h2><p>   在我们小的时候，经常被告知追逐利润是一件不道德的事情，举例说明就是某些资本家，他们是寄生在劳动人民身上的吸血鬼。那么，追逐利润是否真的是一件如此可怕的事情呢？</p><p>   到了现在的认知水平，恐怕大家都已经知道，正是每个人都追逐利润，才让我们的商业世界如此丰富多彩，从而推动我们的整体生活水准不断前行。</p><p>   利润，引导的是生产要素的流向，哪里有利可图，哪里就是人们需要的领域，所以自利在这一层面与其他人的利益是趋同的，什么时候供应太多了，利润就少了，挣不到钱了，就退出，而这恰恰就是人们不怎么急需的信号。</p><p>   那为什么我们以前总说追逐利润可耻呢？因为我们总以为利润是商家自己定的。这是真的吗？当然不是，利润的核心是价格，成本和售价都是价格，是市场供给和需求博弈后的结果，同一行业不会有每一家公司都赚钱，只有那些成本更低，生产效率更高，提供的商品和服务更好的公司才能有更大的利润。</p><p>   因此，追逐利润这种行为不止是跟自己的利益相符，跟每一个人的利益都是相符的。</p><h2 id="今日导言-3"><a href="#今日导言-3" class="headerlink" title="今日导言"></a>今日导言</h2><p>   最后一天，我们来看几个宏观的概念，或许有些概念大家已经很熟悉了，但是要知道，这是作者在1946年的观点哦，70多年前的观点，这可以说是非常超前了。</p><h2 id="通货膨胀（1）"><a href="#通货膨胀（1）" class="headerlink" title="通货膨胀（1）"></a>通货膨胀（1）</h2><p>   像通货膨胀这样的经济学名词，几乎每一个人都知晓，但是对它的看法，却大相径庭。</p><p>   很多人认为通货膨胀有益，因为通货膨胀意味着钱多了，这给了他们一种错觉，好像就能买得起更多的东西了。事实上，你只要简单地想一想就知道了，只要生产的东西没有变多，每个人怎么会能“分配”到更多的东西呢？无论对应的钱后面有多少个0。</p><p>   通货膨胀，是钱印多了，那为什么要印钱呢？是因为税收可能还不足以负担政府支出。比如战争年代，政府印钱给军火商、战时物资承包商等，那么这些团体和个人有了更多的钱就会去消费，而且更不在乎价格，因为每一块钱的主观价值在他们心里已经降低了。接着直接给他们提供服务的个人和团体就可以把东西卖得更贵，挣到更多的钱，以此类推，直到印的钱被平摊到整个国家。</p><p>   你看，每个人手里的钱都更多了，商品和服务也变贵了，但整个国家更富了吗？根本没有。</p><h2 id="通货膨胀（2）"><a href="#通货膨胀（2）" class="headerlink" title="通货膨胀（2）"></a>通货膨胀（2）</h2><p>   那么印钱是不是除了政府解决自己的当下问题以外，对于其他人就等于白印呢？当然不是，如果是的话，那印钱就是好的，因为既解决了政府的难处，又不伤害其他人的利益。</p><p>   很明显，印钱这事儿有很大的不公平性，谁最靠近最初印出来的钱，谁就能获得最大的利益，在这个金钱流转的链条里越靠后，就越不划算。</p><p>   所以我们很快就能理清最大的受益者是谁？肯定是政府，因为钱是它印的，它拿来直接解决了现实的困境，接着是最靠近政府拿到这笔钱的人，然后才是其他人。</p><p>   这就有点像税收，我把池子里的水加一点，这样你们每个人实际在池子里所占的比例就少了，相当于我问你们每个人都拿了一点东西，但直接问你们拿你们又不肯，容易怨声载道，所以就使用这种“合理盗窃”的方式，拿得不知不觉，又貌似合情合理。</p><h2 id="储蓄的价值"><a href="#储蓄的价值" class="headerlink" title="储蓄的价值"></a>储蓄的价值</h2><p>   储蓄这件事在很多人看来，似乎只是与己有利，与人无益的，粗看是这样，如果一个人把钱存在保险箱让它发霉的话。</p><p>   但如果是存在银行，其实并不能说对社会没有贡献，因为银行会拿你的钱去投资，去帮助整个社会其他需要钱的人，所以也可以说是你间接帮助到了社会，你想想，不然你的利息从哪里来，又是谁支付给你的呢？</p><h2 id="利率过高"><a href="#利率过高" class="headerlink" title="利率过高"></a>利率过高</h2><p>   关于储蓄，就逃不开利率。很多人说，利率过高会损害实体经济，原因是利率太高的话，贷款压力就大，就赚不到钱。</p><p>   这种言论深受很多人认同，因此一提高利率就说企业如何艰难，活不下去了之类，但其实，利率不管是高还是低，借和贷肯定都是同时调整的。在低利率的状况下，储蓄就会降低，很多发达国家就是例子，不是他们不爱储蓄，是储蓄的利率实在太低。</p><p>   人们有个很奇怪的观念，好像不管利率高低，所有人的选择都只有把钱存进银行这一条路，但其实，每个人都会考虑到底把钱放在哪里，才能使收益和风险的比值最大的问题，只是对于风险承受能力有差别而已。</p><p>   而不顾市场需求，人为压低利率以为可以刺激经济的做法很明显是荒谬的，因为同时储蓄也少了，政府只能用不断扩张银行信贷规模的方式来替代实际储蓄，如若不然，企业就反而贷不到款。</p><p>   但我们都应该看到，这种资本供给增加的状况，仅仅是虚假繁荣而已。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   本书很短，短到很多人会认为，啊，就这么看完啦？是的，本书是供大家学完前三本烧脑书之后放松之用，同时也是给对经济学不熟悉的读者入门之用，以后我们会有更为复杂和跟现实生活更为贴近的经济学著作，我会尽量让大家看得懂，并能够用上。</p><p>   接下来，我们来总结下本书的几个要点：</p><p>   1、经济学是用来解决现实问题的，是切近生活的，它不仅跟挣钱的关系没有想象中那么大，甚至有时候跟钱的关系都没有那么大；</p><p>   2、破坏本身不创造需求，人们的需求只是根据迫切程度进行了转移，破坏改变的只是需求结构。</p><p>   3、政府并不是无所不能的，看得见的手在很多时候会加剧问题；</p><p>   4、不对钱的使用承担后果，就很有可能导致钱的使用效率降低；</p><p>   5、下岗并不是技术革新带来的，而是自我成长缓慢带来的；</p><p>   6、用减少工作时间的方式拆分就业机会并不能让生活变得更好，只有提高生产率才可以；</p><p>   7、让活不下去的企业倒闭或让产业进行自然升级，看起来造成了更多的失业，但消费者使用钱的效率更高就会在别的更有效率的产业中消化这些失业人员；</p><p>   8、价格是发现“最重要的需求”的尺度，尊重价格就是尊重市场；</p><p>   9、价格不是商家定的，是所有供方和需方博弈后的结果，商家只是负责将其挂出来；</p><p>   10、最低工资法会让更多底层劳动者失去工作；</p><p>   11、人人都在框架内尽可能地追逐利润，才能把资源尽可能地调配到最有效率的地方；</p><p>   12、每个人手里的钱都可能变多，但不一定能买到更多的东西；</p><p>   13、印钱就是“合法盗窃”；</p><p>   14、储蓄有时候对社会也是有益的；</p><p>   15、并不是利率越低企业的生存状况就一定会更好。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;《一课经济学》&lt;/blockquote&gt;
    
    </summary>
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/categories/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/tags/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>我的戒烟之旅</title>
    <link href="yanchongsheng.github.io/2018/04/02/%E6%88%91%E7%9A%84%E6%88%92%E7%83%9F%E4%B9%8B%E6%97%85/"/>
    <id>yanchongsheng.github.io/2018/04/02/我的戒烟之旅/</id>
    <published>2018-04-01T16:34:56.000Z</published>
    <updated>2018-05-03T09:40:59.396Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"> <img src="/upload_image/quit_smoking.png" alt=""> 不戒烟，无自由 </blockquote><a id="more"></a><h2 id="我的抽烟史"><a href="#我的抽烟史" class="headerlink" title="我的抽烟史"></a>我的抽烟史</h2><p>本人男，24 岁，从 18 岁开始抽烟，到开始戒烟时大约有 5 年的烟龄。学会抽烟的条件无非就那么几种：身边的人都抽，带着你也抽了；为了装逼、装酷；再加上一些失恋啊、压力大啊、熬夜提神啊等等各种莫须有的理由，基本就把很大一部分人牢牢的栓死在吸烟的泥潭里，越陷越深，越来越无法自拔，等你想跳出来的时候，发现你的烟瘾已经大到超越你的理智和毅力的地步，想要摆脱已经很难很难了。基本上掉入这个陷阱的人，很少有能跳出来的，直至被烟折磨到死。我是属于第一种情况，身边的人都抽，跟着也抽了。</p><p>其实学习抽烟是一件很痛苦的事情，因为要克服生理上的难受，身体本能的抵抗，还要坚持去抽大约一包才能熬过痛苦的开始，没有一点毅力的人，是学不会的。学会抽烟的人当时是有点毅力了，但当时绝对是没有脑子的，事实证明没脑子真可怕，因为一旦方向错了，越多的努力就越是后退的厉害。回首我的吸烟史，从我开始自己买第一包烟的时候，我就已经陷入进去了，只是那时候不知道，等知道的时候已经晚了，烟瘾已经超越了理智。吸烟的过程中真的被很多人嫌弃过，被舍友、被朋友、被自己、被家人、被路人，我也很难过，但只有吸烟的人才能懂烟瘾来的时候不抽烟的痛苦，不是生理上的更多的是心理上的。「脑补一下非常非常口渴的时候，脑子里肯定会不顾一切的找水喝，就是那种渴望的感觉，也算是吸烟者的一种刚需，所以烟草可以卖那么贵」</p><p>随着烟龄的增长，烟瘾会越来越大，吸烟的量也会越来越多。我由一天几根发展到了一天一包甚至更多，到后来明显感觉自己抽烟抽的非常的下贱。晚上要是烟盒里面只有一根烟的时候，心里就会缺失安全感，担心不够抽，担心烟瘾来了怎么办，半夜没烟的时候去翻烟灰缸，找半截的去抽；出去游玩的时候，每隔几小时就想找个地方抽烟，然而很多景点不让随便抽烟；坐火车或者高铁的时候，中间停车几分钟，都要冲下去抽几口；平时工作学习生活，每隔一段时间就要去抽根烟；很多人会躲到厕所里抽烟；真的吸烟者被到处赶，为了吸烟，忍受着别人的歧视、厌恶，忍受着厕所的恶臭，别人的谩骂。现在回想真的觉得那时候的自己为了抽烟变得好可怜、好下贱、好可恨。现在看到还在吸烟的人，重复我以前生活的人，我都会抱以同情的目光，一群被烟奴役的人，我想帮，但又无能为力。</p><h2 id="尝试戒烟"><a href="#尝试戒烟" class="headerlink" title="尝试戒烟"></a>尝试戒烟</h2><p>吸烟有害健康，吸烟不仅浪费钱还伤身体等等各种大道理，吸烟者比非吸烟者应该更清楚，然而这些也就是说说，并没有什么卵用，完全的鸡汤道理。我相信每个吸烟者心里都有想戒烟的的渴望，只是烟瘾大于了理智，虽然有时候会理智一下，但最后都败在烟瘾的阵前。我也尝试过戒烟好多次，感冒严重喉咙疼的要死的时候想过这是个机会通过生理抵抗帮助自己戒烟，最后失败了；看到好多因抽烟得肺癌的新闻，想要戒烟，最后失败了；被自己在乎的人鼓励去戒烟，最后失败了；我曾经做过过很多努力去戒烟，去控烟，然而都没用。真正的戒烟是不需要准备的，是不需要挑时机的。戒烟唯一需要的是你自己能够从心底里明白一些道理，比如：你为什么要吸烟，你为什么又要戒烟难，为什么你以前每次戒烟都会失败，吸烟到底有什么好让你放不下等等一些看似简单，但是你从来没有真正搞明白答案的问题。戒烟的时候各种挑日子，挑时机的人大多都会以失败告终，因为你从心底里没有准备好戒烟，你从一开始就是在逃避的，你根本没有认识到你为什么要戒烟，你是为了戒烟而戒烟，你是为了别人所谓的吸烟有害健康的大道理而戒烟。而不是为你自己戒烟。</p><h2 id="戒烟成功"><a href="#戒烟成功" class="headerlink" title="戒烟成功"></a>戒烟成功</h2><ul><li>一本书：《这本书能让你永久戒烟》</li><li>一个突入其来的下午： 2017.12.18 13：30</li><li>一个戒烟 APP： 戒烟军团</li></ul><p>首先，如果想戒烟，真的好好看看《这本书能让你永久戒烟》，对戒烟有很大的帮助，能够解决你戒烟路上的很多困惑，用经得起逻辑推理的文字去武装你的思想，让你在戒烟路上能够不被干扰。让你站到高处，站到非吸烟者的角度去思考、去审视在吸烟泥潭中的自己。</p><p>其次你需要清晰的意识到自己在坑里，你才会挣扎，你才会往出爬，温水煮青蛙的故事大家都知道，殊不知吸烟者就是温水里的青蛙。如果把毒品比作开水，抽烟比作温水，很多人会全力抵抗毒品，却沦陷在吸烟的泥潭里深深不能自拔，让自己活活的被煮死。更可恶的是最后即使知道了自己最后会被活活煮死，也懒得往出跳了，因为当前是舒服的，尽然还找各种理由去为自己的无能和没有从烟瘾手中抢回理智的毅力去开脱。</p><p>戒烟路上肯定会有各种阻力，特别是来自于以前身边的烟友的递烟行为，对于这种情况，大声的告诉他我不会，千万不要说你在戒烟。戒烟是不需要准备的，它开始于你掐灭手中烟的那一刻，我以前每次戒烟前都要准备，最后准备了 3 年，失败了 3 年，其实每次都没有准备好，当你真正准备好的时候，就是你突然明悟吸烟的危害的那一瞬间，其实你已经完成了戒烟，以后只是拿时间去证明一下而已。</p><p>戒烟过程中你可能遇到生活工作压力大，跟朋友喝酒开心，情感生活不顺利，多年不见老友劝烟等等各种被拿来当复吸借口的理由，我看着这些理由感觉很可笑，完全是在给自己吸烟找理由。请记住生活中的各种喜怒哀乐不会因为你吸了多少烟而改变任何一丝一毫，不管你吸多少烟，它还是原来的样子，遇到问题请勇敢面对，而不是逃避。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当你真正的从心底里明白吸烟的害处。能站到高处看到深陷吸烟泥潭的自己，满身污泥侧身躺在那里，不仅浑然不知，还笑着往自己身上抹发臭的污泥。看着自己被控制着，被奴役着，迫使原本自由的自己每隔一段时间就要按照烟的指令去做事，你的生活、工作、学习都被它无时无刻干涉着，你竟然不愤怒，竟然还任由它在你的生活中自由的破坏，破坏你美好的旅途、好不容易集中的注意力等等。而且这其中你明明是一个受害者，但你却偏偏还要为此付出金钱的代价，即使你穷的快连饭都吃不饱了，但它还要去强迫你去为此付费。最后它还要让你付出生命的代价。</p><p>它就是抽烟，它是那么的无理蛮横，随意践踏着你，欺负你。它的唯一目标就是搞臭你的人，搞砸你的生活，最后搞死你。我是人，凭什么让它这么欺负，我不想再被这么控制着，我可怜这样的自己，我对它这样欺负我自己感到愤怒，我要反抗，戒烟是你唯一的选择，可以将它直接拍死，还你自由。</p><p>作为一个吸烟者，我渴望的无烟生活，是别人唾手可得的，已经被烟控制的我要经过很大的努力才能让自己自由。我会更加珍惜无烟的自由生活，也从心底里感觉我不会再上瘾，因为从心底里已经对烟产生了抵抗，它带给我的深深的伤痛将会一直警醒我。吸烟是一个坑，我不小心掉进去了，虽然受了很多苦难，但最终我从里面爬了出来，虽然伤痕累累，但不致命，这段经历将是我人生的一笔财富。</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>最后，感谢一路上包容我的人。感谢那些曾经帮助我、劝说我戒烟的人，谢谢你们!</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt; &lt;img src=&quot;/upload_image/quit_smoking.png&quot; alt=&quot;&quot;&gt; 不戒烟，无自由 &lt;/blockquote&gt;
    
    </summary>
    
      <category term="个人思考" scheme="yanchongsheng.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83/"/>
    
    
      <category term="个人思考" scheme="yanchongsheng.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>思考，快与慢</title>
    <link href="yanchongsheng.github.io/2018/04/01/%E6%80%9D%E8%80%83%EF%BC%8C%E5%BF%AB%E4%B8%8E%E6%85%A2/"/>
    <id>yanchongsheng.github.io/2018/04/01/思考，快与慢/</id>
    <published>2018-04-01T11:35:36.000Z</published>
    <updated>2018-04-17T10:06:01.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">《思考，快与慢》</blockquote><a id="more"></a><h2 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h2><h3 id="思考，快与慢"><a href="#思考，快与慢" class="headerlink" title="思考，快与慢"></a>思考，快与慢</h3><p>   原名：THINKING,FAST AND SLOW</p><p>   作者：【美】丹尼尔•卡尼曼</p><p>   译者：胡晓姣 李爱民 何梦莹</p><p>   出版社：中信出版社</p><p>   本版版次：2012年7月第1版</p><p>   ISBN：978-7-5086-3355-8/F.2633</p><h2 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h2><p>   如果5分是满分，该书在有评价系统的购书或评书网站上基本平均都超过了4分，上线以后，长期雄踞各大网站的畅销排行榜前10，每一个想了解大脑是如何工作的人几乎都读过这本书，很多畅销书也都基于本书的核心理论。</p><p>   以上评价不带任何的主观色彩，纯属客观描述。虽说畅销不等于好，事实上，我见过许许多多不值一看的畅销书，纯属精妙营销+羊群效应导致，但本书不属于此列。</p><p>   有人问我，一个人太理性了会不会不好？我的回答是，当然不会，因为何时“放出”感性也是属于理性的范畴。只有那些智识低下的人才会认为过度理性是不好的，因为这超出了他们的能力范畴。</p><p>   接下来就让我带你们看看这本好书，本书比普通书要晦涩，我尽量用大家能读懂的语言去描述。了解大脑的工作原理会让你在今后的判断和决策中持续受益，如有需求，请自行购买原书。</p><h2 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h2><p>   相信大家都听过系统1和系统2，形容大脑的两种运作方法的这个表述方式已经是很多书上“约定俗成”的称呼了，那么究竟它们各自掌管着什么？在运用起来的时候都有哪些特点？</p><p>   让我们走进大脑去看看。</p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>   用一个简单的思维实验作为开头：</p><p>   请你思考下文问题时，记得史蒂夫是从一个有代表性的样本库中被随机挑选出来的。</p><p>   邻居如此描述这个孩子：“史蒂夫非常腼腆，少言寡语，很乐于助人，却对他人或者这个现实世界没有兴趣。他谦恭有礼，做事井井有条，中规中矩，关注细节。”请问史蒂夫更可能从事哪种职业，图书管理员还是农民？</p><p>   很显然，很多读者的第一印象肯定就是图书管理员，这跟农民有啥关系呢？不过既然我这么出题，肯定有诈，那就选农民吧，但是我有可能知道你这么想，故意糊你呢，那就还是选图书管理员……如此循环，也得不到正确的结论。</p><p>   我们的大脑一见到描述性的东西，就容易产生画面感，描述得越具体，画面感越强，而这种画面感会调动起我们的经验，这就是为什么我们常常把“相似”当成一种最初的启发手段。</p><p>   有没有人想过，在美国，农民比图书管理员多出多少？大约是20比1吧，因此只要20个农民里有一个是中规中矩、谦恭有礼的，即使所有图书管理员都是完全符合上述描述，史蒂夫也更有可能是一个农民对不对？</p><p>   我们的生活中充斥着这种因为不了解大脑的运作原理而产生的刻板印象或者是偏见，比如娱乐圈都爱乱搞男女关系等……如果卓伟愿意偷拍你身边的人，你也许会发现你的身边也尽是类似的情况。身处娱乐圈，尤其是大牌明星，蛛丝马迹都逃不过那些利用他们的新闻来赚钱的人，所以并不是你在新闻中见得越多，脑子里出现的次数越多，就代表越频繁。</p><p>   大脑很容易产生很多系统性失误，这些失误有些是有益的，有些则是有害的，要更好地进行判断和决策，就必须搞清大脑的运作原理。</p><h2 id="系统1和系统2"><a href="#系统1和系统2" class="headerlink" title="系统1和系统2"></a>系统1和系统2</h2><p>   我们的大脑里存在着两套系统，用基思•斯坦诺维奇的术语来讲，叫系统1和系统2（我们在下面的书里会学到）。</p><p>   系统1用人话来讲，类似于我们的直觉，对事物进行无意识且快速的判断，不用怎么动脑，也可以叫快思考，比如你看到一条狗对你龇牙咧嘴，发出呜呜的低吼，大脑会启动系统1告诉你，这条狗对你不太友好。</p><p>   系统2会费点脑子，需要进行各种复杂运算，比如138*29是多少，你需要花点时间才能算出来，或许还得用上纸笔；又或者是一道复杂的逻辑题，你可能没法一下子给出答案，需要用系统2一步一步去求解，这个过程可以叫慢思考。</p><p>   很多人可能认为系统1看上去比较低级，就什么事情都得用系统2才对，并不是这样。系统1的自主运作的背后是有一系列的复杂计算的，这些计算可能不一定精确，但它足够节省时间，因此，系统1和系统2各有利弊，也各有合适的应用场景。</p><p>   比如见到类似蛇状的东西，我们的下意识总会先避开再观察，这就是系统1的作用，若是等我们静静分析它究竟是蛇还是绳再做决策，多试几次以后可能就没命了。</p><p>   系统2通常需要你的注意力，换句话说，它是会极大地耗费你的脑力进程的，我们在学习《暗时间》的时候，提到了在走路、洗澡的时候去利用暗时间思考问题，这是由于走路、洗澡属于系统1的范畴，你不需要考虑先迈左腿还是右腿，自动就会走，你不需要考虑先抹沐浴乳还是拿毛巾，自动就洗完了，所以你的大脑进程可以留给系统2去思考一些问题，也就是我们把“暗时间”用起来了。</p><p>   但如果你到了一个陌生的地方，边找路边计算138*29，那就不行，因为两者都用到了系统2，我们常说的“一心不能二用”，大多数情况指的就是两件同样需要耗费较高注意力的系统2的事。</p><h2 id="强大的系统1"><a href="#强大的系统1" class="headerlink" title="强大的系统1"></a>强大的系统1</h2><p>   系统1非常高效、快速，一旦遇到熟悉的场景或类似的状况时，就会在最短的时间内起作用，不过它有时也会遇到麻烦，它总基于过去的经验行事，有着严重的成见，为此我们发明了一个词叫“三思而后行”，尤其是在现代社会，我们需要系统2的更多参与。</p><p>   那么我们可不可以在只想要系统2介入的时候不让系统1进来？这很难，因为几乎所有的事，都是系统1率先介入的，相当于它会先将现有状况进行一遍审视，只有当它搞不定、败下阵来的时候，系统2才能接上任务。</p><p>   这也就意味着，如果你想在貌似简单的复杂事情上变得更不容易出错，就必须对很多事的细微差别有足够的敏感度，这样你的系统2就会比别人更快地接管大脑。</p><h2 id="为什么要做笔记"><a href="#为什么要做笔记" class="headerlink" title="为什么要做笔记"></a>为什么要做笔记</h2><p>   系统2的工作记忆容量决定了我们在完成一项复杂任务时能否把注意力分配到其他的事情上。</p><p>   如果当前的复杂任务对你来说还不算十分困难，那么也许你还可以有一点点注意力注意到身边的其他事，比如当你在开会时用手机浏览网页，顺带点简单思考，那么当领导说到重要处的时候，或许你还会有点印象；如果你进行的是即时战略类游戏，那么恐怕你就很难记起会议上的任何内容，甚至有人喊你都不一定能听得到，因为此时你的系统2是满载运行的。</p><p>   这就是我们要做笔记的原因，我们已经在好几本书中提到了做笔记，看，在本书内又提到了。</p><p>   你会发现，当你开始动笔的时候，你思考的内容往往比最初想象的多，那是因为当你记下一个观点的时候，这个观点就不占用你的工作记忆内存了，你的CPU可以满载用来完成延伸、推导等复杂任务，但如果你还得同时记着刚才的观点，或者2个、3个观点，那么你的系统2就没有能力同时完成更多的任务。</p><h2 id="系统2的极限"><a href="#系统2的极限" class="headerlink" title="系统2的极限"></a>系统2的极限</h2><p>   其实人脑跟电脑是有很多类似之处的，比如CPU的运行。</p><p>   当一个人在散步的时候，系统1靠本能反应散步，系统2也可以进行一些简单的思考，此时CPU使用程度不高，人也会感觉到轻松、舒适。</p><p>   但当这些简单的思考变成一道难解的逻辑题时，绝大部分人会不自觉地停下脚步开始思考，这说明如果系统2一旦满负荷运行，可能连系统1都会受到影响。同理，一个老司机开车时想事情不是不可以，但想过于复杂的事情就要当心了，这会极大地增加对不确定风险的响应时间。</p><h2 id="处理极限状态"><a href="#处理极限状态" class="headerlink" title="处理极限状态"></a>处理极限状态</h2><p>   系统2处于极限状态在很多时候我们是欢迎的，因为只有这样，我们才能迸发出更多的潜力，CPU不满载通常是做不好事情的。</p><p>   但CPU满载的时候也是意志力最薄弱的时候，我们常常说意志力是有极限的，是会耗尽的，当你把系统2开到极限的时候，这时有人端着甜食进来，你会更加抵抗不了诱惑，除非你在之前刚刚吃过。因为意志力也是需要系统2开起来，对远期和近期目标进行对比博弈之后才能有的，满载时候意志力往往开不起来。</p><p>   因此当我们正在做艰苦的脑力劳动时，需要尽量避免外在干扰，否则，就算你是极有自制力的人，也有可能会变得轻率、自私和易怒，比如在精疲力竭的时候更容易被渲染力强的广告说服。除非你在之前先补充了足够多的能量，可以应付较长时间的系统2满载损耗。</p><p>   由此可见，如果你是一个参加高考的学生，作文卷子若是有幸被安排在改卷老师的午餐后，可能会对你得高分更为有利。</p><h2 id="出两道题"><a href="#出两道题" class="headerlink" title="出两道题"></a>出两道题</h2><p>   作者在书中出了两道题，我将其搬出来供大家思考。</p><p>   1、球拍和球。</p><p>   球拍和球一共1.1美元；</p><p>   球拍比球贵1美元；</p><p>   问球多少钱？</p><p>   2、逻辑推理。</p><p>   所有的玫瑰都是花；</p><p>   有些花会很快凋谢；</p><p>   因此，有些玫瑰也会很快凋谢。</p><p>   推理是否正确？</p><p>   每题请在5秒内想完，给出答案后翻到下一页。</p><h2 id="过程与结论"><a href="#过程与结论" class="headerlink" title="过程与结论"></a>过程与结论</h2><p>   据调查，有相当一部分人在第一题里会回答0.1美元，因为他的系统2并没有介入，他的直觉告诉他，就是0.1美元，于是系统2就休息了。</p><p>   有相当一部分人在第二题里会回答“正确”，这个问题看上去更难，答错显得有些理所当然，但其实问题会更加严重一些。</p><p>   我们看公众号也好，读新闻也罢，很容易就会因为结论符合我们的期待，从而认为推导过程也是正确的，这种单细胞的思维方式是阻止我们进步的一块大石头。</p><h2 id="今日导言-1"><a href="#今日导言-1" class="headerlink" title="今日导言"></a>今日导言</h2><p>   通过前面对系统1和系统2的描述与区分，我们应该知道，要做到真正的理性认知是很不容易的，但我们今天要说的是，即使你已经完全拥有了理性认知，很多时候你也会不知不觉被感性所影响。</p><h2 id="理性认知"><a href="#理性认知" class="headerlink" title="理性认知"></a>理性认知</h2><p>   常期不爱用系统2来思考的人，我们可以称之为惰性思考者或者是思考的吝啬鬼，这不是卖弄概念，而是这类人本就应该有个好记的专属标签用来归类，因为人数太庞大了。</p><p>   肖恩•弗雷德里克有一些关于认知反应的测试，他发现，喜欢在一两道题里用系统1直接给出答案的人，在其他事情的表现上也大体如此，这些人的系统2监测功能通常会比较弱，他们有更差的自制力，更喜欢用直觉思考却懒得论证，喜欢即时享受，不愿延迟满足，哪怕延迟可以得到更高的收益，就连收快递，也愿意多付出更多的钱以便能更早收到。</p><p>   负责这一块区域的是慢思考，我们也可以称之为理性。</p><p>   理性对于任何人的决策和利益都起着至关重要的作用，每个人都该学着理性，有意思的是，理性跟高智商的关系却没有那么大，你可以是一个认知高手，你可以是一个理性主义者，但你不必拥有很高的智商，这对于那些非天才选手来说，是一个好消息。</p><h2 id="系统1的惯性（1）"><a href="#系统1的惯性（1）" class="headerlink" title="系统1的惯性（1）"></a>系统1的惯性（1）</h2><p>   我们的很多非理性的错觉常常是系统1带给我们的，比如说系统1的惯性，或者说惰性。</p><p>   当你的男朋友在第一个情人节给你创造了惊喜以后，你对他在第二个情人节的表现就有了期待，当他在第二个情人节用另一种更佳的方式创造了惊喜的时候，你虽然也会惊喜，但不会有那么惊喜，这就是系统1的惯性，当一件事发生之后，哪怕发生了更不可思议的事，系统1也会让你习以为常。</p><p>   系统1的惯性时间可以持续很久，第二年没有，第三年没有，第四年有了也会受到第一年的影响，只要是某个情境调动了你记忆里熟悉的模块，你的反应就会趋于平常。</p><p>   显然，这种对事物的认知方式是非理性的，但这也是一种让人类本身变得强韧的方法，毕竟，如果不是变得越来越“麻木”，很多时候就无法承受坏事带来的情绪冲击。</p><h2 id="系统1的惯性（2）"><a href="#系统1的惯性（2）" class="headerlink" title="系统1的惯性（2）"></a>系统1的惯性（2）</h2><p>   说到系统1的惯性，最出名的恐怕就要数光环效应了，很多时候又被叫作晕轮效应。</p><p>   当我们对一个人有了正面好感的时候，就会倾向于将他的其他特质也看成是正面的，比如看到一个形象气质佳的帅哥或者是美女，我们更倾向于认为他（她）是有教养的，家庭环境优渥的，有才艺特长的，彬彬有礼的，经济状况良好的等等，事实上，很可能一毛钱关系都没有。</p><p>   作者举了一个很有意思的例子，说你觉得Allen和Ben两个人看起来怎么样？</p><p>   Allen：聪明、勤奋、冲动、爱挑剔、固执、妒忌心强；</p><p>   Ben：妒忌心强、固执、爱挑剔、冲动、勤奋、聪明。</p><p>   看了之后，大部分人可能会倾向于更喜欢Allen一些，毕竟他聪明、勤奋，只不过有一些聪明人都有的小缺点而已，比如聪明人都爱挑剔，聪明人都比较固执，聪明人都更有上进心，所以容易妒忌他人；而Ben就不一样，一个妒忌心强、固执、爱挑剔、冲动的人就算有点聪明也只能是小聪明，而且会比较危险。</p><p>   看，仅仅是把描述词换一个位置，你的系统1就能给你带来这么大的理解偏差。</p><p>   这让我想到了《中国好声音》或是《我是歌手》这样的节目，如果该歌手出场时的那首歌惊艳到了我们，通常第二首歌哪怕发挥并没有那么出色，我们也会倾向于认为他比较出色，毕竟一个如此出色的人是不太会犯低级错误的，在音乐这种主观领域里尤其如此，连评委都会为他找理由，就像是皇帝的新装一样。</p><p>   但试想一下，如果将两首歌换个个儿，也许他根本连入围的资格都没有。</p><p>   一个足够理性的人，必须尽最大努力去克服系统1的惯性，在脑子里要像警察办案那样，把证人证言一一隔离，以免让本不存在偏见的证人相互影响。</p><h2 id="慢思考（1）"><a href="#慢思考（1）" class="headerlink" title="慢思考（1）"></a>慢思考（1）</h2><p>   在情况并不十分紧急的前提下，养成慢思考的习惯是有好处的，但这种慢思考需要考虑的东西非常之多，因为现实生活中有着很多的陷阱，我们可以给出其中几个，剩下的需要学员们自己去举一反三。</p><p>   1、比如情感偏见，这是很多人都容易犯的毛病。当我们看到课桌、椅子的宣传照，我们就更有可能支持加强教育资金投入的提案，当我们本身对转基因反感，就会不相信那些转基因无害的论据，我们会先从论据本身进行驳斥，如果没什么可驳斥的，就会从提出论据的人的属性，比如人品之类的进行推断，比如他的私德有亏，那么他提出什么观点都是不对的，无论对方是科学家还是什么家。</p><p>   2、再比如某些长寿村或者是癌症村，你会发现这样的地方时不时就会出现在人们的视野。这些地方有个共性，通常很小，有点世外桃源的感觉，人们会剖析这些地方的水、空气、食物是不是特别好或者特别差等。</p><p>   然而，如果我们仔细地思考一下就会明白，但凡小样本的结果，想要推出普适性都是很困难的，或许最大的价值只有新闻价值。某个小地方癌症高发，并不一定由于当地的环境不好，很可能是统计的样本不够大，时间不够长导致的偏差，越是小样本，处于极端的概率越高，这是个常识，但我们往往会因为一些吸引眼球的东西忘记常识。</p><h2 id="慢思考（2）"><a href="#慢思考（2）" class="headerlink" title="慢思考（2）"></a>慢思考（2）</h2><p>   3、很多人会试图预测彩票的走势，哪怕有那么一点点概率学常识的都能知道完全随机事件是没有所谓的走势预测这一说的，但就是有人对此乐此不疲，如果他们能认真地想一想，就会知道自己忽略了一个简单的逻辑：如果有人能在这种游戏博弈中长期占到优势，显然彩票部门马上就会歇业。</p><p>   4、几乎所有人都知道锚定效应，但最终大多数人还是会中招。为什么？因为大多数人都无法完全摆脱锚定带来的影响。</p><p>   比如有人告诉你，华佗是250岁才过世的，你肯定不会相信，因为你看得出这是很荒唐的，但你也许会猜100岁或者80岁，很难去猜50岁或者60岁。</p><p>   再比如明知道这件500元的衣服可以还价，对方肯定是往高了喊，很多人最多还到250元，还随时准备让步。有多少人会在对方抛出500元的时候第一口就还到50元？大概率不会，因为这看起来像在找茬。</p><p>   有人会说，那是因为他们不够专业，只要对衣服足够熟悉就能大致估计出范围，不，你太自信了。</p><p>   实验证明，不管是衣服，还是房价，那些专业人士都无法不受锚定效应的影响，哪怕他们事先有所防备。区别仅仅是非专业人士在看到结果后会承认自己受到了锚定效应的影响，而所谓的专业人士则更有可能矢口否认。</p><p>   要在一定程度上削弱锚定效应的影响，或许，后提建议的一方只有同样给出一个足够离谱的建议，离谱到你认为对方几乎百分之百不会接受，才有可能起到平衡作用。</p><h2 id="感性影响理性"><a href="#感性影响理性" class="headerlink" title="感性影响理性"></a>感性影响理性</h2><p>   理性认知并没有那么简单，就算我们将上面的陷阱背得滚瓜烂熟，又有足够的时间进行慢思考，也未必有如我们自己认为的那般理性。我们的理性，常常会在不知不觉间受到感性的影响。</p><p>   比如我们在《黑天鹅》中学过的“情感会影响理性判断”，当我们时常看到恐怖袭击的新闻，我们就会在日常生活中高估其发生的概率，当有生动的图片或视频出现在我们眼前时，将高估得尤其离谱，这通常和我们的直觉相悖。</p><p>   “一场洪灾将导致1000人丧生”和“一个地震频发的地方发生N级地震引发洪灾，导致1000余人丧生”，很多人会认为后者更合乎情理，因而判断其发生的概率更大。但这很明显有违逻辑，因为前者的概率中包含了后者，只是后者似乎更具体、更生动、更合乎情理，但其实却更不可能成为现实。</p><p>   别说这样的理论是没有实际应用价值的，能应用的地方太多了，感性影响理性在投资中就是很要命的。</p><p>   投资新手往往是这样：看上了一个投资标的后，当接触到的是许多正面的报道或资料时，就会低估其风险；反之，接触到的都是负面素材时，则容易高估，哪怕他们明知道自己能接触到的信息只是很小的一部分。</p><p>   感性是和系统1直接对话的，这几乎无法克服，弱小的我们只能通过刻意养成长时期使用系统2的习惯去快速感受接触系统1时的不适。</p><h2 id="今日导言-2"><a href="#今日导言-2" class="headerlink" title="今日导言"></a>今日导言</h2><p>   未来是不可预测的，我们在《黑天鹅》中就已经学到过，但当真的到了未来的时候，人们又常常觉得自己“本应该”想到，这是一种错觉。</p><h2 id="思维定式"><a href="#思维定式" class="headerlink" title="思维定式"></a>思维定式</h2><p>   每个人几乎都有思维定式，我也有。思维定式是简化记忆空间，对事物做出快速反应的重要手段，并不全然是坏的，但它将无一例外地加深我们的刻板印象，或许有的人可以利用强大的系统2去消除一部分，但终究没法做到完全不予理会。</p><p>   比如一听到清华或者北大毕业的，我们就会自动将其加工成学霸形象，比如知道对方是法国人或者意大利人后，我们就会认为其非常浪漫，比如一说到温州人、浙江人、河南人、东北人、香港人、贵州人等，我们就认为对方拥有某种特质……这都是将个体和群体混淆的思维定式。</p><p>   有时候在群体中拥有某种特质的人的确更多，但不代表每个成员都如此；有时候甚至连“拥有某种特质的人数更多”都只是错误的刻板印象而已，比如某些国家的一听说你是中国人，可能会以为你很擅长搏击，因为“中国功夫”，事实上，连“平均更能打”的事实都可能只是臆想出来的。</p><p>   在系统2有足够时间参与的前提下，思维定式几乎没有任何优势，但很多时候我们没有足够的时间去细细判断，比如在野外碰到纹身的男人，我们本能就会更加警觉，而不是需要通过多方面去对他展开考察才能下定论。</p><p>   因此完全摆脱思维定式，也不一定就好，至少它会让我们变得迟缓，毕竟人需要快速决定的时候，都是只能按照概率来做判断的。</p><p>   我们能做的，就是通过不断修正，把系统2对思维定式的一次次改造结果加入到新的思维定式中，让首次出现的思维定式变得更为精准和具备可参考性。</p><h2 id="均值回归"><a href="#均值回归" class="headerlink" title="均值回归"></a>均值回归</h2><p>   思维定式让我们习惯于为各种现象找理由，因为找到理由，剖析出我们认为的规律之后，下一次就可以进行快速运算了，不过有时候，由于我们的不完全归纳或实验过程并不严谨，常常会找错规律。</p><p>   你常常可以在赌徒身上看到这样的现象，他们喜欢用一些愚蠢的小诡计，比如在运气不好的时候换个位置，出去抽根烟，或者上个厕所以此来改换一下手气，如果这次成功了，下次他们还会乐此不疲。</p><p>   或者在学校里，老师刚表扬了某次测验成绩进步很大的孩子，结果下一次测验中，孩子可能不会表现得这么好，老师会认为他骄傲了，其实很可能不是。因为本来孩子就只有超常发挥才能受到老师的表扬，既然是超常发挥，就一定会受到一个规律的影响——均值回归，所谓的“超常”必然是不可持续的，如果是可持续，那就是“正常”发挥了，老师也不会表扬。</p><p>   均值回归是一个很重要的现象，它需要的是系统2的参与，因为我们的系统1常常会自动根据显性证据去寻找相关性，比如将一些毫无关联的事跟偶然的成功联系起来。</p><p>   这也是为什么基于经验的归纳很多都不靠谱的原因，比如本草纲目中有些治病的方法就非常的荒谬，很有可能就是因为古人缺乏严谨的科学实验态度和科学素养，从而因为几次偶然的成功（其实是身体自愈了）就犯下了草率归纳的错误。</p><p>   你的系统2需要经常地刻意训练。</p><h2 id="不知道的事"><a href="#不知道的事" class="headerlink" title="不知道的事"></a>不知道的事</h2><p>   我们有着许许多多不知道的事，但在很多时候我们以为自己都清楚，就像前两天说的光环效应，我们总是会被某一特质影响对于全局的判断。比如说在挑选伴侣的时候，我们觉得对方善良、孝顺，就认定是个可以结婚的对象；或者说他是个好人，那么他就只做好事，他私德有亏，所以他教书本事可能也不怎么样。</p><p>   这种基于片面因素导致我们认为有理由的判断，和我们自以为的“知道”都是错觉。关于过去、现在、未来的很多事我们都是完全无法找到缘由，无法正确归纳和预测的，但我们常常认为自己本应该知道。</p><p>   比如2015—2016赛季的NBA总决赛，当7局4胜的比赛中，勇士队以3比1领先时，所有人都认为勇士队是更为强大的一方，他们可以找出各种理由各种数据去支持，比如他们打破了NBA联盟常规赛历史胜场记录，所有队伍都跟勇士队至少相差2个等级，表现得像一群专家（包括很多专家）。但当骑士队最终连扳3局夺冠后，很多人就不认为勇士队是更为强大的一方了，至少认为骑士队跟他们处于同一个等级。</p><p>   他们依然表现得像一群专家，用各种数据来证明骑士队的防守和三分是如何厉害，勒布朗•詹姆斯是如何无敌，凯里•欧文是如何拥有大心脏，好像完全忘了几天前的想法似的，如果有人事先将他们几天前的预测录下来的话，他们会捶胸顿足：啊，我本该知道的。</p><p>   事实上，真的知道吗？</p><h2 id="后见之明"><a href="#后见之明" class="headerlink" title="后见之明"></a>后见之明</h2><p>   “我本该知道的”是一种后见之明，很多人都有后见之明，这也是我们周围最讨厌的一类人：瞧，我早跟你说了这么干是不行的。</p><p>   他们有时候会预测正确，但更多时间会预测错误，当他们预测错误的时候，他们通常不会说什么，但当一旦正确的时候，就会大肆渲染自己的预测能力，其实这是一种对正确率的选择性忽视，跟预测完全扯不上任何关系，毕竟一只不走的钟一天还能对两次。</p><p>   汶川地震之后，很多人晒出自己的预测截图或者录音，说自己早就跟地震局进行过警示，这让地震局显得都是酒囊饭袋，还不如周易八卦排盘出来的预测灵验。</p><p>   但事实却并非如此，事实是每天都有成百上千的人到地震局说要地震了，而只要有一次地震，这些人里总会有人对上一次，就跟我们在《黑天鹅》里学的那只用射飞镖的方式打败华尔街专家的猴子一样，因此，后见之明需要更客观地去看待。</p><p>   插个题外话：在真正严谨的科学领域，以目前人类的知识水平，民科已经没有崛起的土壤了。如果你听说这些领域里“高手在民间”，或者“在科学家之前，哪个山沟沟里的人早就研究出来了”，通常都只是骗子或者无知者而已。</p><h2 id="未来不可预测"><a href="#未来不可预测" class="headerlink" title="未来不可预测"></a>未来不可预测</h2><p>   后见之明之所以令人讨厌是由于未来不可预测。明明出现某个结果只是概率问题，但就是有另一拨人愿意在其刚好正确的时候大放厥词，怎么能不令人生厌呢。</p><p>   就像股票一样，股票的未来通常是不可预测的，尤其是短期走势，但总有人认为自己能在不作弊的情况下挣到钱。他们总认为他们通晓一些别人并不通晓的技能或信息，这样就能把自己的股票在高位派发给下一位傻瓜，事实上，市场上所有的人都是这么想的。</p><p>   股票市场上有更多的“本以为”，因为这是真金白银，几乎所有人都会对该买还是该卖做双边的研究，研究过程的印象都很深刻。当他们执行了一边，而结果走势倒向了另一边时，他们会很快想起自己在说服自己购买另一边时的那些理由，并责怪自己为什么不坚持下去，因为“明明”有机会赢的。</p><p>   而且有个很有趣的现象，对股票研究越深入，越是“专业”的人士，他们的“本以为”、“本可以”就越是顽固，因为他们说服自己购买另一边的理由越是充分。</p><p>   可是，这样的“机会”事实上只是镜花水月而已。</p><h2 id="今日导言-3"><a href="#今日导言-3" class="headerlink" title="今日导言"></a>今日导言</h2><p>   这本书确实不太好理解，虽然我已经尽量让它非常直白。我们在系统1和系统2之间绕了足足三天，差不多每个人都知道了系统1和系统2代表着什么，以及什么时候系统1是有用的，什么时候我们应该更多地使用系统2。</p><p>   接下来让我们来看看更多关于它们的应用。</p><h2 id="什么是直觉？"><a href="#什么是直觉？" class="headerlink" title="什么是直觉？"></a>什么是直觉？</h2><p>   我们一直说，系统1在现代社会中可适用的情境并没有那么多，但我们却抑制不住地使用。那么，系统1也就是那个被称为“直觉”或第一反应的东西，到底是从哪里来的呢？</p><p>   很多人会认为，直觉就是不过脑子，这种说法是不正确的。直觉要过脑子，只不过它过得比较快，它是复杂思维简单化的提炼，虽然跟条件反射有所区别，但比起系统2，它可能更接近条件反射。</p><p>   说起某个事情，几乎人人都有属于自己的直觉，为什么有的人直觉准，有的人直觉不准，主要是看这个人本身在某方面的积累范围有多广，积累时长有多长。</p><p>   比如一个象棋高手，让他不思考就决定下一步该走哪里，肯定是比普通人的直觉要好，那是因为在这之前，他下了无数盘棋，各种棋各种情况他遇到了太多，形成了下棋的直觉，他面对任何形状的棋都有一种大体的熟悉感，也叫做“棋感”。Alphago运用的就是棋感原理，之所以它的棋感比人类更好，是因为它经历的战斗更多。</p><p>   很多人说女人的第六感很准，其实是没有道理的，所有直觉都是靠长期积累得来的，分人、分事儿。成天在琢磨老公会不会出轨的，对小三的直觉肯定很准，如果一心扑在工作上的，怎么都准不了。</p><h2 id="过于乐观的推断"><a href="#过于乐观的推断" class="headerlink" title="过于乐观的推断"></a>过于乐观的推断</h2><p>   直觉是系统1，它可以在时间不充裕、仓促的环境下做出最有利的判断和选择，但它毕竟是经验主义主导的，且很容易受到相关外在条件的影响，从而在判断时出现偏离。</p><p>   比如我们对未来的推断。我们在前两本书中都学到过，我们在预测未来这件事上经常是不靠谱的，因为我们既没有预测各种黑天鹅的能力，也多多少少在判断一件事上会受到现有情绪或欲望的影响。</p><p>   就像写书这件事，当你写完第一章的时候，大约是1个月，你预计书一共6章，那么你认为6个月可以完工，也是这么跟出版社签的合同。这种纵向的推理，是普通人预测未来的基本方式，作者称之为内部意见。</p><p>   不过这种推理方式却有着很多极其严重的问题：</p><p>   你写的这一章会不会恰好是特别简单的部分？</p><p>   你写这一章时，热情是不是特别高涨？</p><p>   你写这一章时，是不是恰好没有经历生病、失恋、离婚等不可预知的意外事件？</p><p>   你写这一章时，有没有为了尽量争取出版而极度压缩自己的生活时间？</p><p>   ……</p><p>   内部意见会受到很多潜在利益或情感的影响，从而让自己偏离真正的现实，而使用外部意见则会相对准确得多。</p><p>   同类型作者完成10万字的新书平均需要多久？</p><p>   有多少人最后没有完成书籍？</p><p>   以公众号或者其他平台的产出为参考，你跟其他作者在创作速度上相比处于什么样的地位？</p><p>   ……</p><p>   你会遇到的黑天鹅，别人也有可能遇到，这样的外部意见条目越多，样本数越多，就能更好地避免直觉谬误，预测的精准性就越高。</p><h2 id="乐观偏见"><a href="#乐观偏见" class="headerlink" title="乐观偏见"></a>乐观偏见</h2><p>   乐观是好事，但乐观也有可能带来偏见，带来风险。</p><p>   我们觉得自己常常被低估，但事实上可能并不是；我们认为自己对公司的作用不可替代，事实上能替代我们的人并不少；我们觉得自己胜券在握，黑天鹅却总会让我们措手不及。</p><p>   乐观能让我们以更加积极的态度面对人生，但却不一定能跟理性挂上钩。比如说你明明知道民营企业的平均寿命不到3年，甚至有为数不少的企业都撑不过1年，但直到倒闭之前，你都不会认为自己是其中之一，否则你就不会开始；再比如我们前面学过的，你明知道离婚率是1/3，但你步入婚姻殿堂的时候通常认为自己是0%。</p><p>   我曾经是体制内的一员，我的同事们绝大多数都隐隐透露出单位取得的成绩里，自己的努力占到很大一部分。不需要把他们的百分比都加起来，只需要三四个人，就能超过100%，事实上，单位里有几十号人。</p><p>   这种非理性估计的乐观显然会让他们在日常的举动中做出不理性的决策行为，比如说在没有实力的前提下摆谱，最终只能被嫌弃。</p><h2 id="风险厌恶（1）"><a href="#风险厌恶（1）" class="headerlink" title="风险厌恶（1）"></a>风险厌恶（1）</h2><p>   对风险的厌恶是一种直觉，这种直觉强大到常常会盖过理性，不然怎么说掉50元的心理损失远大于得到50元的心理收益呢？</p><p>   比如有这样的一个实验：</p><p>   A：抛硬币决定，如果是正面，你将得到100美元，如果是背面，你将损失10美元。</p><p>   B：无论如何你都将得到40美元。</p><p>   你选哪一个？</p><p>   实验证明，大多数人选择了B，也就是他们明明知道按照收益期望来算，肯定是A更为划算，但他们的理性没法盖过直觉上对风险的厌恶。</p><h2 id="风险厌恶（2）"><a href="#风险厌恶（2）" class="headerlink" title="风险厌恶（2）"></a>风险厌恶（2）</h2><p>   相比于得到，人们更讨厌失去，哪怕两边的价值明明是完全对等的。人们似乎会赋予自己拥有的东西以额外的价值，虽然书里并没有说，但我可以为它做一个解释，这种额外的价值就是情感连结。</p><p>   “这东西是我的”，它的价值上被赋予了“我的”这种情感以后，它就变贵了，但只是对于我变贵了，对于别人是不变的，因为别人的情感并不在上面。</p><p>   这种由于感性赋予的价值导致的非理性，是很常见的。比如有个实验，给两个班的孩子发礼物，一个班发昂贵的钢笔，另一个班只发巧克力。下课前，实验人员对着拿到钢笔的班级拿出巧克力，对着拿到巧克力的班级拿出钢笔，并指引他们可以进行交换，结果只有约10%的孩子进行了交换。</p><p>   换句话说，哪怕对面的东西价值高于自己手里的，很多人也不愿意为了获得更高价值而承受较少的损失。</p><p>   有一个完全类似的实验，只不过实验对象是一些成功的商人，结果交换的比例要高得多，这说明每个人的理性程度都是不同的，有那么一些人，可以不受或少受影响。</p><h2 id="今日导言-4"><a href="#今日导言-4" class="headerlink" title="今日导言"></a>今日导言</h2><p>   最后一天，让我们来看看有关大脑的那些思维陷阱，你会发现，我们的大脑真的是一个远古时代的产品，它的很多思维习惯都带着远古时代的印记，而尽力摆脱这些框架，才能在现代社会更好地立足。</p><h2 id="可能性"><a href="#可能性" class="headerlink" title="可能性"></a>可能性</h2><p>   人最容易出现非理性行为的，是在可能性上。</p><p>   我们以打赌为例，你愿意为你赢的概率增加1%付出多少钱？假如胜者的获利是100万，那么你可能觉得自己最多愿意付出1万元，按概率来讲，这是符合我们的理性的。</p><p>   但如果本来你获胜的概率是0，从0到1%，让你付出1万2千元，或许你还是会肯，这时候就不是理性在起作用了，而是主宰“可能性”的感性。从不可能到可能，你愿意多付出额外的成本，请参照彩票，按照概率来算，彩票5毛钱一张都是亏的，但很多人却愿意付出2元钱去购买一张。</p><p>   想想吧，如果你赢的概率是65%，多付出哪怕是8000元让你增加到66%，或许你也不会肯，但对极小概率事件的“可能性”的高估，让你愿意为了可能性而付费。</p><h2 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h2><p>   除了可能性，我们还愿意为了确定性付费。</p><p>   假如你被卷入了一桩官司，胜者可以拿到100万，律师告诉你，官司有95%的可能性会赢，此时如果一家第三方风险机构找到你，要把你手上的官司以92万买走，此时虽然你明明损失了（你的预期期望收益达到95万），但大部分人还是会选择成交。</p><p>   这不符合理性，但“确定性”跟“可能性”一样，从感性认识来看，都有溢价。</p><p>   再举个简单的例子，医生说你有1%的可能性会瘫痪，你愿意付出多少钱来规避这1%？不出意外，绝大部分人肯定会出高于1%原本应有的价值。</p><h2 id="对罕见事件的高估"><a href="#对罕见事件的高估" class="headerlink" title="对罕见事件的高估"></a>对罕见事件的高估</h2><p>   我们刚刚学习完《黑天鹅》和《反脆弱》，里面都提到了对罕见事件的高估效应。</p><p>   以色列频繁遭遇人肉炸弹的那段时间，国内人心惶惶，3年内共发生了23起炸弹袭击事件，造成236人死亡，足以让每个人都感到恐惧。</p><p>   然而以色列每天坐巴士的人就约有130万，遇到炸弹袭击的概率照理说是小到可以忽略不计，但由于媒体的大肆报道，恐怖画面的不断回放，人们的不断交谈，使得绝大部分人的理性被情绪所支配，几乎所有人都尽量远离巴士，哪怕坐着巴士，也显得比较焦虑。</p><p>   正如我们在前两本书中学到的那样，画面感会激起我们的感性部分，从而高估罕见事件的发生概率。</p><p>   至于有没有低估的情况？当然有，黑天鹅事件就常常被低估，因为人们总是把“没见过”跟“不存在”混为一谈。</p><h2 id="克服心理风险"><a href="#克服心理风险" class="headerlink" title="克服心理风险"></a>克服心理风险</h2><p>   理性评估风险是一种能力，因为克服系统1的影响是不容易的。比如我们之前说的损失厌恶，你怎么控制自己与生俱来的偏好呢？如果对损失的厌恶程度是获利的欣喜程度的2倍，这很明显会立刻让你在投资中变得心态失衡。</p><p>   虽然作者并没有详细指明，但在私塾的版本里，我会给出一个专有称呼，叫心理风险。</p><p>   很多人做股票，在模拟盘的时候，收益还是不错的，但进入实盘以后，亏得一塌糊涂，主要就是由于模拟盘的损失和获得是虚拟的，它不包含心理风险，而实盘的真金白银让投资者增加了心理风险，而且越是不习惯使用系统2的，心理风险就越大。</p><p>   那么有没有办法解决呢？</p><p>   也是有的。</p><p>   将次数尽量多的打包，就能减少这类心理风险。作者举了个例子，当你有一半可能赢200块，一半可能输100块的时候，你的厌恶和欣喜程度可能是差不多的，但如果你玩上2次，那么你只有25%的概率输钱让你不爽，如果你玩上8次，16次……你会发现，你的心态会越来越好，因为你几乎不会输钱，也就不会受到心理风险的影响。</p><p>   所以股票也是一样，为什么要尽量减少交易的次数？因为每损失1块钱，你的厌恶程度是获利2块钱的欣喜程度，所以要将中间尽可能多的涨跌博弈打包起来，很长一段时间才去关注一次，这样你才会更不容易受到频繁厌恶损失的心理风险的影响。</p><h2 id="过去的就是过去"><a href="#过去的就是过去" class="headerlink" title="过去的就是过去"></a>过去的就是过去</h2><p>   说到股票就停不下来了，因为这是最考验人性的地方。我们常常会遇到这样的情况，当我们还没有很想卖某些股票的时候，急用钱了，必须要卖掉一些。</p><p>   那么你会卖掉哪些呢？是已然盈利的那些，还是正处于亏损的那些？</p><p>   大部分人都会卖掉那些盈利的股票，因为让盈利落袋，让亏损留在账面损失是大多数人的心理，也是大多数人的做法。</p><p>   这在心理学上叫做处置效应。</p><p>   我们在买股票的时候，常常会为每一支股票开设一个心理账户，当我们关闭这些账户的时候，我们会希望每一个账户都是盈利的。</p><p>   学了这么多思考之后，再想想，分割每一个账户要求独立盈利真的有意义吗？</p><p>   我们前面学过了，怎样才是最好的降低心理风险的方法？将盈利和损失尽可能打包。</p><h2 id="让过去过去"><a href="#让过去过去" class="headerlink" title="让过去过去"></a>让过去过去</h2><p>   让过去过去，前一个过去是past，后一个过去是pass。</p><p>   不管是账面盈利还是账面损失，钱就是钱，数字也一样是钱，盈利和损失已经是既定事实，那么对于优秀的投资者来说，之前的盈利或者损失根本不应该成为考量未来的因素，而是应该以归零的心态去看待自己手上的股票。预期未来会涨，那么无论盈利还是亏损，都应该保留，反之亦然，这跟你目前是盈利还是亏损不应该扯上关系。</p><p>   这就像有些人花钱买了电影票，进去之后发现电影无比难看，但这时候几乎不会有人出来，他们就算睡也得睡上两个小时，这都是放不下沉没成本的典型例子。</p><p>   过去的就是过去了，当你买完电影票的时候，看不看，成本都是既定事实，睡了两个小时，其实不仅没有把票价值回来，造成的还是额外的损失。</p><h2 id="愚蠢的大脑"><a href="#愚蠢的大脑" class="headerlink" title="愚蠢的大脑"></a>愚蠢的大脑</h2><p>   从上面这么多例子来看，大脑其实是个不易掌控的，常常会做蠢事儿的物件，而影响它最多的，则是来源于我们的框架思维。</p><p>   请看下面这个被引用很多的问题：</p><p>   有一场疾病可能会夺取600人的生命，此时你有两个选择：</p><p>   A：200人会获救；</p><p>   B：1/3的可能获救600人，2/3的可能一个人也救不了。</p><p>   很多受试者选择了A，因为毕竟能救多少是多少。</p><p>   接着我用不同的框架再说一次：</p><p>   A：400人会死；</p><p>   B：1/3的可能都能得救，2/3的可能有600人死。</p><p>   很多受试者选择了赌一把，因为直接死400人太残忍太多了，万一都能得救呢？</p><p>   不知道你们有没有发现，上下两个其实说的是一回事儿，但只要我换一个框架，人们的思维就会发生变化，大脑就会发出完全不一样的指令。</p><h2 id="最后的印象"><a href="#最后的印象" class="headerlink" title="最后的印象"></a>最后的印象</h2><p>   我曾经在新书里说“人的记忆不靠谱”，这里也提到了这一点，而且我们常常会容易把最后的印象当成是自己记得的全部。</p><p>   比如一个好人，他总干好事儿，但在最后时刻做了坏事，我们会认为“原来他是这样的人”；而一个坏人，他总干坏事儿，但在最后时刻良心发现干了好事，我们会认为“原来他也没那么坏”，相比之下，我们甚至更愿意与后者相处，这真是愚蠢大脑的典型。</p><p>   当一位NBA球员在巅峰期退役，人们会倾向于认为他是历史上最伟大的之一，但当他多打了几个只是比巅峰期稍显平庸的赛季之后，人们便会认为“他似乎也没有之前想象的那么伟大”。一个生涯总成就不断增加的球员可能会因为几个不那么出色的最后赛季，而拖累人们对其整个职业生涯的评价。</p><p>   这就是为什么人们总是要先苦后甜的原因，甜了一辈子，老年的最后几年受苦，人们会认为他的一生是不幸的；但苦了一辈子，最后几年很甜，人们会认为他整个人生都还算幸福。所以人们对“整个”的评价常常不是基于整体效用的加总，而看的是印象最深刻的最后阶段。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   这本书也有400多页，且内容不太连贯，虽然不难理解，但很难读，我花了两个星期将其串起来。</p><p>   但老实说，本书的很多内容都非常经典，细细回味，常常回味，可以让我们在日常生活中避过很多的坑，哪怕没有避过这些坑，但至少入坑之后能让你迅速回想起来——我好像入坑了。如此反复几次，你便不再容易掉入思维陷阱，但如果你没有看过本书，很可能入坑以后还不知道坑在哪儿，这样你下次就还得掉进去。</p><p>   接下来我们对全书进行一次简单总结：</p><p>   1、合理控制感性也属于理性；</p><p>   2、并非脑子里出现的次数越多，就代表实际出现的次数越频繁；</p><p>   3、大脑的CPU负载有上限，当你的注意力在一件需要满负荷运载的事儿上，你就没法同时做另一件非自动化的事儿；</p><p>   4、做笔记是为了摆脱大脑多线程工作时带来的在单项任务上难以专注的困局；</p><p>   5、理性跟高智商的关系没有那么大；</p><p>   6、系统1有很强的思维惯性，比如光环效应；</p><p>   7、慢思考在情况并不十分紧急的状况下，几乎总是有益的；</p><p>   8、思维定式只在快速反应中有用，在系统2能够有充分时间参与的环境下，没有任何必要和优势；</p><p>   9、我们不知道的事远比我们想象中多；</p><p>   10、出现未来的某个结果常常只是概率问题，但我们总以为自己“本可以”知道；</p><p>   11、直觉不是简单思维，而是复杂思维简单化的提炼，直觉准不准，看的是在某方面的积累范围有多广，积累时长有多长；</p><p>   12、内部意见会受到很多潜在利益或情感的影响，而外部意见则会相对准确得多；</p><p>   13、相比于得到，人们更讨厌失去，哪怕两边的价值完全对等；</p><p>   14、人们会为“可能性”和“确定性”付出更多的额外金钱；</p><p>   15、对于罕见事件的发生概率，人们要么高估、要么低估，就是难以准确估算；</p><p>   16、将中间博弈环节进行打包，是最好的抵抗心理风险的方法；</p><p>   17、放不下沉没成本，往往还会造成额外的损失；</p><p>   18、人们的思维常常不是自主的，而是会随着给定的框架左右摇摆。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;《思考，快与慢》&lt;/blockquote&gt;
    
    </summary>
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/categories/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/tags/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>反脆弱</title>
    <link href="yanchongsheng.github.io/2018/04/01/%E5%8F%8D%E8%84%86%E5%BC%B1/"/>
    <id>yanchongsheng.github.io/2018/04/01/反脆弱/</id>
    <published>2018-04-01T11:35:18.000Z</published>
    <updated>2018-04-17T10:06:01.562Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">《反脆弱——从不确定性中获益》</blockquote><a id="more"></a><h2 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h2><h3 id="反脆弱"><a href="#反脆弱" class="headerlink" title="反脆弱"></a>反脆弱</h3><p>   ——从不确定性中获益</p><p>   原名：Antifragile</p><p>   Things That Gain from Disorder</p><p>   作者：【美】纳西姆•尼古拉斯•塔勒布</p><p>   译者：雨珂</p><p>   出版社：中信出版社</p><p>   本版版次：2014年1月第1版</p><p>   ISBN：978-7-5086-4333-5</p><h2 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h2><p>   《反脆弱》可以被称为上一本《黑天鹅》的姊妹书，作者都是纳西姆•尼古拉斯•塔勒布，看了上一本再看这本效果更佳，因此我把这两本书的学习放在了一起。</p><p>   本书所有的主题都围绕“反脆弱”来进行，反脆弱是反黑天鹅，是预防黑天鹅事件或在黑天鹅事件发生时，也能更好地生存的策略。反脆弱性可以让我们规避某些不可见的风险，获得更多的收益。</p><p>   这本书看起来比黑天鹅更绕，自行看原书的话，大多数人会漏掉很多精华内容，因为塔勒布的语句总是需要反复斟酌和打磨，大部分人是没有这个耐心的。</p><p>   不过如果你有大块时间，并且有细细钻研的精神，可自行购买原书，对比下是否私塾里有许多你并没有看出来或者并没有思考到的好东西。</p><h2 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h2><p>   反脆弱性类似反弹性，当事物有波动产生的时候，总有力量将其往相反的方向扯，系统会在波动中变得更为强韧。而一旦通过过度保护的手段消除了这些波动，看似整个系统更为平稳，但其实暗藏汹涌，容易被黑天鹅事件一网打尽。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   每个人都在回避脆弱，因为脆弱代表了现有状态容易被打破。不过既然是打破，可以受损，也可以受益，脆弱的系统更倾向于前者，而反脆弱系统常常倾向于后者。</p><p>   如果说黑天鹅注定不可避免，那么拥抱随机性显然是我们的更优解。那些脆弱的东西看起来都是排斥随机性的，比如玻璃相框、陶瓷花瓶等，一点点随机意外就容易让它们粉身碎骨，而我们自己呢？很多父母对孩子进行过度保护，就是一个让孩子变脆弱的过程。</p><p>   他们认为让孩子远离危险是最好的，事实上，当黑天鹅发生的时候，孩子已经没有了逃离危险的能力，因为在他的成长过程中，完全没有类似的经验，也没有应对的能力，他的反脆弱性严重不足。那么过度保护这件事，究竟是“让孩子维持安全状态”的这个系统变得更强韧还是更脆弱呢？</p><p>   这个情况有点像过度保护引发的森林大火，原本一片森林经常发生火灾，但都是小火，时不时的小火“清理”了那些最易燃的树木，让它们没有机会继续繁衍，但之后由于过度保护，森林很多年没发生过任何火灾，导致偶尔一次火灾事故，就直接毁损了整片森林。</p><p>   那么，这个系统在被保护之下到底是变强韧了还是脆弱了？</p><h2 id="变得强韧"><a href="#变得强韧" class="headerlink" title="变得强韧"></a>变得强韧</h2><p>   有时候，苦难是一种财富。</p><p>   虽然它让你在短时间内感受到不舒适，但放到更长的时间去看，你对辛苦的承受能力都将超过其他人，也就是说，当你跟其他人同时在经受着苦难时，其他人可能会坚持不下去，而你却不会觉得有什么（苦难有很多种，前提是你经历过的和现行的苦难属于同类型）。</p><p>   这很像药理学的一个名词，叫毒物兴奋效应，说的是小剂量的有害物质会触发身体的反抗，从而让身体变得更加强韧。</p><p>   我们现在都知道了，让孩子处于无菌环境对他们的强韧性是非常不利的，因为他们的体内将缺少足够的抗体去应对黑天鹅的挑战，但以前的我们并不知晓，我们只知道有害物质都是有害的，一律要隔离。</p><p>   自然也好，人体也罢，都需要压力源，这种压力源只要不超过极大的限度，都会让自身变得更加强韧，就像骨裂复原后会增加骨密度，肌肉撕裂后会增加肌肉围度一样，有句话叫：那些打不死我们的终究会使我们更加强大。</p><h2 id="过度补偿"><a href="#过度补偿" class="headerlink" title="过度补偿"></a>过度补偿</h2><p>   一看到“过度”两个字可能很多人就觉得是不好的，其实这个过度补偿机制是我们希望打造强韧性而进行的自我选择。</p><p>   “创伤后应激”一直在被人谈论，鲜有人提到“创伤后成长”。想想你的恋爱经历，人人都不喜欢创伤，但如果不可避免地会发生创伤，那么从创伤中成长或许才是最好的选择，这会让你下一次更难以被人以相同的方式创伤。</p><p>   懂得利用这一机制的人总是会“自找麻烦”，这种自找麻烦可不是我们通常意义上的自寻烦恼，而是给自己设置一些“轻度不痛快”，或者叫压力源。比如轻度负债，比如在自己繁忙的工作中插入更多任务，比如把自己扔到陌生的语言环境中，这种自找麻烦都会激发我们身体内的潜能，让我们的潜能充分调动起来，寻找到更优解。我们会拥有更强的赚钱能力，更强的任务协调能力，还会比待在家里背单词更快地学会一门新语言。</p><h2 id="信息的反脆弱"><a href="#信息的反脆弱" class="headerlink" title="信息的反脆弱"></a>信息的反脆弱</h2><p>   反脆弱性会让系统变强韧，信息也一样。比如谣言，越是堵住不让提，各种小道消息就越多，最后错误的信息传得满大街都是；再比如跟别人说个事儿，特别强调非常秘密，告诉千万别跟人说，结果传得更快。</p><p>   作者希望将自己的书列为“禁书”，这样会让书的内容传播得更广，因为人们天生有猎奇心理。</p><p>   政府在很多时候并不那么懂得这种心理，他们总是在进行宣传的时候为了保护或者美化某些信息变得小心翼翼，结果导致信息本身脆弱性十足，或很容易被打脸，或容易引起广大民众的逆反心理。</p><p>   我见过有些人就跟政府不一样，他们很懂反脆弱性，比如在微博上时不时就会自黑一把，把自己黑得体无完肤，作为一种自我保护策略。之后无论别人见到他有什么黑点，都会习以为常，不会把它当作惊天大新闻传得到处都是。</p><h2 id="今日导读"><a href="#今日导读" class="headerlink" title="今日导读"></a>今日导读</h2><p>   当我们对反脆弱性有了基础的概念之后，我们就知道了波动是反脆弱性的常态，波动和错误常常并不是什么坏事。</p><p>   相反，要想更好地生存下去，我们必须拥抱波动，甚至自行创造波动，从错误中学习、调整，才能在整体上维持相对稳定甚至稳步提升。</p><h2 id="复杂系统"><a href="#复杂系统" class="headerlink" title="复杂系统"></a>复杂系统</h2><p>   很多时候，系统的复杂性超出我们的想象，我们习惯从“果”去推断“因”，但实际上，对于复杂系统来说，我们根本找不出什么是真正的“因”。</p><p>   就拿我们第一本学习的《异类》来说，成功的因有多少？哪怕我们知道了所有的因，穷尽了所有成功的可能性，还是不知道对于某一个个体来说，他是通过哪些因素的组合而成功的。</p><p>   反推都如此困难，正推就更加不可能了。在复杂系统中，每一种行为会导致哪些意料之外的结果完全无法预料，正如作者举的例子，居民把当地的狮子杀光肯定不是为了破坏环境，但狮子灭绝导致当地的山羊过度繁殖，结果这一带的树根被大量啃噬，树木成片消失，这个结果是居民没有预料到的。</p><p>   有时候，我们并不能单纯地认为某些看似短期有害的行为在长期也有害；或者说某些看似短期有益的事情到了长期还对你有益。</p><p>   系统是如此的复杂，因果关系互相缠绕，一点点风吹草动就会牵一发而动全身，而最强韧的状态则是拥有动态修复的平衡，而非保持绝对平衡。</p><h2 id="整体和个体"><a href="#整体和个体" class="headerlink" title="整体和个体"></a>整体和个体</h2><p>   要使得整体反脆弱，个体本身就得脆弱，这有点像个体必须为整体牺牲，但又不尽相同，让我来解释一下这句话。</p><p>   如果在一个整体内，每个个体都是稳固的，那么这个整体就不存在动态平衡，也就是说当黑天鹅事件要改变整个整体的状态时，由于个体并不会“牺牲”，整体的状态就可能不是微调，而是直接被打破。</p><p>   举个例子，如果你所在城市的餐馆全都处于被政府保护的状态下，不允许倒闭（有点像计划经济时代的国营企业），也不轻易增减数量。</p><p>   可以想象，这些餐馆将永远不会进化，他们的食物味道不会更好，他们的服务也不会更好，看起来稳固的状态会一直持续到某个黑天鹅事件的发生，将他们一网打尽全部取代。</p><p>   如果这些餐馆可以互相竞争，不限制数量，允许死亡允许新生，这个系统就是反脆弱的，虽然个体一直在动态变化之中，但作为行业整体来讲，是稳固而有希望的，它正在进化而不是退化。</p><p>   再比如，对于自然来说也是一样，自然的稳固是一个动态平衡的过程，作为其中一个个体——人类，是脆弱的，跟小白鼠一样。</p><p>   一场核战争可能毁掉所有人类，但无法毁掉自然，自然总会在动态平衡中找出人类的“替代品”。 从更小的个体——细菌或者细胞中，你也能看到类似的系统现象。</p><h2 id="有利的错误"><a href="#有利的错误" class="headerlink" title="有利的错误"></a>有利的错误</h2><p>   错误或者遭受损失常常被视为是不好的，当然，短期看来的确如此，但从长期和整体来看呢？从长期来看，个体从不断试错中能够更为接近正确，而从整体来看，个体遭受损失往往促使整体进行调整，从而增强了整体的反脆弱性。</p><p>   作者举了几个例子，比如泰坦尼克号，如果没有它的前车之鉴，人们会不断建造更大的远洋客轮，从而使下一次灾难的死亡人数变得更多；比如福岛核危机，让我们察觉到了核反应堆的问题，避免了更大的灾难；再比如飞机失事，每一次飞机失事都会让我们改进整个系统，从而使之后每一次的飞行都更加安全。</p><p>   企业也是一样，没有哪个伟大的企业不是一路犯错下来的，每一次犯错后活下来的，都会比之前更为强韧，踩过的坑越多难以被意外事件所打倒；而那些一帆风顺的就不一样了，短期内的确很好，但系统的脆弱性也在不断积聚，那些该踩而没有踩的陷阱都在先期因为运气被避过，到了中后期，一个陷阱就要了企业的命，因为所有人都没有避坑的经验，而那个时候，企业已经足够大，一次损失往往就是致命的。</p><h2 id="幸存"><a href="#幸存" class="headerlink" title="幸存"></a>幸存</h2><p>   虽然从整体来说，牺牲个体对整个系统反脆弱性的增强是有必要的，但对于个体来说，谁都不希望自己是被牺牲的那个，于是，每个个体竭力让自己成为幸存者就是推动整体越来越好的源动力。</p><p>   幸存下来有时并不代表着一定比原来的自己更加强大，但由于淘汰了更弱的对象，这使得组成整体的每个部分的平均质量都比原来有所提高，也就意味着整体质量进行了提升。</p><p>   不过现代人权是个例外，那些本应该牺牲自我来成全平均更为优秀的人类基因的往往因为政府组织的各种保护而存活下来，这是由于现代政府的选举更为文明，它们需要更大量的底层支持，而不是自然界最原始的力量征服。</p><p>   至于这种方式是不是阻碍了人类整体素质的进化，似乎从反脆弱性来看是如此的。有时候我们的情感和进化之间存在不一致，这会令人不舒服，毕竟人有同理心，我们怜悯他人，是希望不在某一天被同等对待，这同样是一种个体的自我保护策略。</p><h2 id="职业的反脆弱性"><a href="#职业的反脆弱性" class="headerlink" title="职业的反脆弱性"></a>职业的反脆弱性</h2><p>   我知道大家最关心的就是职业，那么什么样的职业更具有反脆弱性呢？毕竟我们都不想成为被黑天鹅击倒的人。</p><p>   这让我想到了职业的“稳定”。</p><p>   很多人都希望找一个稳定的职业，比如公务员，比如事业单位职员，比如银行雇员等，在相亲市场上，这样的职业也是更为吃香的。</p><p>   但从反脆弱性来说，这样的职业可能恰恰是最容易受到黑天鹅事件侵袭的。不知道还有多少人记得90年代的国企工人下岗潮？当时几乎所有人都认为自己永远不会遭遇什么狗屁黑天鹅，结果下岗之后发现什么都干不了，这才是最为悲哀的。</p><p>   鉴于我曾是公务员的这样一个身份，我非常了解我的绝大部分前同事一旦无法在政府部门任职以后，就会饿死的这样一种状况，而那些自由职业者或者说自雇人士则不太一样，我曾经在“请辩”公众号的文章里提到过，未来职场都是偏向合作形式存在，其实跟本书是一个意思，看似非稳定性的合作才是最具有反脆弱性的。</p><p>   小的不稳定波动能够应对大的黑天鹅事件，因为不稳定波动本身就是一个不断遇到小错误的过程，自雇人士在应对的时候会不断进行错误的修正，哪怕是乞丐，遇到讨不到钱的时候也知道该换一个更好的区域，或者是使用更佳的讨钱策略，比如补补妆或者是主动出击等，而在政府部门任职由于通常不容易为错误买单，因此绝大部分人不会对小错误进行调整，他们甚至都看不到自己的小错误，因为市场不会给他们任何惩罚。</p><p>   因此，这些人更容易在遭遇黑天鹅之后回到原点，进而失去所有的竞争力。</p><p>   限制波动，远离波动，往往会在伪平稳之后由于小概率事件的发生遭遇更为严重的后果。</p><h2 id="今日导读-1"><a href="#今日导读-1" class="headerlink" title="今日导读"></a>今日导读</h2><p>   反脆弱性偏好大量个体的自调节，不喜好人为干预，尤其是强力量的人为干预，这会让原本自动调节的系统失灵，从而使错误和风险积聚。</p><p>   今天我们将再次温习塔勒布的杠铃策略。</p><h2 id="过度干预之医疗"><a href="#过度干预之医疗" class="headerlink" title="过度干预之医疗"></a>过度干预之医疗</h2><p>   通过前两日的学习，我们应该能知道，人为的过度干预将不可避免地带来脆弱性，在医疗上通常表现为过度医疗，或者叫医源性损伤。</p><p>   作者举了个例子，说20世纪30年代，在389名接受纽约市医生检查的儿童里，174名被建议切除扁桃体，剩下的215名儿童再次经检查后，又有99名被认为需要手术，再剩下的116名又被带去看医生，结果还是有52名被建议手术。</p><p>   当时扁桃体的发病率在2%到4%，而每15000名手术患者中却有一人会直接死亡。在美国，医疗失误所导致的死亡率是车祸死亡率的3倍到10倍，这是个很恐怖的数字。</p><p>   在治和不治都可以的时候，为什么医生总是会偏向于治疗？</p><p>   医生需要证明，他们的存在是有价值的，自己是有职业道德的，而“无为”显然并不能让他们显得更为高明。</p><p>   我们知道，在严重受伤的情况下，是绝不应该拖延的，但我们也应该知道，许许多多的疾病都是自限性疾病，靠着身体的反脆弱性就可以自动平衡痊愈，而不是让过度医疗阻止抗体的产生，阻止身体变得更加强韧。</p><h2 id="过度干预之交通"><a href="#过度干预之交通" class="headerlink" title="过度干预之交通"></a>过度干预之交通</h2><p>   医疗如此，交通也是如此，虽然我并不完全认同作者的例子，因为我没有拿到实际数据。但就作者得到的数据来看，交通上的过度干预也是有害的。</p><p>   交通标识越明显，斑马线越是泾渭分明，交通条例越是清晰无误，交通事故越多。</p><p>   作为一个司机，有时候也有这样的感受，绿灯就是该我通行，或者说我是直行对方是转弯，转弯的就是要让我。那些泾渭分明的界线让司机的警觉性大大降低，但毕竟并不是每个人都严谨地遵守交通规则，事实上，用越来越多的监管和规则来替代注意力是件得不偿失的事情，至少从作者的数据中体现了这一点。</p><p>   而作者同样用实验证明了，将道路标志拆除以后，交通事故几乎不会发生，因为每个司机和行人都有足够的危机感，变得足够小心翼翼。</p><h2 id="过度干预的理由"><a href="#过度干预的理由" class="headerlink" title="过度干预的理由"></a>过度干预的理由</h2><p>   当我们说到医疗和交通的时候，我们都提到了，为什么我们要进行过度干预，因为过度干预使人们看起来不那么愚蠢。</p><p>   医生进行干预，而不是放任自流，让他看起来更有医术，哪怕放任自流的结果更好；政府在交通、经济等领域进行各种干预，而不是任其自然调节，让它看起来更“为民服务”，虽然从历史来看，大部分事情总是矫枉过正。</p><p>   这种让自己显得有作用，或者将好的结果跟自己的努力强行联系在一起的心理是每个人都拥有的。比如当你拿稿子给编辑时，他总是会帮你改掉一些文字，哪怕意思完全一样，因为不这样就显示不出他的作用，而当你再将改过的稿子拿给另一个编辑时，他完全有可能将你的稿子改成最初的样子。</p><p>   我曾经在政府部门做过文字工作，当我拿宣传文案给领导审核时，他总能改出几个字，哪怕是将句子改得更不通顺也在所不惜，只因为他是领导，他希望比我高明，哪怕他连写个几十字的请假条都有困难。</p><p>   我们都有这样的倾向，但这种滑稽的倾向很明显是对我们自身不利的。克服人性总是如此困难，这就是为什么能克服的人总能显得鹤立鸡群。</p><h2 id="人为的作用"><a href="#人为的作用" class="headerlink" title="人为的作用"></a>人为的作用</h2><p>   或许，人为干预最大的应用是在虚拟的精神干预上。</p><p>   我们都知道，对同等数量的金钱来说，得到一笔钱的欣喜程度远小于失去一笔钱的沮丧程度，这种现象叫不对称性。这种不对称性可不是什么好事情，因为从概率上来讲，它总会让你每天的精神状态倾向于沮丧。</p><p>   人为干预可以在这里发生作用，作者有个方法，可以平衡这种天然的、不可克服的心理状态。</p><p>   每天早晨，假设你最担心、你能想到的最坏的事情已经真实地发生，那么剩下的时间发生的所有事情，都会让你感觉到比原来更为好过。就像当你已经假定早上向老板递交了辞呈，工作稍有不顺就不容易让你郁闷一整天。</p><p>   情绪在很多时候不可消除，因为有些东西总是不受控制，但通过人为努力，总是可以通过合适的方法对其进行驯化。</p><h2 id="人为抵抗风险"><a href="#人为抵抗风险" class="headerlink" title="人为抵抗风险"></a>人为抵抗风险</h2><p>   风险和收益总是并存的，要获得高收益，就得承担高风险，有时候这种风险和收益的天平可以通过自身努力去倾斜，因为风险的值并不是一成不变的，比如巴菲特购买可口可乐股票跟你购买的时候，所承担的风险肯定是不一样的，但在同等价位购买的时候，你们却拥有同样的收益期望。</p><p>   另一种抵抗风险的方式则是有关于选择，我们在上一本《黑天鹅》中提到过杠铃策略，不知道还记不记得？要么追求极度风险，要么追求极度安全，因为这代表损失也好，收益也罢，都最大限度在你的意料之中。</p><p>   你可以分配90%的资金来保证安全，然后用10%的资金去追逐高风险，这样损失超不出10%，而收益却是无限的。</p><p>   最差的就是选择中间风险，就项目本身而言，中间风险的确和利润一样是对等的，但它很容易就会加给你一个额外的风险，那就是测量风险。我们都能知道大风险和大安全是怎么回事儿，却很难将中间风险具体的风险值估算准确，这使得我们承担了额外的风险，却并没有增加额外的利润期望。</p><p>   所以杠铃策略是可以人为抵抗风险的，它的原理就是尽量减少不确定风险，只玩确定性的风险博弈。</p><h2 id="今日导言-1"><a href="#今日导言-1" class="headerlink" title="今日导言"></a>今日导言</h2><p>   拥有更多选择权的人，几乎在任何时候都是更占优势的，因为他们拥有保底选择，而要拥有这些，有时候我们需要利用他人的无知，有时候却不需要付出额外的成本。</p><p>   在期权上给自己的风险上一道保险，只付出小额或不必付出成本，这事儿对投资也有很大的参考价值。</p><h2 id="反脆弱期权"><a href="#反脆弱期权" class="headerlink" title="反脆弱期权"></a>反脆弱期权</h2><p>   权利和义务并不总是相等的，至少在聪明人眼里，其他人由于缺乏某些知识或者出于对安全感的过度需求（《拆掉思维里的墙》中提到要避免的点），可以被他们占到便宜。</p><p>   比如期权，期权的意思就是关于未来的合约。我可以跟你订个这样的合约，今天我以3块钱买你的东西，下周一你还以3块钱卖我，但如果我不想买了（比如价格跌了，或者是我不再需要了），我可以选择不买，这样我在未来就拥有了反脆弱性。</p><p>   你当然不会同意这种这么明显只对我有利的事情，于是你需要我缴纳一笔费用，这笔费用通常不菲，大约价值就在对方冒的风险所对应的利润上下。</p><p>   这种期权基本占不到便宜，因为人人都能衡量出反脆弱性价值几何，但在有些期权里，人们未必能够准确衡量。</p><p>   比如哲学家泰勒斯，他曾经支付了一笔首付款，以极低的租金租用了米利都和希俄斯附近的所有橄榄油压榨机的季节性使用权，这也是期权。人们为了安全感，愿意提前拿到一笔不算多的首付款，而放弃当年对压榨机的使用权，因为没人愿意承担橄榄颗粒无收，无人租用压榨机的风险。</p><p>   结果当年橄榄大丰收，压榨机供不应求，泰勒斯让压榨机所有者按照他开出的条件转租机器，大赚了一笔。</p><p>   这是运气好吗？的确有一部分，但最为关键的，是他先利用了那些人的心理和对相关知识的缺乏，用远低于购买风险的钱，来跟风险对应的利润去博弈，从而极大地增强了获利的期望值。</p><p>   他并不需要每次都成功，但只要收益期望始终偏向他，最终总能赚到大钱。</p><p>   所以单说他运气好，也不准确。</p><h2 id="更多选择权"><a href="#更多选择权" class="headerlink" title="更多选择权"></a>更多选择权</h2><p>   期权，有时候可以理解为选择权，因为期权是购买未来的更多选择，是提高反脆弱性的关键。</p><p>   一个人是脆弱的还是反脆弱的，往往体现在所拥有的选择权的多少。</p><p>   很多穷人声称自己不喜欢钱，在大多数情况下是由于赚不到钱或者不愿意付出努力去赚钱。他们喜欢说“选择”成为穷人，比如不拼命工作让他们更健康，事实上他们却从来没有拥有过选择权。如果一个人可以想成为富人就成为富人，并证明了这一点，他才可以说他“选择”成为穷人。</p><p>   所以我一直鼓励知识分子一定要有钱。有钱，是拥有最基础的选择权的底气，不为生计发愁，是独立之精神的基础要义，让自己不被馒头而裹挟，才能自由地表达观点，追求真理，否则就很容易因为屈从人性的诸多需求而背叛思想本身。</p><h2 id="拥有选择权"><a href="#拥有选择权" class="headerlink" title="拥有选择权"></a>拥有选择权</h2><p>   强大的人常常拥有更多的选择权，换句话说，他们的反脆弱性更强，如果你想让自己的反脆弱性更强，就得变得更为强大。</p><p>   举个例子，常常有人邀请我去各种场合做讲座，特别提出“如果您有空的话”。这就意味着，我对未来的某块时间有了一份最低保底的收入，当我有空的时候，我可以选择应邀去讲个两小时，获得不菲的收入，也可以选择在家里睡觉，如果我实在太累了，认为休息的收益更大的话。</p><p>   这种应约对我来说是一种权利，而不是义务，而我获得这样的特权却没有付出任何额外的期权费用，仅仅是因为有某些稀缺价值，从而使得自己在很多时候都能处于反脆弱的状况。</p><p>   而当我不具备这些稀缺价值的时候，我需要付出极大的成本才能沟通上“让我去做一个讲座吧”，对方通常回应“好，等我们把讲师名单排定了再通知您”。</p><p>   这种“排定”通常会持续到正式开讲前两天，这意味着我不得不为了一些虚无缥缈的“可能性”而提前将去其他地方出差的时间延后，不得不放弃当天的重要预约等，此时对方拥有反脆弱性。</p><p>   变得强大是生存得更好的基础，因为反脆弱性在谁手上，谁就更容易获得免费的期权，而免费的期权总是能带来收益，这些是不必要付出其他额外努力的额外收益。</p><h2 id="投资的反脆弱"><a href="#投资的反脆弱" class="headerlink" title="投资的反脆弱"></a>投资的反脆弱</h2><p>   成功的企业家都有类似的经历，他们在初期并没有特别明确的目标，要做一个怎样的东西，这个东西会发展成什么样子。如果他们告诉你，现在成功的样子就是他们设想的样子，他们一定在忽悠你。</p><p>   很多时候，目的是模糊的，探索是模糊的，结果是自由的。好的风险投资人都明白，一个成功的企业肯定不是按设定好的路线走的，在那些自由探索的企业家身上，会发生许许多多的黑天鹅事件，这些黑天鹅事件有很大可能导致他们直接死亡，当然也有很小的可能获得巨额收益。</p><p>   所以塔勒布在书中提到的反脆弱投资策略其实是当下很多风险投资人正在执行的普遍策略：广种薄收（这个薄是指数量薄，而非收益薄）。</p><p>   在极端斯坦的创业项目中，正确的策略是往每个有很大想象空间的项目中都进行少量的投资，虽然成功的概率都不太高，但错过一个创意，可能损失的收益是无上限的。</p><p>   这在ICO上也是一样，数字货币ICO存在许多的乱象，骗子层出不穷，但真正的好项目，或者哪怕不好但本身是值得被炒作的题材，能在短时间内达到几十倍收益的也比比皆是，每错过一个，可能就错过一波快速的财富增值。</p><p>   在极端斯坦的领域里，广种薄收的策略几乎总能用上。</p><h2 id="试错的收益"><a href="#试错的收益" class="headerlink" title="试错的收益"></a>试错的收益</h2><p>   投资跟很多领域一样，都需要大规模试错，尤其是当你相信“广种薄收”确实有用的话，其实你接受的潜台词是“广试错，薄正确”。</p><p>   诚然，很多时候你都不知道正确的是哪个，否则你就不需要广试错了，但你会发现，真正更有经验而不是装腔作势的风险投资人，在投资策略上总是优于身为菜鸟的你，哪怕你们都不知道最后的结果如何，但他的正确率总是更高。</p><p>   这并不意味着他比你更聪明，比你考虑得更为周全，或者是他有更多的帮手，这种准确率往往来源于他在前期的试错中，试到了更多的定向错误，也就是说，所有试错的成本都转化为了收益。</p><p>   没错，是收益。很多人仅仅把试错的过程看作损失，这实在是错误的看法。理性试错，并非随机试错，可以定向修正人们的认知体系，在不断总结中越来越接近真相，因此所有的收益都应该平分到每一次的试错中。</p><p>   也就是说，试错本身哪怕没有立即产生看得见的收益，它的隐性收益也是存在的，只不过储存到了正确的那次一次性提取而已。</p><h2 id="今日导读-2"><a href="#今日导读-2" class="headerlink" title="今日导读"></a>今日导读</h2><p>   今天是本书学习的最后一天，让我们来区分一下脆弱和反脆弱的事物。反脆弱性是如此重要，我们在许多现实生活中都意识到了这一点，但在教育上，似乎还没转过弯来，教育需要良好的竞争机制，需要标准化，但这仅仅是教育无奈之下的选择，却不应该是人们衡量学生优秀与否的标准。</p><h2 id="理论和实际"><a href="#理论和实际" class="headerlink" title="理论和实际"></a>理论和实际</h2><p>   很多时候，理论和实际都是脱节的，这是由于理论就只是模型，而实际比理论的状况复杂得多。几乎所有的理论都脱胎于实际，但却是理想化、模型化的实际，它们中的大多数，在变幻莫测的现实世界里都不具备什么指导意义。</p><p>   我毕业于国际经济与贸易专业，大学学了四年，虽然我是个坏孩子，常常逃课去挣钱，去玩游戏，去泡图书馆看与专业课无关的书，但耳濡目染多多少少也接触了一些。</p><p>   不过当我接触到一家外贸公司真正的业务后，我才发现，只要英语过得去，一个星期就可以完全把这家公司的外贸业务玩得滚瓜烂熟。退一步说，就算英语不太好，一样可以玩得转，因为邮件里只出现那么点单词，电话里也是。</p><p>   现实的生态规则往往跟游戏或者理论中的完全不同，不但理论中的邮件格式在现实中完全不必要，且一个人在理论里学得越好，邮件的接收方越容易认为你是刚毕业的菜鸟。</p><p>   其他的理论或者游戏也是一样，不管一个人象棋下得有多好，都不代表他对生活中的事情有足够强的逻辑推理能力，事实上我就见过一个反例，他拿过全市象棋冠军，却几乎连最基础的推理和逻辑都有困难，目前经营着一家米店，经营状况很惨淡。</p><p>   游戏就是游戏，理论就是理论，而现实是现实，它们完全不能混为一谈。</p><h2 id="反脆弱式学习"><a href="#反脆弱式学习" class="headerlink" title="反脆弱式学习"></a>反脆弱式学习</h2><p>   虽然大学时期的我并不了解抛弃一些专业课选择泡图书馆和在校外挣钱的真正意义，但我确实那么做了，而塔勒布给出了更多理由。</p><p>   局限于课堂教材和理论的人进行的是填鸭式学习，他们总是学习别人让他们学习的内容，而丝毫不顾自己的兴趣所在。学校喜欢那些在标准化竞争中获得高分的学生，却往往对其他学生在别的领域表现出来的天赋视而不见。</p><p>   努力在少数科目上取得高分并没有什么了不起的，这通常只证明了花在上面的时间足够长（学习效率高也是由于长时间花在上面从而总结出来的方法）。而只要稍微将这些他们擅长的领域进行变通，需要运用一些其他领域的小技巧，但仍处于这些领域之中时，他们的表现往往就会差上很多，作者将其比喻成“健身房撸铁的老手”会被常常进行街头斗殴的小混混狠狠修理一顿。</p><p>   教材里的知识是知识，其他领域的知识也是知识，学习应该是自由的，如果你的家里有一座图书馆，你无需长期待在学校也可以成为一名智者，随便翻阅就可以了（或许，蚂蚁私塾的书也可以比你在学校里学到的更为有用）。</p><p>   事实上，我在图书馆翻阅了大量经济学书籍以后，不禁深深地怀疑，我被规定必修的经济学教科书是不是里面最差的那本。</p><h2 id="反脆弱的重要性"><a href="#反脆弱的重要性" class="headerlink" title="反脆弱的重要性"></a>反脆弱的重要性</h2><p>   显然，自由学习在现实中的反脆弱性是大于规定死板的学习的，但很少人会将这种反脆弱性列到重要的地位上，哪怕反脆弱性已经在很多领域被人们当作理所当然地重视，但在教育上，人们还是不容易转过弯来。</p><p>   在大多数人的设想中，人的一生总是线性的，学好了规定的科目，考上了理想的大学，毕业后从事专业对口的工作（在前面好几本书上都提到过专业对口的局限性），一路升职加薪直到退休。</p><p>   然而绝大多数人的现实状况都不是如此，但人们还是固执地为脆弱性做着贡献而不是反脆弱性。</p><p>   反脆弱性是如此重要，比任何概率都重要得多，不管你有多大的概率沿着既定的路前进，你都必须做好应对任何现实中可能发生的状况的准备。</p><p>   试想一下，当一个人告诉你，这架飞机的绝对安全率是99%的时候，你会不会坐？这个概率根本不足以让你安心，你之所以乘坐这架飞机，是由于这架飞机在任何状况下都不会让你出问题，99.9999%的正常飞行概率再加上万无一失的出事之后的紧急措施安全概率。</p><p>   反脆弱性才是你乘坐的理由，而不是极其、非常接近100%的概率。</p><h2 id="界定脆弱"><a href="#界定脆弱" class="headerlink" title="界定脆弱"></a>界定脆弱</h2><p>   整本书，我们一直在提脆弱与反脆弱，我们知道反脆弱性的事物更为强韧，而脆弱的事物则更容易受到冲击，那么如何界定脆弱呢？</p><p>   作者给了一个界定方法：凡是极端事件对该事物的伤害程度远高于同等程度的一系列温和事件造成的伤害，那它就是脆弱的。</p><p>   举几个简单的例子，你的车在50码的时候撞墙受到的损伤比5码时候撞墙受到的损伤高出10倍以上，那它就是脆弱的；又或者交通，前1小时有2万辆汽车，后一小时有10万辆汽车，那么汽车行驶的速度远比平均每小时有6万辆汽车要慢，那交通就是脆弱的。</p><p>   对于脆弱的东西，小波动就会让它完蛋（跟反脆弱相反），比如政府官员常常低估封闭一条路会对整个交通系统造成多大的影响，那是因为他们没有看过这本书。</p><p>   你可以同样论证一下，人也是脆弱的，以及仔细思考一下，人如何在脆弱中变得不那么脆弱？</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   塔勒布的书籍中总是有很多的发散性内容，关于反脆弱主题，学到这里就可以了，这是一本370页，45万字的书籍，我曾经在多年前花费大量的时间去抽取它的每一个概念，看来你们已经直接得到了。</p><p>   下面让我们对全书进行一次简单总结：</p><p>   1、拥抱随机性是对抗黑天鹅的最优解；</p><p>   2、小剂量的有害物质会触发身体的反抗，从而让身体变得更加强韧，把有害物质换成错误，把身体换成系统一样成立；</p><p>   3、给自己适度的压力源，就会激发更多解决问题的潜能；</p><p>   4、自黑是一种很好的自我保护策略，相反，总是塑造完美形象则是一种脆弱策略；</p><p>   5、很多系统都很复杂，因果关系互相缠绕，最强韧的状态是拥有动态修复的平衡，而非保持绝对平衡；</p><p>   6、要使得整体反脆弱，个体本身就得脆弱；</p><p>   7、犯错常常是有利的，因为错误被表现出来了就能被改进，而不是任由其积聚；</p><p>   8、每个个体竭力让自己成为幸存者就是推动整体越来越好的源动力；</p><p>   9、限制波动，远离波动，往往会在伪平稳之后由于小概率事件的发生遭遇更为严重的后果；</p><p>   10、让自己显得有作用，或者将好的结果跟自己的努力强行联系在一起的心理是每个人都拥有的，然而却是我们需要克服的人性之一；</p><p>   11、情绪在很多时候不可消除，但可以被驯化；</p><p>   12、杠铃策略的原理是尽量减少不确定风险，只玩确定性的风险博弈；</p><p>   13、一个人是脆弱的还是反脆弱的，往往体现在所拥有的选择权的多少；</p><p>   14、变得强大是生存得更好的基础，反脆弱性在谁手上，谁就更容易获得免费的期权，而免费的期权总是能带来收益，这些是不必要付出其他额外努力的额外收益；</p><p>   15、在极端斯坦的领域里，广种薄收的策略几乎总能用上；</p><p>   16、试错的隐性收益一直存在，只是被储存起来了而已；</p><p>   17、自由学习的反脆弱性总是大于规定死板的学习；</p><p>   18、凡是极端事件对该事物的伤害程度远高于同等程度的一系列温和事件造成的伤害，那它就是脆弱的，对于脆弱的事物，小波动就有大影响。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;《反脆弱——从不确定性中获益》&lt;/blockquote&gt;
    
    </summary>
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/categories/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/tags/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>黑天鹅</title>
    <link href="yanchongsheng.github.io/2018/04/01/%E9%BB%91%E5%A4%A9%E9%B9%85/"/>
    <id>yanchongsheng.github.io/2018/04/01/黑天鹅/</id>
    <published>2018-04-01T11:35:10.000Z</published>
    <updated>2018-04-17T10:06:01.590Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">《黑天鹅——如何应对不可预知的未来》</blockquote><a id="more"></a><h2 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h2><h3 id="黑天鹅"><a href="#黑天鹅" class="headerlink" title="黑天鹅"></a>黑天鹅</h3><p>   ——如何应对不可预知的未来</p><p>   原名：THE BLACK SWAN</p><p>   THE IMPACT OF THE HIGHLY IMPROBABLE</p><p>   作者：【美】纳西姆•尼古拉斯•塔勒布</p><p>   译者：万丹  刘宁</p><p>   出版社：中信出版社</p><p>   本版版次：2011.10</p><p>   ISBN：978-7-5086-3030-4</p><h2 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h2><p>   我在新书里有提到对塔勒布的感谢，因为塔勒布的两本书《黑天鹅》与《反脆弱》对我构建科学的认知体系帮助很大。</p><p>   这个“很大”指的并不是我的认知体系是由这两本书里面的内容构成，而是初看到它们的时候，给了我的思维方式一个重击，这就好像有人告诉你，你一直在遭受着愚弄一般。</p><p>   塔勒布是个杂家，这并不是一个贬义词，他在哲学、数学、经济学、心理学等多个领域都有涉猎，通晓多种语言，同时还是个出色的企业家。</p><p>   他的思想影响了数不清的人，接下来，让我们来走进他的《黑天鹅》，如有兴趣，请自行购买原书。</p><h2 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h2><p>   黑天鹅这个名词很多人已经如雷贯耳了，但对于从没听说过的人来说，确实不知道它具体代表着什么。在第一天的学习中，让我们来详述一下究竟什么是黑天鹅，职场上又有没有黑天鹅。</p><h2 id="什么是黑天鹅"><a href="#什么是黑天鹅" class="headerlink" title="什么是黑天鹅"></a>什么是黑天鹅</h2><p>   在发现澳大利亚黑天鹅之前，几乎所有欧洲人都确信天鹅肯定是白色的。这个事实说明，我们仅仅通过观察和经验得出来的知识具有严重的局限性和脆弱性。</p><p>   我经常在公众号里跟读者说，唯有从逻辑出发，才能得到正确的知识和结论，仅仅通过归纳，比如谁是通过怎样的方式成功的，哪怕这样的人有成百上千个，也是无法得出这就是成功之道的。</p><p>   黑天鹅特指这样的事情：罕见的、极端影响的和事后才可预测的事情。</p><p>   很多专家和权威喜欢在黑天鹅事件后夸夸其谈，比如“9•11”或者泰坦尼克事件的必然性等，但黑天鹅之所以为黑天鹅，正是因为其事前不可预测性，因此我们更加需要有独立思考，相信看完本书的你，会深有体会。</p><h2 id="自以为知道"><a href="#自以为知道" class="headerlink" title="自以为知道"></a>自以为知道</h2><p>   没人可以看透历史，那些历史学家以为自己可以，但导致历史进展的很多关键因素其实深埋在幕后，因为我们无法看到所有的事情和原因，这就像通过神的行为去解读他的思想一样，我们极有可能搞错它的意图。</p><p>   人类很容易将事情简化成大部分人看得懂的样子，事实上，我们生活的这个世界比它看上去要复杂得多、难预测得多，然而人们通常很健忘，明明在当时什么都没意识到，在事后的分析看来，却总显得理所当然。</p><p>   这也是正常的，因为我们的记忆本来就是有限且一直在被过滤着的，所以我们常常只记住了那些在事后看来与事实相符的信息，这会让事件看起来更具“可预测性”。</p><p>   有时候那些成功人士来分享成功经验的时候，你可以竖起耳朵听听，他们分享的很可能是那些司空见惯的经验，然而你真的相信他们是因为这些经验成功的么？他们很可能隐藏了真实的原因，比如用钱贿赂了政府官员或者从合伙人那里骗了一大笔钱，哪怕他们没有用非法的手段，爸妈给他介绍了第一桶金的生意他们也不会大方地分享给你听，因为那样看起来，他们就不够“神”了。</p><p>   然而更有可能的是，大多数成功人士自己都搞不懂自己是怎么成功的，甚至他们深以为然的不分享给你的成功之道，都有可能只存在于他们自己的臆想之中，很多人的成功本身就是个黑天鹅。</p><h2 id="黑天鹅职业（1）"><a href="#黑天鹅职业（1）" class="headerlink" title="黑天鹅职业（1）"></a>黑天鹅职业（1）</h2><p>   黑天鹅事件的产生是有其特定土壤的，也就是说，在有些地方，黑天鹅比较容易发生，而在另一些地方，黑天鹅则不太容易出现。</p><p>   从职业上来看，那些“报酬具有突破性”的职业是容易产生黑天鹅的职业。</p><p>   我们必须承认，有些职业的收入是不可能具有突破性的，比如卖茶叶蛋、开一家小店（除非开连锁）、当私人医生、成为按摩师等，这些职业的收入都会受到既定时间内客户的最大数量的限制，所以哪怕你的每份收入很高，收入也很快会遇到天花板，不可能有人突然一天的收入就赶得上前面10年的地步。</p><p>   不过还有另一些职业，如果你干得好，收入就可以10倍、百倍甚至更高程度地增长，却几乎不需要付出额外的努力。比如你出版了一本书，如果书的内容足够好，你就可以在之后的5年、10年甚至20年一直卖而不需要再付出额外的劳动，但面包师不行，就算他的收入足够高，他也必须为每一个新客户付出劳动——烤面包。</p><h2 id="黑天鹅职业（2）"><a href="#黑天鹅职业（2）" class="headerlink" title="黑天鹅职业（2）"></a>黑天鹅职业（2）</h2><p>   看到这里，很多人会有一种感觉：收入有突破性的职业是否是人们更好的选择呢？</p><p>   对大多数人来说，也许这并不是最好的选择。</p><p>   为什么呢？因为收入具有突破性的职业只有在你成功的时候对你才是有利的，但这类职业往往有很大的不平均性，也就是说头部的几个人可能会抢走绝大部分的蛋糕，剩下的人也许什么也得不到，而他们或许干的并不差，这类职业的代表：明星、作家、艺术家、网红等。</p><p>   以网红为例，网红直播看上去很赚钱，很吸引眼球，但除去头部几个人以外，大部分人一个月都挣不到2000块钱，这样的职业是否是普通人更应该考虑的呢？</p><p>   所以对于只想要一碗还不错的饭吃的大多数人，去这类领域冒险未必是个好选择，至少，当一个三流的注册会计师不至于没饭吃，也不至于跟头部人群的收入差得太多，但三线明星却是有可能饿死的。</p><h2 id="今日导言-1"><a href="#今日导言-1" class="headerlink" title="今日导言"></a>今日导言</h2><p>   当我们只简单关注过去并试图去推算未来时，有时候会出现严重的问题，或许我们可以在不得不给出预测的时候参照过去，但我们不能理所当然地认为未来就是遵循过去的简单规律。</p><p>   逻辑不是哲学家或者数学家需要搞定的事情，而应该是我们每一个人的好朋友，判断任何事情都需要根据逻辑，而不是经验、例子等这类不能从逻辑上被证明有普适性的东西。</p><h2 id="经验只能代表从前"><a href="#经验只能代表从前" class="headerlink" title="经验只能代表从前"></a>经验只能代表从前</h2><p>   前面1000天的信息无法帮助你获得第1001天的信息，作者举了一只火鸡的例子。火鸡每天都有人喂食，很高兴，每多一天，“人类是友善的”、“人类就是为我打工的”这样的想法就会进一步在它脑子里强化，直到某一天被宰。</p><p>   在火鸡眼里，喂食的天数越多，它感觉越安全，但事实上，喂食的天数越多，证明越接近被宰，这种安全在事实上却是更接近危险，这与我们的直觉不符。</p><p>   就像我们的很多经验，它们可能一直在起作用，而我们也乐于把这样的经验知识看成是绝对不变的真理，以致于当它们某天不再起作用时，我们无法应对。</p><p>   动物园的猛兽饲养员可能觉得自己工作了20多年，有着足够的经验去伺候猛兽们，于是，照往常一样去徒手掰开它们的嘴检查牙齿，他当然可以说20年来从没出过问题，但这不代表这一次不会出问题，泰坦尼克号的船长也说自己从没遇到过危险。</p><p>   这让我联想到所有人都在谈论的房价，就算房价连续上涨了100年，当你在第101年评估它的时候，依然要将其当成独立事件。</p><h2 id="逻辑靠谱"><a href="#逻辑靠谱" class="headerlink" title="逻辑靠谱"></a>逻辑靠谱</h2><p>   经验主义不靠谱是由于其几乎没有逻辑靠谱性。</p><p>   比如你通过1年的观察得出明天太阳还是从东边升起，但事实上，这1年的观察并不能给你带来这样的确定性结论，只有你真正知道了为什么太阳从东边升起，并用科学的方式加以证明，才可以给你带来“太阳明天依旧从东边升起”的结论。</p><p>   否则你就会陷入观察了100天鸡叫了太阳就出来了，然后得出是鸡把太阳叫醒的这样的结论。</p><p>   一个人看到的所有天鹅都是黑天鹅，并不代表其他颜色的天鹅不存在，但只要有一次看到一只其他颜色的天鹅，那天鹅就必然不全是黑的。</p><p>   这两者的区别是显而易见的，然而现实生活中却并没那么好区分。</p><p>   就像你学完《异类》之后对一个人说，成功并不是靠努力就行的，结果他反问你一句，不努力能行吗？</p><p>   这样的脑回路是我们常常会碰到的，医生对一个疑似癌症的病人说，你已经痊愈了。当他询问理由时，脑回路奇特的医生会说，因为我们在你的体内没有发现癌细胞。</p><p>   没有发现癌细胞和实质上没有癌细胞是完全不同的两码事，如果让很多人进行词义辨析，他们是分得清的，但在很多事上，都会忽略这样的差别。</p><h2 id="记忆偏差"><a href="#记忆偏差" class="headerlink" title="记忆偏差"></a>记忆偏差</h2><p>   忽视事情的逻辑和前因后果就有可能出问题。</p><p>   正如我们在第一天的内容中所说，我们常常自以为在事后可以通过一些方法预料到事情的发生，这是由于我们的记忆方式带给我们的误导。</p><p>   我们想要记住更多东西，那么在记忆编码中就要尽量将事件、片段进行压缩归类，同时将它们之间的联系简化和理顺，这样我们的记忆内存里才放得下更多的东西。</p><p>   于是，我们在记忆中常常会感觉从某事到某事是理所当然的，因为我们已经理顺了，我们抛弃了其他的“干扰项”。但事实上呢？在结果到来之前，从A事件到B事件存在着无数种可能，只是我们的记忆以及我们对自己的叙述方式，人为将其合理化了。</p><p>   记忆偏差不仅仅是我们在压缩时造成的偏差，情感等因素也会让我们在分析记忆时出现问题。比如你邻居被狗咬了，而小时候的你亲眼所见，你就自然而然地认为狗是多么危险的一种动物，以致于你在回忆分析此事时，只记得那些曾经看到过的被狗咬的例子。</p><p>   但如果你仅仅是看到这样的一桩新闻，可能就不足以让你对这件事产生不理智的判断。</p><h2 id="沉默的证据"><a href="#沉默的证据" class="headerlink" title="沉默的证据"></a>沉默的证据</h2><p>   除了叙述和记忆会误导我们以外，历史还惯于隐藏黑天鹅现象，如果我们不细心观察，很容易就会漏掉关键的细节。</p><p>   很早以前就关注公众号“请辩”的学员应该对我的一篇《死人不会说话》会有印象。</p><p>   2000多年前，罗马的雄辩家、思想家、政治家西塞罗讲过一个故事，说有人把一幅画给一个无神论者看，画上画着一群正在祈祷的拜神者，他们在随后的沉船事故中幸存了下来，说明祈祷可以保护人们不被淹死。</p><p>   这个套路经常为记者所用，也为很多公众号所用，就是列举一大堆正面证据，然后说明一个道理。不过，哪怕是数量庞大的正面证据，真的可以验证一个道理吗？显然是不能的，我们早就说过，只有逻辑才可以验证道理。</p><p>   无神论者问，那些祈祷后被淹死的人的画像在哪里？</p><p>   淹死的拜神者已经死了，所以无法宣传他们的经历，而相信祈祷有用的那部分群体就算知道这回事，也不会说出来以影响自己论据的可靠性。</p><p>   人们忽略这类沉默的证据是非常在行的，比如网上有某家大医院一直处于被喷之中，有人一查，就觉得这医院肯定不能去。真的是这样吗？</p><p>   因为大医院看的病人基数大，因此好评和谩骂都是同比扩大，但由于好评的通常不会去网上大肆宣扬，于是，谩骂之声在绝对值上就显得特别大。我们平时在观察判断事物的时候，是不是也容易忽略这类沉默的证据呢？</p><h2 id="你看不到的"><a href="#你看不到的" class="headerlink" title="你看不到的"></a>你看不到的</h2><p>   有时候一些沉默的证据并不像上面的这么明显（虽然上面的这些对于很多人来说，已经不太明显了），比如很多政客用循环播放灾民受灾的场面，并频繁展示自己在现场许下重建诺言的画面。</p><p>   重建是一句话，用的是谁的钱，是政客自己的吗？当然不是，用的是公众的钱，李笑来曾说过一个词儿，叫“慷他人之慨”，这就是慷他人之慨。</p><p>   在一个固定盘子里，要往这儿多搁点儿，就要从另一头多剥夺一点，被剥夺的不管是哪个盘子的，都会有不可预知的连锁反应。比如被抽走一部分资金的是某个控制糖尿病的研究基金，灾民是活生生的，但糖尿病人的死亡数增加也许只是一个冷冰冰的数字，这种沉默的犯罪不仅不会让人关注到，甚至连想都不会想到。</p><h2 id="今日导言-2"><a href="#今日导言-2" class="headerlink" title="今日导言"></a>今日导言</h2><p>   我们很多人包括经济学家等，都喜欢在考虑事情的时候将其套入一个模型，将变量进行自我拟定，然后在框死的框架中求解。</p><p>   然而现实生活远比框架复杂得多，在框架中计算出来的解，有时对现实生活中一点指导性意义都没有，比如经济学经常假设人是理性的，事实上，非理性的人比比皆是，而对于利益，每个人也有不同的看法，因此，模型化的东西放到现实中，往往未必适用。</p><h2 id="谁才是愚人？"><a href="#谁才是愚人？" class="headerlink" title="谁才是愚人？"></a>谁才是愚人？</h2><p>   我们在生活中常常会发现“学习成绩好”跟“在社会上混得好”并不总是一致的，那是因为在既定的规则和条条框框中做得好，不代表能在无规则的复杂环境中做得好，在复杂环境中，永远有意料之外的情况发生，而通常谁有更好地抗不确定性能力，谁才能笑到最后。</p><p>   书中举了两个人的例子，一个叫肥托尼，是个总能从市场中发现投机机会的商人，另一个是约翰博士，是一家保险公司的精算师。</p><p>   作者分别问了两个人同一个问题：假设硬币是公平的，我把它抛出99次，每次都正面朝上，下一次得到反面的概率是多大？</p><p>   约翰博士回答：很简单，你说硬币是公平的嘛，那不管你前面抛了多少次，下一次当然还是1/2。</p><p>   肥托尼回答：我不认为会超过1%。</p><p>   作者很奇怪，问他为什么，肥托尼说，如果你相信50%的说法，你一定是个草包，这硬币百分之百做过手脚，谁如果说是50%，你就能从这些傻瓜身上赚到钱。</p><p>   愚人，有时候靠分数是测不出来的，或许在智商测试中，约翰博士会遥遥领先，但在现实中，肥托尼很可能会击败他。</p><h2 id="未知的未知"><a href="#未知的未知" class="headerlink" title="未知的未知"></a>未知的未知</h2><p>   概率代表着未知，而未知本身也受到未知的影响。就如上面的例子，约翰博士也许能在确定性的未知中做到很好，但他极少会考虑到不确定的未知情况。</p><p>   赌场看上去是个不确定性极强的地方，但若将其放在更大的框架中，在里面玩游戏结果却几乎总是确定的：赌场总是有着确定性盈利，这些盈利是可以被精确计算的。</p><p>   赌场的风险管理总是在确定性的未知处下功夫，比如精确计算赌客的赢钱概率，控制大赌客的最大下注额等，但历史上导致赌场倒闭或重大损失的，往往不是计算得不甚完美的公式，而是发生在赌场之外的，比如漏报赌徒的收入导致吊销执照、或者表演者在表演时不甚被老虎咬伤致残等。</p><p>   这些几乎不能被提前计算的东西常常才是影响全局的关键。</p><h2 id="对未知的敬畏"><a href="#对未知的敬畏" class="headerlink" title="对未知的敬畏"></a>对未知的敬畏</h2><p>   不能被提前计算的东西不代表不能提前对其有防范之意，就像一个杀手，他会随时随地都保持警惕，知道可能会有人来找他报仇或者找他麻烦，虽然他不知道什么地点以何种方式，但他对未知保持着敬畏。</p><p>   很多人是没有这种敬畏的，通常会在考虑到了某几个方面之后，声称避免了所有可能会发生的意外情况，或者称之为万无一失。</p><p>   例如婚姻，很多国家的离婚率都在1/3以上，这个数字是公开的，也是众人皆知的，但几乎所有步入婚姻礼堂的人都认为自己的这一次是在剩余的2/3里的，理由可能是“我们现在很好”，不过，那婚姻破裂的1/3里，在结婚时大概也是“现在很好”的。</p><h2 id="认知自大"><a href="#认知自大" class="headerlink" title="认知自大"></a>认知自大</h2><p>   对未知的不够敬畏究其根源是人们的认知自大。有些事情我们认为发生的概率很大，但其实小得不得了；而另一些事情，发生的概率极小，但人们由于种种原因，会以为常常在发生。</p><p>   这样的偏差并不奇怪，怪的是很多人并不相信自己对于某些事实会有很离谱的估计。</p><p>   之前法国经常发生恐怖袭击，又是剧院又是大街上，就有小朋友问我，我马上要去法国了，机票也订完了，但法国目前的这个状况我是不是该把机票退了，万一我真的遇到这样的情况，我该怎么做？</p><p>   虽然我还是基于曾经是特警的这样一个身份给她提供了一些普通人该如何应对突发性恐怖袭击的建议，但也明确表明了态度：首先你不用退机票，其次你在法国遇到的概率和其他地方没有什么大的差别。</p><p>   正如我们在前两天学的内容一样，人们往往会对新闻媒体大量渲染的事情记忆深刻，从而在潜意识里高估其发生的概率，尤其是生动的画面感。这也是为什么人们明知道飞机比汽车安全得多，却始终在内心里难以承认的原因，因为飞机的每次失事几乎都会占据头条。</p><p>   由于之前的工作关系，我在过去经常会接触到某一家医院（是一家大医院）被医闹的消息，原因无非是病人死亡，家属索要赔偿，每年都至少有一两次。当时我就想，这家医院经常死人，照理说医术不过关，为什么还有那么多人愿意去看病呢？</p><p>   当年的我忽略了这样一个事实，我在这块区域工作，这家医院每逢医闹我都知道，每次病人死亡我几乎都能知晓，但别家医院的情况我不知情，因此我在并不了解其他医院的病人数量、病人被送往医院时的紧急状况、病人死亡数目等数据的基础上，盲目地以为有病人死亡就等于医术不好。</p><p>   这种认知自大在很多方面都会害人不浅。</p><h2 id="属于专家的自大"><a href="#属于专家的自大" class="headerlink" title="属于专家的自大"></a>属于专家的自大</h2><p>   认知自大是会发生在每个人身上的事，那么某些领域的专家会不会呢？他们是人，当然也会，而且他们会很容易比普通人表现出更为强烈的认知自大特征。</p><p>   这么说并不代表我或者塔勒布在质疑专家的专业能力，这里唯一质疑的只是专家质疑自己的能力。</p><p>   诚然，这世上有些学科是有真正的专家的，这些专家虽然不能说在某一领域全知全能，但很明显他们会比一般人懂得多，比如说当你要做脑科手术的时候，你不会拜托一个记者去完成，当你要从北京坐飞机去洛杉矶时，你不会希望是一只猴子在开飞机。</p><p>   不过另一些领域，你很难证明那些所谓的专家是有多少专业技能的，比如证券操盘手，你肯定听过那只著名的赢过华尔街专家的猴子了，一只猴子选的股票组合可能并不比专家差劲，再比如金融预测家，他在预测明年的经济走势时，从明年往前看，表现得不会比一名普通记者更好，虽然从他的嘴里能听到更多艰涩的术语，再比如精神病医生、政治科学家等。</p><p>   我们可以给这些现象一个总结，那就是因变化而需要知识的事物，通常专家的作用并不大，因为那些领域永远需要的是关于未来的知识，且这些领域的很多现象没有对过去进行简单重复。</p><p>   很显然，黑天鹅现象越容易出现的领域，专家的知识越不靠谱；反之，黑天鹅现象出现频率更低的领域，专家的表现通常在很长一段时间内会不错，他们的好成绩可能会一直延续到极小概率出现一次黑天鹅事件为止。</p><h2 id="今日导言-3"><a href="#今日导言-3" class="headerlink" title="今日导言"></a>今日导言</h2><p>   我们常常会遇到计划之外的事情，这很平常，因为我们在做计划的时候其实也在做预测，在现实生活中，黑天鹅永远比我们想象的多，因此预测常常会出现偏差。</p><p>   不过黑天鹅也并非都是不好的，对于能产生正面效应的黑天鹅，我们不仅需要正确看待它，还可以利用它。</p><h2 id="计划之外"><a href="#计划之外" class="headerlink" title="计划之外"></a>计划之外</h2><p>   认知自大使人变得盲目乐观，于是很多人就学会了“预留提前量”。不过在很多时候，哪怕我们已经预留了一些提前量，最后的结果却还是要超过我们的估计。</p><p>   你可以随便找几个楼盘，开发商预计交付的时间和你预计的时间通常是不一致的，开发商预计6个月后交付，你并没有那么乐观，可能会预测至少需要9个月，而通常交付时间会在1年半以后；出版社向你约书，你们都预计6个月能交稿，最后一年多了才写到一半，也许这中间你妈妈住院了，或者你分手了无心写作，但这都不重要，意外总比我们想象中的多很多（我的第一本书比预计时间早了3个月交稿，也许这才是真正的黑天鹅）。</p><p>   再看看装修预算，如果预计装修花费40万，那么最后全部加起来通常会超过50万，哪怕你明确告诉我这40万里已经确实包含了家里所有的东西，你再也想不出其他需要花钱的地方了，大概率最后还是要超过50万。</p><p>   这种“计划之外”有着很多的原因，比如激励因素，开发商需要吸引你购买，因此把交付时间低估了，而你则是受到了对方锚定的影响；你为了得到出版社的合同，有意或无意地忽视了意外事件出现的频率，等等；又或者是你对于风险模型一无所知，对于“提前量”或“余量”毫无概念，一样会导致“计划之外”的频频发生，这些由于无知或额外的动机引起的预测谬误非常值得我们警醒。</p><h2 id="无意的发现"><a href="#无意的发现" class="headerlink" title="无意的发现"></a>无意的发现</h2><p>   计划之外有负面影响，它使我们的预测偏离，计划泡汤，但很多时候，许许多多的正向发现甚至是改变人类历史进程的那些，也都是在计划之外发生的。</p><p>   发明车轮的人可能并不是想发明车轮，发明飞机的人想象中的飞机也未必是最后造出来的样子，一切都是计划之外的，最著名的当属青霉素的发现，正是青霉素，让人类的平均寿命得以大幅飙升，但发现者亚历山大•弗莱明仅仅是因为青霉菌污染了他之前的一个实验样本才发现它的抗菌特性的，在这之前，弗莱明跟许多“前辈”一样，几乎已经丧失了信心。</p><p>   很多发现在事前并没有想好如何应用，比如互联网，那破不溜丢的邮件系统才是当时能想到的最大应用，还被人耻笑，因为没有初始的用户基数，这玩意儿几乎一文不值，现在呢？成为了一场人类生活方式的革命。而激光呢？发现者只是满足于将光线分成光束，仅此而已，现今世界有多少行业受益于这件当初只是为了“好玩”的事情？</p><p>   我们习惯于拿着问题找解决方案，但有时候，也可以学习一下拿着解决方案找问题。那些我们并没有想到去解决、可以解决，甚至没有意识到它的存在的问题，有时候比你当时想解决的更为重要。</p><h2 id="预测与反省"><a href="#预测与反省" class="headerlink" title="预测与反省"></a>预测与反省</h2><p>   如果我们的所获都和预期没有关系，是不是意味着我们就不需要预测了呢？那也不是，只是预测是一件技术活，需要有对未来的敬畏，保留不确定性，承认自己的无知，做好各种打脸的心理准备，又要尽量对过去的一切进行正确反省。</p><p>   很多人在预测之前只是盲目遵循过去的简单规律或者根据当下情绪就直接作出了判断，并没有用到更为深刻的反省心智。这是一种很糟糕的行为，因为反省是高级智力的表现，它需要对过去有足够深刻的认识，而不是忽略或者是简单归纳。</p><p>   比如当购买一辆新车时，很多人会预测，这辆新车将永久提升自己的幸福指数，因为它的音响系统很赞，样子又好，动力又强，回头率会很高。但他们可能不记得了，上一辆车的幸福指数持续了多久，也许是几个星期，也许是几个月。如果想到了这一点，他们可能不会甘愿为它付出那么多钱，因为这些钱里有一部分是由于对未来的幸福感估计过高而付费的。换句话说，此时的他们，由于极差的反省智力，做出了一次不够理性的决定。</p><p>   幸福感预测会有偏差，不幸也是如此。你现在可能预计如果自己欠下一百万的债务将是灾难性的，或者你会因此而跳楼，但当你真正到了这个境地时，你不一定会这么做。</p><p>   当人们预测不幸的持续时间时，往往也容易高估，因为适应环境的这种能力是绝大部分人与生俱来的。但在没有身处这种环境之中时，人们往往又容易忽略自己具有这个能力的事实。</p><h2 id="杠铃策略"><a href="#杠铃策略" class="headerlink" title="杠铃策略"></a>杠铃策略</h2><p>   “预测”这件事是如此的困难，但我们却常常高估自己的预测能力，就像炒股，当一个人做出买或者卖的决定时，通常意味着他认为自己这个决定的正确率是大于50%的。</p><p>   那么正在交易的人是不是真的都比至少半数的人要聪明呢？这件事显然从逻辑上就不会成立。</p><p>   一个人对自己的决定信心越足，他就越是难以接受失败，所以你会看到很多人在投资领域只要有一点点收益就会收回，而面对损失却不愿意止损。这一切只是由于从心底里产生的对失败的厌恶，他们只想让自己显得有高正确率，尤其是基金经理等夹杂着其他利益的，高正确率能让他们看上去更为可信。塔勒布有一个很生动的比喻，叫“在压路机前捡硬币”，每次都能捡一枚，正确率看上去极高，但一旦损失，可能是整条命。</p><p>   在应对黑天鹅事件中，塔勒布有个非常著名的策略，叫杠铃策略，我们来简单说说，下一本书还会提到。</p><p>   简而言之，你所有的投资都该投往风险这根杠铃的两极，而不是中间部位，因为你永远无法预知“中等风险”里的风险，事实上是不是远远超过你的认知。</p><p>   不过一个正常的人都能基本确切地知道自己在做着极度安全或极度风险的事情，你对能得到的回报也有相对准确的预期，不至于拿着低收益还冒着高风险。</p><p>   比如你可以把85%至90%的钱投入国债等极度安全或你能想到的最安全的产品中，将剩下的钱投入到风险极大的产品里，或许是比特币、以太坊等数字货币，又或许是参与ICO等。</p><p>   这样负面黑天鹅事件就很难伤害到你，因为你的损失有小额上限，而当正面黑天鹅事件来临，比如比特币、以太坊或者某些ICO的数字货币大涨几倍乃至十几倍时，你就能极大地从中获益。</p><h2 id="利用黑天鹅"><a href="#利用黑天鹅" class="headerlink" title="利用黑天鹅"></a>利用黑天鹅</h2><p>   塔勒布为了让读者们更好地利用黑天鹅，除了杠铃策略以外，还给了一系列建议。</p><p>   1、寻找突破性</p><p>   购买一点比特币的类似建议似乎有点像买彩票，冒风险以小博大？其实这中间还是有很大的区别。</p><p>   我们前面讲过突破性收入，我的新书能卖多少册？理论上是没有上限的，这个就可能产生突破性收入，突然因为一些不知名的原因，导致运气好有那么多人喜欢它，然后就有了之前想象不到的收入。但彩票不是这样，彩票有确定性收入，比如2元就是最多只能拿到400万（扣税以后），它有明确的规则和概率，也就是我们前面说的“确定的不确定性”，它的天花板很明显，这就导致哪怕黑天鹅产生了以后也不会有太过惊人的收益。</p><p>   2、放弃精确预测黑天鹅</p><p>   黑天鹅之所以为黑天鹅，是因为它不可精确预测，或许你可以预测可能会产生黑天鹅，但请不要试图去预测黑天鹅究竟长什么样子，这会框住你的思维，然后让你对那些你没有想到的事情缺乏准备。</p><p>   把精力放在准备和自我完善上，而不是预测上。</p><p>   3、认真对待机会</p><p>   想要搏到正面黑天鹅，首先要把自己置于它的影响之下，很多人并没有意识到当下的某些事情可能会导致黑天鹅有一定几率产生。</p><p>   如果有一档实力雄厚的节目找你去录制，你一定要推掉手上所有的活，取消所有之前预定好的计划，因为类似的机会可能只会出现那么一次。</p><p>   很多人可能会因为不够重视或者怯场而浪费掉机会，但他们往往事后仍然意识不到这种可能产生黑天鹅的机会有多么稀少，于是他们并不后悔，但却常常感叹自己的人生没有机会。</p><h2 id="今日导言-4"><a href="#今日导言-4" class="headerlink" title="今日导言"></a>今日导言</h2><p>   终于来到最后一天的学习了，最后一天我们来讲几个事物运行的规律，以及当我们不得不做出预测时，我们该怎么做。</p><h2 id="马太效应"><a href="#马太效应" class="headerlink" title="马太效应"></a>马太效应</h2><p>   我们在《异类》中讲过著名的马太效应，你看，它是如此著名，我们在这里又见到了。很多人之所以成为牛人，可能只是因为一件小事，让他在极端斯坦的领域内从一开始就领先了别人一点点，接着渐渐通过人们的跟风成为了地位不可动摇的行业大牛，比如某些作家、艺术家等等。</p><p>   很多城市也遵循马太效应，我们很容易就会看到很多大城市变得越来越大，因为人多，创造价值多，这就对其他城市造成了虹吸效应，最好的企业都往最大的那些城市跑，带来了机会，从而又产生了对人才的虹吸效应。而小城市则相反，变得越来越没有竞争力。</p><p>   想要在生活中获得更多马太效应带来的优势？比别人多努力一点点永远是个好建议，有时候多努力仅仅是那么一点点，结果就获得了某个机会，接着就可能被一系列不可思议的好运击中。</p><h2 id="长尾和马太"><a href="#长尾和马太" class="headerlink" title="长尾和马太"></a>长尾和马太</h2><p>   马太效应虽然是一个不可阻挡的趋势，但我们很少有看到什么领域内的差距一直在不断拉大。比如贫富差距，看起来遵循马太效应，但如果马太效应从一开始就必然存在，几百几千年后，人与人之间的贫富不该只有现在那么点儿差距。</p><p>   马太效应导致两极分化，这种分化就像弹簧，被不断拉长之后，其维持现有状况的力量就会越来越难，也就是整个系统是越来越脆弱的，局面被打破的概率也越来越大。我以政权的更迭为例，当资源全部倾向人数较少的统治阶级，且有不断加剧之势，通常意味着这种统治局面被打破的日子就越来越近了。</p><p>   很多公司、银行通过不断并购形成了巨无霸，结束了军阀割据的状态，看似整个系统波澜不惊，是比以前稳定许多，但一旦遭受黑天鹅事件，影响的可能不是一家公司，一家银行，而是整个全球的某一个行业或者多个行业。</p><p>   在应对黑天鹅事件上，长尾明显会更有优势。所谓长尾，就是许许多多的小人物加在一起能控制商业中不小的部分。看上去小人物的数量更多，争端更多，死亡的概率也更大，但对整个系统来说，由于他们更容易相互替代，因此系统作为一个整体反而更平稳，更有能力承受黑天鹅事件的侵袭。</p><p>   不过，现实的规律是，长尾终将走向马太，而马太在不断拉远强者和弱者的距离之后，终将因为一些不可预知的事件回归到长尾状态，于是又开始了新一轮的马太积累，这是一个循环。</p><h2 id="平均与极端"><a href="#平均与极端" class="headerlink" title="平均与极端"></a>平均与极端</h2><p>   黑天鹅事件无处不在，但黑天鹅事件的发生概率是有很大的区别的，具体我们可以从两类事件中进行简单区分。</p><p>   正如我们前几日所说，这世上有些事情是平均斯坦的（作者如此称呼），比如说身高、体重。假如平均身高是170cm，平均体重是60kg，你很难想象一个250cm的人或者是一个超过500kg的人，身高每增加10cm，人群中出现的概率就会指数级下降，在这些事情上，出现黑天鹅的概率就会非常小。</p><p>   而另一些事情却常常是极端斯坦的，比如财富分布，1%的人可能掌握着超过地球上50%的财富，或者是书的销量，J•K•罗琳的《哈利•波特》系列的销量就抵得上几万名作者出版的所有书籍销量总和，在这些领域，出现突破性远远超出我们意料之外的黑天鹅的概率就会大大增强。</p><p>   在平均斯坦的事件中，随着样本数的增大，个体对系统的影响微乎其微，这有点类似我们上一页讲的长尾。作者举了个生动的例子，理论上咖啡杯是有可能自动跳起来的，因为只要组成咖啡杯的粒子都往一个方向运动，那就肯定能自己跳起来，但事实上，这种概率小到可以忽略不计，因为这些粒子是处于平均斯坦的，在足够多的粒子样本下，我们可以忽略个体对整体的影响。</p><p>   但在极端斯坦则不同，如果让你预测一下眼前的数万乃至数十万人的平均财富，你很可能无能为力，因为你不确定比尔•盖茨在不在里面，只要出现一个这样的人就足以颠覆你对整个样本的估计，同样的，在不设涨跌幅的金融市场上，最极端的几天收益或许会超过几十年收益的一半以上。</p><p>   所以当我们对事情做出预测时，我们必须先分清楚，我们的对象究竟是属于平均斯坦领域的，还是极端斯坦领域的。</p><h2 id="成为黑天鹅的对手"><a href="#成为黑天鹅的对手" class="headerlink" title="成为黑天鹅的对手"></a>成为黑天鹅的对手</h2><p>   平均斯坦和极端斯坦代表着两种模式，在这两种模式的世界里，前者拥有温和的随机性，在这里，我们常常可以选择相信，而后者拥有疯狂的随机性，在这里，我们经常得保持怀疑。</p><p>   保持怀疑并不代表我们只能什么都不做，而是对不可见的风险有足够的自保和准备意识，人们常常误以为黑天鹅指的只是简单随机性，比如以为在赌场中了3个6就是黑天鹅事件，其实黑天鹅指的是不可预知的随机性，那些广为人知、可预期的风险或收益都不是真正的黑天鹅，黑天鹅永远可能在你的想象之外。</p><p>   要成为黑天鹅的对手，与前面的杠铃策略类似，当我们将自己置于正面黑天鹅的影响之下时，我们可以以小博大，此时应该非常冒险，因为失败的损失很小，失败的频次不那么重要；当我们可能预估会受到负面黑天鹅的影响之时，应该极度保守，因为在压路机前捡硬币并不是一个好习惯。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   《黑天鹅》这本书聚合内容共这么多，还有很多是和本书主题相关性比较小的，没有放进我们私塾的学习中来，所以如果自行阅读原书的话，会觉得有部分内容比较散。总体来说，我们知道黑天鹅是什么，我们该如何注意黑天鹅、应对黑天鹅乃至利用黑天鹅，这就可以了。</p><p>   让我们对全书再进行一次简单总结：</p><p>   1、黑天鹅特指这样的事情：罕见的、极端影响的和事后才可预测的事情。</p><p>   2、我们生活的这个世界比它看上去要复杂得多、难预测得多，但人们通常喜欢简化，或许是为了记忆方便。</p><p>   3、职场上，容易产生黑天鹅的都是那些报酬具有突破性的职业。</p><p>   4、平均斯坦的职业更适合大多数人。</p><p>   5、经验知识不靠谱，尤其是在快速变化的现代社会中，前人的经验往往并不能说明任何问题。</p><p>   6、我们的记忆通常是经过自我改造的，这使得我们常常在事后觉得自己在事前可以预测到某些事情。</p><p>   7、沉默的证据惯于被人们所忽视。</p><p>   8、确定性的随机性容易被人们认为是随机性的定义，但事实上还有更为上层的非确定性随机性，也可以叫不可预测随机性，这通常才是影响全局的关键所在。</p><p>   9、对精确预测保持敬畏，但可以提前为模糊预测的意外做必要的准备。</p><p>   10、对未知的不够敬畏容易导致人们的认知自大。</p><p>   11、专家只存在于对过去有确定性简单重复的领域，而对于常常在变化着，且变化不可预知的领域，专家通常是没什么作用的。</p><p>   12、黑天鹅有正面的，也有负面的。</p><p>   13、在投资中使用杠铃策略可以有效应对和利用黑天鹅。</p><p>   14、马太效应是一个基本规律，既然知道了规律，就得学会去用。</p><p>   15、马太效应虽然是不可抗拒的，但随着规模的扩大，其应对黑天鹅事件的能力便会减弱，最终导致崩溃回归。</p><p>   16、当我们想做出预测的时候，一定要先搞清楚，我们是处于平均斯坦还是极端斯坦。</p><p>   17、面对正面黑天鹅，我们该非常冒险，而面对负面黑天鹅，哪怕概率极小，我们也该极度保守。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;《黑天鹅——如何应对不可预知的未来》&lt;/blockquote&gt;
    
    </summary>
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/categories/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/tags/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>精进</title>
    <link href="yanchongsheng.github.io/2018/04/01/%E7%B2%BE%E8%BF%9B/"/>
    <id>yanchongsheng.github.io/2018/04/01/精进/</id>
    <published>2018-04-01T11:34:56.000Z</published>
    <updated>2018-04-17T10:06:01.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">《精进—— 如何成为一个很厉害的人》</blockquote><a id="more"></a><h2 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h2><h3 id="精进"><a href="#精进" class="headerlink" title="精进"></a>精进</h3><p>——如何成为一个很厉害的人</p><p>作者：采铜</p><p>出版发行：凤凰出版传媒股份有限公司</p><p>  江苏凤凰文艺出版社</p><p>本版版次：2016.6</p><p>ISBN：978-7-5399-9048-4</p><h2 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h2><p>   说实话，在看《精进》之前，我并不知道采铜是谁，但看了《精进》以后，我就特地去搜了他的相关信息，足可见我对该书内容的认可。</p><p>   《精进》这本书可以看作是一本个人成长指南，不仅有道理，还有方法论，对于陷入迷茫中的年轻人尤其有指导作用，我把它放在蚂蚁私塾学习书目较为靠前的位置，并不因为它比其他书更加浅显，而是它讲了更多可操作性的如何践行的事儿，放在前边儿就能够让大家尽早地朝正确的方向去做，只要在正确的道路上践行，就能对后面书籍的内容有更多的个人体悟。</p><p>   接下来，让我们跟着采铜老师去“精进”，如感兴趣，请自行购买《精进》原书。</p><h2 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h2><p>   时间管理是一门“显学”，每个人都想管理好时间，市面上有许许多多的关于时间管理的建议，这些建议大都是从一个场景入手，来教导我们如何在更少的时间内做更多的事情。</p><p>   采铜不一样，他并不想阐述具体场景化的应用例子，而是试图将时间管理的原则进行普适化，教会大家该如何看待和使用时间这种东西。</p><h2 id="序言-生活的框框"><a href="#序言-生活的框框" class="headerlink" title="序言 生活的框框"></a>序言 生活的框框</h2><p>   不得不说，生活中有着许多的约定俗成，这种约定俗成有些被人们认为是“本来就是这样的”，或者是“只有这样才能更好”。但，什么是更好？</p><p>   采铜讲了一个令他很有感悟的事情。老家有一台挂钟，每次回家看望母亲时，看到这台钟就觉得整个人都很放松，跟看其他钟表的感觉很不一样。后来才发现，原来这台挂钟的时间慢了5分钟。</p><p>   我们从小就被教育，手表要调快几分钟，这样不容易迟到，而且做什么都容易抢到别人前面，这并不代表不对，但确实让我们跑得很辛苦。这种“表就应该调快”的思维顽固地框住了我们，让我们根本没有想到去试试“把表调慢”的选项。</p><p>   生活是多维度的，它不应该只有一种标准，而是有着极其丰富和复杂的内涵。每个人都在别人框定的条条框框里生活，渐渐地活成了千篇一律的样子，因此我们才需要用力去打破这些困住我们思维的东西，去开启自我成长的另外一些可能性。</p><h2 id="如何对待时间"><a href="#如何对待时间" class="headerlink" title="如何对待时间"></a>如何对待时间</h2><p>   时间的稀缺性就不用再提了，如何运用时间，将时间用在哪里，决定了你朝着什么方向成为什么样的人。</p><p>   有些人将时间用于沉湎过去上，有些人将时间用于当下的享乐中，还有些人将时间用于投资未来。这三种方式有绝对的优劣吗？恐怕是很难区分，谁也不能说用于享乐就是低效使用，用于投资未来就是正当甚至是高效使用。</p><p>   最重要的是区分使用的场景，在现实中“随需而变”，比如当你进行大多数的工作时，你的投入产出比是较高的，投资未来显然会让你更有效率，但当你已将一天的大部分时间全身心地付于工作，正处于休闲时间时，是否还应该始终保持投资未来的心态呢？那就没有太大的必要了，因为投资最终也是为了消费，如果把全部时间都用于投资，而没有比例分配，那就失去了投资的初始意义。</p><p>   量化自己的投入和产出，量化幸福感等虚拟感受的价值，选择最具有时间性价比的做法，是最为明智的。</p><h2 id="平衡远期与近期"><a href="#平衡远期与近期" class="headerlink" title="平衡远期与近期"></a>平衡远期与近期</h2><p>   性价比是我们做出时间使用选择的关键。我们经常性地会遇到一个问题，那就是远期目标与近期目标的冲突。</p><p>   当我们说我们想长期在股市中获利时，我们指的是远期目标，当我们说我们今天买的股票明天就能涨时，我们指的是近期目标。如果我们关注的是近期目标，我们就应该大量地研究K线图，去探听各种消息；如果我们关注的是远期目标，那么K线图未必具有多大的参考价值，也许我们应该做的是关注行业的走势、公司的业务以及财务报表。</p><p>   虽说远期目标的达成是以一个个近期目标为基础的，但有时候关注近期目标的那些具有性价比的行为，未必对远期目标就有利，所以性价比这回事，是需要分开来考虑的。</p><p>   最有效的做法就是把更有效率地使用时间的行为设定在以远期目标为基准，并将远期目标尽量情境化、具体化，比如你说你想成为有钱人，那么有钱人需要做哪些事，拥有哪些品质，这些就是你的行动纲领，这样当你转换到近期目标的实现中，就能更好地克服由于近期目标的局限性带来的与远期利益不一致的行为冲动。</p><h2 id="更值得做的事"><a href="#更值得做的事" class="headerlink" title="更值得做的事"></a>更值得做的事</h2><p>   远期目标与近期目标的矛盾解决方案是始终以远期目标的实现为基础纲领，然后再根据近期目标的具体情境进行微调。</p><p>   对于具体的事情，采铜根据收益值的大小和收益值随时间的衰减程度，进行了更精细化的分类。</p><p>   很明显，性价比最高的事肯定是高收益、收益衰减较慢的事，比如增长一种重要的认知，学会一项很重要又少有人会的技能等；性价比最低的肯定是低收益，收益衰减较快的事，比如无意义的争吵等。</p><p>   那么对于低收益、收益衰减较慢的事和高收益、收益衰减较快的事，我们究竟该如何选择呢？究竟收益的绝对值更重要还是衰减的快慢更重要？</p><p>   根据我们前面在远期目标和近期目标提到的，以谁为纲领？当然是远期目标，所以当然是收益的衰减速度最重要。</p><p>   当我们总是从事高收益但收益很快就会退去的事情时，我们是没有什么积累效应的，这对于近期目标当然是好，但就不一定对远期目标有利了，也就是你现在的行为只对你当下产生效益，对远期目标的实现，没有一丁点儿作用，最后就容易导致一事无成。</p><h2 id="掌控时间的快慢深浅"><a href="#掌控时间的快慢深浅" class="headerlink" title="掌控时间的快慢深浅"></a>掌控时间的快慢深浅</h2><p>   当我们搞明白了什么是更值得去做、更有性价比的事以后，我们来看看面对具体的事，该如何去做。</p><p>   “时间不够用”是大部分人的感受，在我推出蚂蚁私塾以后，很多准学员问我，蔡叔，我即将考研，课业很繁重，怎么办，我怕没时间看。</p><p>   真的吗？我们一天的任务基本是5到10分钟时间，一周也就5天，你每天上个厕所都足以完成一天的学习，说没时间的我就不知道是什么心理了，除非你把学习这件事排在了生活优先级的最末尾，那就不好说了。</p><p>   很多人的“时间不够用”其实是不懂得时间的使用艺术。</p><p>   大部分的时间管理学问都在教我们如何变得更“快”，但其实一味求快却未必是什么好事，心里只有快，就容易让行事作风变得急躁，对于做事本身来说，未必能达到最好的效果。</p><p>   时间有快慢也有深浅，慢而深的体验是时间的高质量使用方式，当你完全沉浸在自己的主动投入中，你能获得极大的满足感，这跟看电视等被动式休闲带来的感受完全不同。</p><p>   因此，我们可以在一些不需要深入的事务性或简单执行的任务中求快，在仅需了解即可的任务中求浅，而在创造性或深度思考的行为中，必须求慢、求深。</p><p>   很多不重要的事情，就算紧急也可以选择性放弃；重要的事情，不紧急也得钻下去，掌控住使用时间的节奏。</p><h2 id="今日导读"><a href="#今日导读" class="headerlink" title="今日导读"></a>今日导读</h2><p>   当我们在第一天学习了时间和精力管理的很多知识之后，接下来最重要的，就是行动了，因为再好的管理都是建立在行动的基础之上的。</p><p>   行动是智慧的外在体现，为什么要行动，如何行动，翻开书本来看看。</p><h2 id="破除陈旧的思维框架（1）"><a href="#破除陈旧的思维框架（1）" class="headerlink" title="破除陈旧的思维框架（1）"></a>破除陈旧的思维框架（1）</h2><p>   采铜在书中提到他收到过许多人的求助，我也一样，不管在公众号后台、微博私信还是在分答，我几乎每天都会收到读者的求助。在总结了大量的问题以后，我跟采铜有相同的感受，那就是，大部分人的烦恼其实都是自寻烦恼。</p><p>   比如很多人问我关于考研好还是工作好的问题，这个问题该怎么回答呢？会这么问，说明他本身的思维框架就有问题，他在问出问题的时候，已经带了一个假设，那就是“其中肯定有一项是更好的选择”。</p><p>   事实上有吗？根本没有。有些人不管考研还是工作都能得到好结果，而另一些人选了考研就后悔为啥不去工作，选了工作就后悔为啥不考研，因为他们什么都干不好。所以这不是选择的问题，是人本身的问题。</p><p>   比如有些人烦恼领导给自己穿小鞋，这是什么烦恼？他的思维框架是领导人品不好，搞针对，而他则是运气不好，摊上这么个领导。</p><p>   其实领导敢给他穿小鞋，说明他对于领导来说并不具备不可替代的价值，要么就努力提升自己，让自己拥有不可替代的价值，要么就选择走人，解决方案都摆在台面上，到底在烦恼什么呢？</p><p>   再比如有些人徘徊在个人理想和孝顺之间，感到非常痛苦。其实这又有什么可痛苦的呢？他的思维框架是，任何不听从父母的行为都叫不孝，那么他除了做父母的提线木偶外，还有什么自身的价值么？</p><p>   孝顺的概念没理清就容易被道德绑架。</p><p>   所以我们的很多烦恼、很多难以抉择，其实根本不存在，之所以存在，是因为我们的错误思维框架把自己牢牢地框死了，我们一直在自我设限。只要敢破除这些条条框框，烦恼自然不复存在。</p><h2 id="破除陈旧的思维框架（2）"><a href="#破除陈旧的思维框架（2）" class="headerlink" title="破除陈旧的思维框架（2）"></a>破除陈旧的思维框架（2）</h2><p>   破除思维框架，是为了更好地重生，因为在思维框架以外，完全是另一个世界。很多人就是因为没有勇气打破思维框架，结果被永远地困在了自己固有思维的小牢笼之中。</p><p>   比如很多人，他们在找工作的时候，就只会寻找跟自己所学专业一致的工作，丝毫不考虑其他可能更为适合自己的工作。</p><p>   他们的思维框架就是，如果我选择了其他领域的工作，我的所学不是都白费了吗？这个思维框架就是阻碍他们走向更广阔天地的绊脚石。</p><p>   在职业生涯的选择上，这种想法是绝对错误的。采铜把职业生涯分为内职业生涯和外职业生涯。</p><p>   一个人从心底里热爱什么，在什么方面积累了多少东西，这些都是属于内职业生涯的范畴，而一个人从事什么具体工作，或者说是扮演什么社会角色，都可以被称作外职业生涯。</p><p>   内职业生涯通常是连续的，是贯穿一个人的一生的，也就是说，不管外职业生涯如何变化，内职业生涯都是在默默地起作用的，所以认为从事了别的领域就等于放弃了本专业的人，是看不到那些“默默”的东西起的作用，自然就容易把自己多年苦学带来的“沉没成本”看得过重。</p><h2 id="先做起来"><a href="#先做起来" class="headerlink" title="先做起来"></a>先做起来</h2><p>   虽然我极度不鼓励买彩票，并将其称为智商税，但想要中奖，逻辑上第一步是应该先买一张的。</p><p>   当我鼓励很多人写公众号的时候，他们总是说，“我文笔不好”、“我没有时间更新”、“我不能持续产出内容”……拜托，没有谁让你写得跟作家一样，也没有谁逼着你日更，仅仅是建议你“开始”而已，开始又有多难呢？</p><p>   很多事情都是做着做着就越来越容易的，哪怕是试错，也要及早给自己排除错误选项的机会。</p><p>   创业也是一样，如果大家持续地关注下去，就会发现我们的蚂蚁私塾是会一直不断地迭代下去的，有人会问，那为什么不直接推出一个终极版，而要一点点改进和迭代呢？因为我需要你们的反馈。</p><p>   市场是最好的老师，当我哪里做得不够尽善尽美的时候，市场会给我耳光，用户会给我耳光，而我的员工不会，我自己也不会，所以我必须及早地推出一个最小化的可行产品，拿到市场上让大家去用脚投票，然后边做边改。</p><h2 id="你永远无法准备好"><a href="#你永远无法准备好" class="headerlink" title="你永远无法准备好"></a>你永远无法准备好</h2><p>   我把推出最小化可行产品的方式看成是打造完美成品的第一环，虽然“完美成品”永远没有，因为在我眼里，任何东西永远都可以更好。</p><p>   所以，如果一定要“准备好再出发”的话，这个世界是根本没有“准备好”这回事的，因为“准备”这件事也永远可以更好，这意味着我们就不用出发了。事实上，有许许多多的人正是因为这样，到了最后也一直没有出发。</p><p>   认清了这一点，在市场的惊涛骇浪中不断地把自己的想法和产品推倒重来或许才是最好的选择，相信这样的学习和“打击”会让你的产品和想法成熟得更快。</p><h2 id="先啃掉硬骨头"><a href="#先啃掉硬骨头" class="headerlink" title="先啃掉硬骨头"></a>先啃掉硬骨头</h2><p>   当我们接受了即刻行动这样的观点并切实去做的时候，马上又会遇到一个新问题，先做哪一部分呢？</p><p>   任何工作只要严格划分一下的话，都会有一个核心思考区间，只要搞定了这个，其他的就是边边角角的补充或是照章执行就可以了。</p><p>   我在念书的年纪非常贪玩，从小学到高中，经常都因为不完成数学作业受到老师的批评，但每逢大考，我的数学成绩通常都比较不错。为什么，不是我不听课不做作业就能学好，而是我通常只需要把习题的核心思考搞定就等于做完了。看上去作业都没写，但我心里知道自己已经做完了，至于拿笔写上去，这只是细枝末节的底层工作，做与不做常常看心情（为了人身安全，切勿盲目效仿）。</p><p>   以我平时写文章为例，最难的部分就是逻辑层面的构思，这要花费我不少的时间，但当我把一件事、一个道理吃得透透的时候，摘下几个关键点，文章在我脑子里就已经成型了，“写下来”反而是比较容易的事。</p><p>   构思的时候需要心无旁骛，因为此时大脑是被充分激活的状态，思考非常活跃，所有同质的内容都被聚合在一起然后向外发散，一旦被打断能不能保持活跃状态甚至是续上都是问题。</p><p>   但要成文，甚至可以在思考、记录要点过后隔半小时或一小时，那都没问题，因为最困难的部分，我们已经提前完成了。</p><h2 id="行动是最好的老师"><a href="#行动是最好的老师" class="headerlink" title="行动是最好的老师"></a>行动是最好的老师</h2><p>   我知道很多人报名“蚂蚁私塾”都有这样的想法：蔡叔带着我学习，一年以后就能成功提升自己。</p><p>   诚然，哪怕你光是看完，一年以后也绝对能有一定的提升，但如果你有更高的追求，比如想在大多数事情的决策上比以前更加有判断力，考虑事情更加全面和本质化，那么光看肯定是不行的，你得思考，还得去做。</p><p>   学了很多却没有卵用的这种状况，通常是那些懒惰学生的专属，只学不做，就跟学功夫只学理论不上擂台一样，你知道了怎么出直拳，但现实状况瞬息万变，教科书里的直拳能否灵活转化为你自己的直拳，这是同一班的学生技艺大不相同的重要原因，也是学了有卵用跟没卵用的差别。</p><p>   从行动中思考、复盘，并转化为自己的东西，是巩固和指导行动本身的最佳手段。</p><p>   A师傅说：咏春是世上最厉害的功夫，咏春讲究最短路线打击，不管怎么打，一定是我先打到你。</p><p>   B师傅说：咏春算个屁，太极才是最厉害的，甭管过来什么劲，都能以力打力给你怼回去。</p><p>   接着两个人就开始了一次，我这么打你你怎么化解，我这么化解你怎么攻击……诸如此类的争论，争得面红耳赤。</p><p>   正在一旁烧饭的老头看了实在可笑，不禁插嘴说：二位师傅，你们说这么多有什么用，打一场不就知道了？</p><p>   用认识去行动，从行动中去丰富认识，才能最大程度避免学了没卵用的尴尬，随便乱用，甚至用都不用，那学它干什么呢？</p><h2 id="今日导读-1"><a href="#今日导读-1" class="headerlink" title="今日导读"></a>今日导读</h2><p>   为什么要学习？学是为了懂，懂是为了用，无论是在现实世界中产生具体的效用，还是只是为了精神上的愉悦，都是为了用。</p><p>   今天的内容就是跟大家说说什么样的学习方式最有效，以及“用”跟“学”之间有些什么样的化学反应。</p><h2 id="什么是好的学习"><a href="#什么是好的学习" class="headerlink" title="什么是好的学习"></a>什么是好的学习</h2><p>   大家有没有想过，我是以什么准则去挑选蚂蚁私塾的“教科书”的？</p><p>   很多人看书仅仅是由于别人说这本书好，所以就去买来看了，他们摄取的知识是编制好的普通教材里的知识，并不一定是用来解决自己内心的疑惑，这个区别很重要。</p><p>   我挑选的书籍，是最大程度能解决普通人普遍困惑的书籍，这样才能在最大范围覆盖住大部分人群。如果我挑一本学游泳的书籍，可能就有一堆人跳出来说，虽然教材编得很好，我也学了，但这好像是你提供给我学的东西，不是我主动想得到的东西啊。</p><p>   这就对了，大部分人学习就是这样的方式，接受到了别人灌输式的知识就觉得懂了很多，忽略了自己真正的待解难题。</p><p>   好的学习是从点开始的，一个很好的点会引发很多思考，从而由点及面地进行主动化全面学习。点是优秀的学习材料带来的，会不会深入地思考下去，以及有没有后续的全面学习过程，则是学习者本身自带的。</p><h2 id="学会解码"><a href="#学会解码" class="headerlink" title="学会解码"></a>学会解码</h2><p>   由点及面的思考可以说是一次对信息的解码过程。好的学习者十分善于解码，解码是一个把表层信息转化成自己的内化信息的过程，不只看结论，还得找过程；不只做归纳，还得做延伸；不只比较相似，还得比较不同。</p><p>   有时我会在我的个人公众号里引导读者进行留言，这就是鼓励读者进行信息解码的过程。你以自己的语言说出来，就是一个解码过程，解得好与不好另说，至少你解了。包括你们现在看到的书，就是我的解码过程，而你们所要做的解码，可以体现在笔记上，也可以体现在行动上，这些都能算是解码。</p><p>   一个好的解码过程通常分为以下几步：</p><p>   1、它说了什么（首先要看懂、听懂）；</p><p>   2、它对我有什么价值（其次要跟自己结合起来）</p><p>   3、它的内部包含了哪些技能，我可不可以效仿（最后得出践行的可行性）。</p><p>   很多人的解码只停留在第一层，如果解码的对象是具有丰富内涵的文章、讲座或是艺术作品，实在是一种对成长机会的浪费。</p><h2 id="学以致用"><a href="#学以致用" class="headerlink" title="学以致用"></a>学以致用</h2><p>   无论我们学到了什么，最终的目的是不是用，我们都得用。这句话有点拗口，我来解释一下。</p><p>   如果我们学了东西是想拿来在现实生活中有更实际的获益的，我们当然得把学的东西转化为能指导现实生活的思想或者是利用它来挣钱的技能。</p><p>   如果我们学了东西只是想增加一点思想的饱满度，那也得在现实中应用才行。为什么呢？因为任何东西学了都需要巩固，而我们的记忆是线索型的，用了，才会产生更多的记忆连结点，甚至还能对所学的东西进行“改良”，若是长期不用，容易给记忆提取造成困难。</p><p>   所以无论你的目标是不是应用，只要你真心实意地想学，想摄取，而不是单纯的消费瞬时感受，那么你就都得学以致用。</p><p>   采铜给了三个学以致用的方法：</p><p>   1、写作式操练。</p><p>   写作是典型的对知识的重构活动，摄入知识，加工知识，表达知识，收到他人的反馈（公开发表后），最后补全或重构知识。</p><p>   2、游戏式操练。</p><p>   游戏可以让知识的巩固过程更具有趣味性，比如算24点可以练习心算能力，《大航海时代》可以巩固地理知识，还有很多逻辑问答游戏，可以锻炼推理能力。</p><p>   3、设计式操练</p><p>   设计式操练就是通过调用已有的知识，进行灵活组合之后，自由设计某个解决方案，来解决某个特定问题。这种方式几乎等同于创造：用已知碎片创造出未知整体。</p><p>   这种交错式的学习方式，是以具体问题为向导，进行知识的组合创造，当知道自己缺了哪一块之后，又会反过来促进我们对新知识的学习。</p><h2 id="让知识发生化学作用"><a href="#让知识发生化学作用" class="headerlink" title="让知识发生化学作用"></a>让知识发生化学作用</h2><p>   高水平的学习者，他们脑中的知识是相互连结的，就算知识与知识之间都是单独学习的，也能找到知识之间的连接点，甚至创造出连接点。</p><p>   低水平的学习者，他们脑中的知识是孤立的，哪怕他们进行的是整体学习，每个点之间也不存在思想的联通。</p><p>   然而解决一个现实问题时，通常需要的是复合型知识，此时，低水平的学习者就难以应用，就如我们以前做数学大题一样，明明用到的都是学过的知识，就是没法想出如何融合起来才能解出题的方法。</p><p>   要做到知识之间的有效融合，就需要有举一反三的能力，而这种能力本身，就是洞察出了知识背后的“深层结构”，看似不一样的事情背后，可能有着同样的深层结构，我们要做的，就是把每个知识最本质的东西抽取出来，比如你对一个物件有感情，很多人说不清楚“感情”是怎么回事儿，这个点在我的新书里就有阐述，感情的本质是你将自己的一部分投射到其他物件上，你其实是跟自己的一部分存在连结，这就是感情。</p><p>   面对一个概念、一个问题，都需要不断深挖，直到将知识的本质进行彻底剥离，如此，一个领域内掌握的知识就能被有效地向其他领域迁移和延展，甚至能因此找到最佳的方法论。</p><h2 id="今日导读-2"><a href="#今日导读-2" class="headerlink" title="今日导读"></a>今日导读</h2><p>   思考这件事，实在是一件苦差事。</p><p>   如何更好地抓取“源信息”，如何更好地得到灵感，如何更好地利用工具去辅助思考，这些是我们可以学习的让思考不那么“苦”的方式。</p><h2 id="信息，尽量简化"><a href="#信息，尽量简化" class="headerlink" title="信息，尽量简化"></a>信息，尽量简化</h2><p>   当我们被朋友圈、微博和各类微信公众号的信息占满了我们的时间的时候，可曾想过，我们除了得到了一些不断流动的信息以外，可有得到一些真正有价值的积累性信息？</p><p>   有时候，我会发现某几个微博大号发的内容永远差不多，那么我们是否有必要将它们的更新都显示在自己的微博更新中？</p><p>   微博也好、公众号也罢，甚至于新闻app，都需要少而精，我们常常说，现代人面临着信息过载，其实信息过载并不是什么问题，因为信息本来就很多，科技的发展只是让我们增加了接收的能力。</p><p>   信息从来不过载，之所以我们会感觉被信息塞满，仅仅是由于我们的“过滤器”进化得没有科技那么快而已。</p><p>   采铜给出了一些进化过滤器的方法：</p><p>   1、只抓优秀的信息源。</p><p>   很多人关注了非常多的微信公众号，然而关注了以后就不想取关，好像免费关注就是赚到了，而取关就是失去了潜在的机会一样，是吃亏了，哪怕他们几乎并不打开大多数的公众号。</p><p>   好的信息源是稀缺的，一份深度的、高质量的内容足以抵得上成百上千份噪音，偶尔会有营销类内容？这是可能的，但好的信息源往往会有节制，因为它们珍惜你的时间。</p><p>   2、不追流行。</p><p>   远离流行的东西并不意味着要远离未来的趋势，我们需要刻意远离的是别人的爱好、别人的狂欢和别人有意制造的营销类新闻和信息，这类东西不会让你变得更好，甚至不能让你的快乐停留更久。</p><p>   3、重事实和逻辑。</p><p>   事实就是事实，逻辑就是逻辑，这些东西都是不会变的。看别人的观点的确有意义，但对待别人的东西要慎重，要通过逻辑去验证，而不是抓过来就直接塞进自己的脑子里，这样你就很容易被各类纷繁复杂的观点给搞晕。</p><p>   比如你们看到的这本书籍，这是采铜的原书吗？当然不是，甚至连缩略版都不是，因为《精进》原书才是采铜的书，而我需要对采铜的观点进行逻辑审视，才可以有选择性地拿给学员，而学员需要自己再解码，才可以变成自己的东西。</p><h2 id="“潜意识”的喂养"><a href="#“潜意识”的喂养" class="headerlink" title="“潜意识”的喂养"></a>“潜意识”的喂养</h2><p>   信息需要尽量简化，这并不代表我们要用简化了的信息去简单思考，而是我们喂养思考的信息必须又少又精。</p><p>   我们都知道，在我们需要结论的时候，我们是需要收敛思考的，也就是把有用的信息、相关的信息尽可能多的作为我们用来归纳的判断和依据。</p><p>   但在结论之前，我们并不知道哪些信息是对正确结论有决定性影响的，因此此时我们的思考是需要尽量发散的。</p><p>   很多人容易把这两者搞混，在该用某一种的时候用了另一种。比如在会议上交流设计方案，大家都在畅所欲言，本是极度开放，需要发散的时候，有些人却已经在收敛，对除自己认可的以外的方案连听都不想认真听，这就犯了大忌。</p><p>   发散的潜意识需要来自“随机”、“混乱”和“不相关”的喂养，我在很多时候会有这样的感受，一些想不明白的问题，一些突破不了关卡，在走路时，洗澡时，玩闹时突然就解决了。</p><p>   这是为什么呢？我们在前面的《暗时间》里已经学过，潜意识是会自动运行的，当我有一件非常重要的事，并让它时时保持后台运行的时候，它在我的思维定式里难以突破，却可能在我的思维定式“监控”失效的时候，从其他“看起来不相关”的事情那里找到突破口，这就是为什么艺术家常常说要去寻找灵感的原因，寻找灵感并不是一件定向的事情，相反，最大程度不定向，才有可能找到真正的灵感，但前提是，这件事依然在后台运行。</p><h2 id="思考直观化"><a href="#思考直观化" class="headerlink" title="思考直观化"></a>思考直观化</h2><p>   我们在很多侦探片或警匪片里都看到过，在整理线索的过程中，很多侦探或警察喜欢在一张大大的白板上贴上各类照片，然后用记号笔在上面画出人物之间的具体关系。</p><p>   很多公司的部门会议也是一样，部门主管直接拿过来一张白板，把会议重点在上面涂涂画画。</p><p>   之前我常常在想，这些关系和重点直接说或者直接记在脑子里不就行了，为什么要画出来，或者是写出来呢，关系又不是很复杂。</p><p>   其实这么想是不正确的，我忘了以前做数学题时候的感受了。以前做数学题遇到难题的时候，我们通常用的一个方式是：把相关的公式都写在草稿纸上，然后将公式进行推论或变体，再看着这些内容去思考题目的解法。</p><p>   这有个什么好处呢？我们都知道，人的工作记忆是有极限的，思维负载也是。一边记忆东西，一边思考另外的东西，思考的效率和发散性是会受到影响的，无论记忆的东西有多么简单。</p><p>   用视觉去替代记忆，就可以让大脑分配给思考的运算空间尽量大，而越清晰越详细的图解，就能让这一过程的效用最大化。</p><p>   有人可能马上就会想到思维导图了。没错，思维导图是一个工具，但它不是万能的，每个人的思维都有不一样的习惯和形状，一定要根据自己的习惯来，而不是盲目套用市面上最流行的工具。</p><h2 id="周密思考"><a href="#周密思考" class="headerlink" title="周密思考"></a>周密思考</h2><p>   纯粹靠着大脑运转能把复杂事物思考得十分周密，我应该是还没有见过这样的人，当然我不排除有这样的人存在。</p><p>   正如我们上面所说，所有人的工作记忆都是有限的，而绝大部分人在同步运行方面，负载量还是相当低的，因此对待重要的事情，需要更为准确的决策时，我们需要使用最笨的穷举法。</p><p>   举个很简单的例子：找对象。</p><p>   很多人觉得自己要求也不是很高啊，为什么找到合心意的这么难？这是由于我们在选条件的时候并不足够理性。</p><p>   以女生为例，要选择合心意的男性，可能需要175cm以上、至少有一套二线以上的房子、长相看得过去、有点幽默感、工作稳定、热爱运动……</p><p>   这样的要求高吗？单拎一项出来可能还好，但如果因为一项或者两项达不到要求就要排除，那可就麻烦了。我们用穷举法试试：</p><p>   我国平均男性身高为169cm，因此175cm以上算仅有35%吧；二线城市以上的房子至少一套，估计仅有30%；长相看得过去，也就是普通偏上一丢丢，算40%；幽默感和没有幽默感的各占50%；工作稳定，估计只有30%；热爱运动，又只有50%……</p><p>   让我们来算一下适合你的人占总人数的比重吧，所有概率乘起来大约是……0.3%！</p><p>   心平气和地问自己一句，你找得到吗？</p><p>   当你将自己的条件全部列出来的时候，你就大概能根据自己的条件去修正自己的要求了，什么是我该在意的，我该在意到什么程度，直到最后符合你条件的在10%以上为止，那才是个认真找找能“够得到”的靠谱的概率。</p><h2 id="今日导读-3"><a href="#今日导读-3" class="headerlink" title="今日导读"></a>今日导读</h2><p>   谁都知道要努力，但是要怎么努力，那可就难倒绝大部分人了。</p><p>   今天是最后一天，跟大家讲一讲努力的正确姿势，虽然未必非常全，但至少一定有那么一个点是击中你，并可以直接拿来在你的现实生活中应用的。</p><p>   还记得我们前面学过的吗？学以致用，一定要用。</p><h2 id="努力是才能"><a href="#努力是才能" class="headerlink" title="努力是才能"></a>努力是才能</h2><p>   很多人有一种很阴暗的想法，觉得靠天赋打败别人似乎是一件很光荣的事，而靠努力打败别人似乎是一件很丢脸的事。我们爱享受的是那种别人怎么努力都追不上的快感，却不愿接受付出得更多因此才显得更牛的感觉。</p><p>   其实很多人对努力的理解是有误的，能意识到努力的价值，本身就是认知能力更高的表现。</p><p>   除了极少数人以外，天赋能决定的因素比人们想象中小得多，而努力能决定的部分则被人们严重低估，认识到这一点，有意愿付出努力并且不羞于谈到自己的努力，都是一种才能。</p><p>   要将自己的固有心智改过来，有一个有效的思维方法：将封闭性、绝对化的负面总结性评价改为开放式、启发式的提问。比如尽量避免对自己说“我不行”、“我不擅长”，改为“怎样做会更好”、“有没有其他更好的方式可以搞定”等。</p><h2 id="打造自己的长板"><a href="#打造自己的长板" class="headerlink" title="打造自己的长板"></a>打造自己的长板</h2><p>   努力，要找对方向。</p><p>   几乎所有人都知道木桶理论，一只木桶能够盛的水量取决于最短的那块板。这个道理当然是正确的，但是不是对应到人身上，所有事都能这么类比呢？那就未必了。</p><p>   一个猪队友是否会影响一次行动？有可能会，也有可能不会，不可一概而论。</p><p>   对于现代社会的个人发展来说，长板理论可能是更为现实和有用的。每个人都需要有自己的长板，专注一个领域，让长板尽可能长，才有可能越过每个领域的初期无回报或少回报期，进入收益快速飞跃的快车道，因为任何领域都是下游聚集了大部分的人，而资源都集中在头部。</p><p>   木桶理论有个经典应用：一环套一环紧密配合的团队只要有一人是特别弱的，就会影响整个团队的表现。但其实这种针对团队的要求正印证了对于个人来讲，长板理论才是最实际的。</p><p>   设想一下，既然在这样紧密配合的团队里，一个弱点就会影响整体，那么作为公司来讲，是不是应该把每个点都尽量配成最强的呢？拥有长板的人，才符合这个团队的要求，而样样能捞，样样都干得一般的，恰恰是团队最不需要的，因为他无论负责哪项，都是团队的“短板”。</p><h2 id="给自己加量"><a href="#给自己加量" class="headerlink" title="给自己加量"></a>给自己加量</h2><p>   很多人去过健身房，就算没去过，大抵也听说过肌肉锻炼的原理：对同一块区域进行重复大力的刺激，大到把肌肉撕裂，然后在其自动修复缝合之前，加入蛋白质，让肌肉在缝合后自然增大。</p><p>   其实大脑也是一样，不经常“撕裂”它，它就得不到锻炼。因此，我们在做事的过程中，需要常常有意识地“练脑”，有意识地撕裂它，给它加加量，别让它总待在舒服的地方，用起来才会更趁手。</p><p>   我曾经鼓励过年轻人适度负债，注意，这里指的是适度，也就是我们所说的“轻负债”，不是毫无节制地负债。适度负债的好处就是人为地创造一个有压力的场景，让大脑不得不为了生存不停地走出舒适区，这些负债若是拿来投资的那就比纯消费更好了。</p><p>   为了生存，我们就不得不持续想办法增加收入，有人一天打几份工，有人在原领域内产生了创造性的突破，不管是哪一种，当他把“轻负债”的状况解决以后，他的财富积累速度就会远高于同等状况的同事或朋友。</p><p>   每个人都蕴藏着很大的潜能，无论是大脑还是肌肉，当它们逐渐适应了当前的强度时，你需要寻找更强的刺激，如此循环往复，才会变得越来越好。</p><h2 id="化被动为主动"><a href="#化被动为主动" class="headerlink" title="化被动为主动"></a>化被动为主动</h2><p>   很多书都在提醒我们如何更好地应用意志力，或许我们之后的书里也会提到。意志力重要吗？当然重要，但每个人的意志力都是有上限的，若要想长时间地坚持下去，驱动力还得由内而外才行。</p><p>   人使用时间是自由的，我们在上一本《暗时间》里已经阐述过，除了明面上的时间以外，我们的生活中还会有很多的暗时间，而暗时间的使用则完全跟意愿有关，所以如果单纯靠意志力去坚持一件事情，势必就把暗时间给完全放弃了。也就是说，当我们拼命逼迫自己做某事时，我们在有限的时间里也许会做，但也就仅此而已了。</p><p>   因此最好的方法是化被动为主动，主动培养起我们对重要事情的兴趣。</p><p>   有人说，兴趣这事儿有就有，没有就没有，怎么培养呢？这就对兴趣有了误解。很多时候，我们并不是有了兴趣才做得好，而是先做得好才有了兴趣。</p><p>   当一个事情带来的仅有挫折的时候，很少人会有兴趣，这也是为什么多数人都容易半途而废的原因。</p><p>   若是能找到重要事的有利应用，哪怕只是用来吹牛，当你稍微做得比别人好的时候，就能产生出兴趣，化被动为主动，这就不需要意志力的参与了。</p><p>   所以，在重要事里面找到属于自己的“刚需兴趣点”，并将其进行初步突破，这才是摆脱单纯依靠意志力推进的最好方法。</p><h2 id="保持独特"><a href="#保持独特" class="headerlink" title="保持独特"></a>保持独特</h2><p>   如果说有什么是最好的竞争之道的话，那就是尽量不要完全顺着大多数人的路走下去。这很奇怪，就像是“最好的竞争就是避免竞争”一样奇怪。</p><p>   但其实再仔细想想就明白了，跟大量的人进行同质化竞争，胜出的概率是微乎其微的，因为每个人都在进行从1到100的尝试，鲜有人去探索从0到1。</p><p>   很多人说，从0到1多难啊，说这个话的人是由于不知道自己的独特性可以从什么方面提供给他人独一无二的价值，也就是既不了解自己的独特点，也不了解他人的需求。</p><p>   不让自己的独特性消失，也许是成功的其中一个重要条件，尤其是在互联网时代，拥有更高的可辨识性，就更易于形成个人品牌，虽然跟大多数人不一样需要放弃部分群体安全感为代价，但把自己的独特性打造成独一无二的优势的时候，也就意味着总有那么一部分人，他们没你不行，你接下去要做的，就是找到这部分人。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   《精进》里有着很多的实用技能，粗看一遍也许未必可以达到实际应用的效果，既然咱们的书比原书字数少那么多，内容又精深了一步，值得周六复习时候进行二刷，爱学习的小伙伴甚至能写出大页笔记，哪怕最后只应用到一两项，这些学习时间难道不值么？</p><p>   接下来让我们对全书的重点进行一次回顾和总结：</p><p>   1、要使时间的使用更具性价比，就需要平衡近期目标与远期目标。</p><p>   2、只要收益衰减足够慢，不管收益是不是足够高，都更值得去做。</p><p>   3、时间不够用，往往是平衡不好时间使用的快慢深浅。</p><p>   4、打破自己的思维框架，需要尽力认识到每件事背后的核心意义。</p><p>   5、任何事，不先做起来，问题会越攒越多，做起来以后，已解决的问题会越攒越多。</p><p>   6、先做核心的、难的部分，搞定了核心部分，被暂时打断也就不怕了。</p><p>   7、学以致用不仅是“学”的意图所在，还能更好地反过来指导和检验“学”的内容。</p><p>   8、好的学习过程是由一个优秀的点带动自主学习的过程。</p><p>   9、好的学习包含了解码过程，要将表层信息转化成自己的内化信息。</p><p>   10、不管学了是不是为了用，只要你觉得有用，那就必须得用。</p><p>   11、只有解剖知识的深层结构，才能将其与更多知识进行互融共通，知识就活了。</p><p>   12、潜意识大多是在不被监控的环境下才会发生作用。</p><p>   13、把思考直观化，是解放工作记忆的好办法。</p><p>   14、努力是一种才能，有努力的意识本身也是认知更高的表现。</p><p>   15、对于个人来说，长板理论比木桶理论更为有用。</p><p>   16、锻炼大脑跟锻炼肌肉一样，需要不断走出舒适区，在“重复撕裂”中成长。</p><p>   17、意志力的时效性是很有限的，找出更多兴趣点，将被动做转化为主动做。</p><p>   18、最好的竞争方式是非同质化竞争，保持自己的独特性。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;《精进—— 如何成为一个很厉害的人》&lt;/blockquote&gt;
    
    </summary>
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/categories/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
    
      <category term="蚂蚁私塾" scheme="yanchongsheng.github.io/tags/%E8%9A%82%E8%9A%81%E7%A7%81%E5%A1%BE/"/>
    
  </entry>
  
</feed>
